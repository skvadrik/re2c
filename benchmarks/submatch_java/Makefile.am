CLASSES := classes

LIBRE2C_JNI := libre2c_jni.so
LIBRE2C_JNI_HDR := re2c_RE2C.h

LIBRE2C_CLASSES := $(CLASSES)/libre2c
LIBRE2C_JAR := RE2C.jar

RETDFA_CLASSES := $(CLASSES)/retdfa
RETDFA_JAR := ReTdfa.jar

# Generate header for JNI bindings to libre2c.
$(LIBRE2C_JNI_HDR): $(srcdir)/libre2c/RE2C.java
	$(AM_V_at)mkdir -p $(LIBRE2C_CLASSES)
	$(AM_V_GEN)javac -d $(LIBRE2C_CLASSES) -h . $<

# Build RE2C jar. Depend on the autogenerated header, as the same rule that
# generates header also generates class file.
$(LIBRE2C_JAR): $(LIBRE2C_JNI_HDR)
	$(AM_V_GEN)jar cf $@ -C $(LIBRE2C_CLASSES) .

# Build JNI bindings to libre2c.
$(LIBRE2C_JNI): $(srcdir)/libre2c/RE2C.cpp $(LIBRE2C_JNI_HDR)
	$(AM_V_at)mkdir -p $(@D)
	$(AM_V_GEN)$(CXX) -fPIC -Wall -O3 -g -shared \
		-I $$JAVA_HOME/include \
		-I $$JAVA_HOME/include/linux \
		-I $(top_srcdir)/lib \
		-I . \
		-L $(top_builddir)/.libs \
		-Wl,-rpath,$(top_builddir)/.libs \
		-lre2c \
		-o $@ $<

# Build ReTdfa jar.
$(RETDFA_JAR): $(srcdir)/ReTdfa.java $(LIBRE2C_JNI) $(LIBRE2C_JAR)
	$(AM_V_at)rm -f $@
	$(AM_V_at)mkdir -p $(RETDFA_CLASSES)
	$(AM_V_GEN)javac \
		-d $(RETDFA_CLASSES) \
		-cp $(LIBRE2C_CLASSES) \
		$< \
	&& jar cf $@ -C $(RETDFA_CLASSES) .

all-local: $(RETDFA_JAR)

# Remove all autogenerated files.
clean-local:
	$(AM_V_at)rm -rf \
		$(CLASSES) \
		$(LIBRE2C_JNI) \
		$(LIBRE2C_JNI_HDR) \
		$(LIBRE2C_JAR) \
		$(RETDFA_JAR)
