SRC_DIR = $(srcdir)/src
ENG_DIR = engines
GEN_DIR = gen
PREGEN_DIR = $(srcdir)/pregen
BIN_DIR = bin
DAT_DIR = data
CFLAGS = -O3 -g -I $(SRC_DIR)
RAGEL = $(ENG_DIR)/ragel/ragel7
KLEENEX = $(ENG_DIR)/kleenex/kexc
RE2C = $(top_builddir)/re2c
RE2C_FLAGS = --reusable --tags --no-generation-date
RE2C_FLAGS_BC = $(RE2C_FLAGS) -I $(SRC_DIR)/re2c/include_bc
RE2C_FLAGS_EOF = $(RE2C_FLAGS) -I $(SRC_DIR)/re2c/include_eof

BENCHMARKS = \
    alt1_2 alt1_4 alt1_8 \
    alt2_2 alt2_4 alt2_8 \
    alt4_2 alt4_4 alt4_8 \
    cat2_0 cat2_4 cat2_8 \
    cat4_0 cat4_2 cat4_4 \
    cat8_0 cat8_1 cat8_2 \
    iter_a_4 iter_a_16 iter_a_64 \
    iter_b_2_3_5 iter_b_7_11_13 iter_b_17_19_23 \
    iter_c_2_3_5 iter_c_7_11_13 iter_c_17_19_23 \
    apache_log \
    datetime \
    email \
    ipv4 \
    uri_simple \
    uri_rfc3986 \
    http_simple \
    http_rfc7230

COMMON_SRC = $(SRC_DIR)/common.h

GEN_RAGEL_T1 = $(patsubst %, $(GEN_DIR)/ragel/%-T1.c, $(BENCHMARKS))
GEN_RAGEL_F1 = $(patsubst %, $(GEN_DIR)/ragel/%-F1.c, $(BENCHMARKS))
GEN_RAGEL_G2 = $(patsubst %, $(GEN_DIR)/ragel/%-G2.c, $(BENCHMARKS))
GEN_RAGEL = $(GEN_RAGEL_T1) $(GEN_RAGEL_F1) $(GEN_RAGEL_G2)

BIN_RAGEL = $(patsubst $(GEN_DIR)%.c, $(BIN_DIR)%, $(GEN_RAGEL))

COMMON_RAGEL = $(COMMON_SRC) $(SRC_DIR)/ragel/common.c

GEN_RE2C_BC_TDFA1     = $(patsubst %, $(GEN_DIR)/re2c/%-bc-tdfa1.c,     $(BENCHMARKS))
GEN_RE2C_EOF_TDFA1    = $(patsubst %, $(GEN_DIR)/re2c/%-eof-tdfa1.c,    $(BENCHMARKS))
GEN_RE2C_BC_TDFA1_ES  = $(patsubst %, $(GEN_DIR)/re2c/%-bc-tdfa1-es.c,  $(BENCHMARKS))
GEN_RE2C_EOF_TDFA1_ES = $(patsubst %, $(GEN_DIR)/re2c/%-eof-tdfa1-es.c, $(BENCHMARKS))
GEN_RE2C_BC_TDFA0     = $(patsubst %, $(GEN_DIR)/re2c/%-bc-tdfa0.c,     $(BENCHMARKS))
GEN_RE2C_EOF_TDFA0    = $(patsubst %, $(GEN_DIR)/re2c/%-eof-tdfa0.c,    $(BENCHMARKS))
GEN_RE2C_BC_STADFA    = $(patsubst %, $(GEN_DIR)/re2c/%-bc-stadfa.c,    $(BENCHMARKS))
GEN_RE2C_EOF_STADFA   = $(patsubst %, $(GEN_DIR)/re2c/%-eof-stadfa.c,   $(BENCHMARKS))
GEN_RE2C = \
    $(GEN_RE2C_BC_TDFA1) \
    $(GEN_RE2C_EOF_TDFA1) \
    $(GEN_RE2C_BC_TDFA1_ES) \
    $(GEN_RE2C_EOF_TDFA1_ES) \
    $(GEN_RE2C_BC_TDFA0) \
    $(GEN_RE2C_EOF_TDFA0) \
    $(GEN_RE2C_BC_STADFA) \
    $(GEN_RE2C_EOF_STADFA)

BIN_RE2C = $(patsubst $(GEN_DIR)%.c, $(BIN_DIR)%, $(GEN_RE2C))

COMMON_RE2C = \
    $(COMMON_SRC) \
    $(SRC_DIR)/re2c/common.re \
    $(SRC_DIR)/re2c/include_bc/fill.re \
    $(SRC_DIR)/re2c/include_bc/fill_email.re \
    $(SRC_DIR)/re2c/include_eof/fill.re \
    $(SRC_DIR)/re2c/include_eof/fill_email.re

# Masked benchmarks for which Kleenex either generates very large output
# (tens of megabytes of C code), or even causes out of memory condition.
KLEENEX_MASKED = \
	iter_b_7_11_13 iter_b_17_19_23 \
	iter_c_7_11_13 iter_c_17_19_23

GEN_KLEENEX = $(patsubst %, $(GEN_DIR)/kleenex/%.c, \
	$(filter-out $(KLEENEX_MASKED), $(BENCHMARKS)))

BIN_KLEENEX = $(patsubst $(GEN_DIR)%.c, $(BIN_DIR)%, $(GEN_KLEENEX))

GEN = $(GEN_RAGEL) $(GEN_RE2C) $(GEN_KLEENEX)

BIN_ = $(BIN_RAGEL) $(BIN_RE2C) $(BIN_KLEENEX)
BIN_GCC   = $(patsubst %, %-gcc, $(BIN_))
BIN_CLANG = $(patsubst %, %-clang, $(BIN_))
BIN = $(BIN_GCC) $(BIN_CLANG)

# Some benchmarks share the same data, like `uri_simple` and `uri_rfc3986`
DAT = $(patsubst %, $(DAT_DIR)/%/big, \
    $(sort $(foreach bench, $(BENCHMARKS), \
        $(firstword $(subst _, , $(bench))))))

all-local: $(BIN) $(DAT)

if REGEN_BENCHMARKS

$(GEN_RAGEL_T1): $(GEN_DIR)/%-T1.c: $(SRC_DIR)/%.rl $(COMMON_RAGEL) $(RAGEL)
	@mkdir -p $(@D)
	$(RAGEL_LIBRARY_PATH) $(RAGEL) -T1 $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/ragel/$(@F) ; then cp -f $@ $(PREGEN_DIR)/ragel/$(@F) ; fi

$(GEN_RAGEL_F1): $(GEN_DIR)/%-F1.c: $(SRC_DIR)/%.rl $(COMMON_RAGEL) $(RAGEL)
	@mkdir -p $(@D)
	$(RAGEL_LIBRARY_PATH) $(RAGEL) -F1 $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/ragel/$(@F) ; then cp -f $@ $(PREGEN_DIR)/ragel/$(@F) ; fi

$(GEN_RAGEL_G2): $(GEN_DIR)/%-G2.c: $(SRC_DIR)/%.rl $(COMMON_RAGEL) $(RAGEL)
	@mkdir -p $(@D)
	$(RAGEL_LIBRARY_PATH) $(RAGEL) -G2 $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/ragel/$(@F) ; then cp -f $@ $(PREGEN_DIR)/ragel/$(@F) ; fi

$(GEN_RE2C_BC_TDFA1): $(GEN_DIR)/%-bc-tdfa1.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_BC) $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_EOF_TDFA1): $(GEN_DIR)/%-eof-tdfa1.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_EOF) $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_BC_TDFA1_ES): $(GEN_DIR)/%-bc-tdfa1-es.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_BC) --eager-skip $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_EOF_TDFA1_ES): $(GEN_DIR)/%-eof-tdfa1-es.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_EOF) --eager-skip $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_BC_TDFA0): $(GEN_DIR)/%-bc-tdfa0.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_BC) --no-lookahead $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_EOF_TDFA0): $(GEN_DIR)/%-eof-tdfa0.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_EOF) --no-lookahead $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_BC_STADFA): $(GEN_DIR)/%-bc-stadfa.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_BC) --stadfa $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_RE2C_EOF_STADFA): $(GEN_DIR)/%-eof-stadfa.c: $(SRC_DIR)/%.re $(COMMON_RE2C) $(RE2C)
	@mkdir -p $(@D)
	$(RE2C) $(RE2C_FLAGS_EOF) --stadfa $< -o $@
	if ! cmp -s $@ $(PREGEN_DIR)/re2c/$(@F) ; then cp -f $@ $(PREGEN_DIR)/re2c/$(@F) ; fi

$(GEN_KLEENEX): $(GEN_DIR)/%.c: $(SRC_DIR)/%.kex $(KLEENEX)
	@mkdir -p $(@D)
	$(KLEENEX) compile $< --srcout $@ --act=false --la=true
	if ! cmp -s $@ $(PREGEN_DIR)/kleenex/$(@F) ; then cp -f $@ $(PREGEN_DIR)/kleenex/$(@F) ; fi

else

$(GEN): $(GEN_DIR)/%: $(PREGEN_DIR)/%
	@mkdir -p $(@D)
	cp -f $< $@

endif

$(BIN_GCC): $(BIN_DIR)/%-gcc: $(GEN_DIR)/%.c
	@mkdir -p $(@D)
	gcc $(CFLAGS) -o $@ $<

$(BIN_CLANG): $(BIN_DIR)/%-clang: $(GEN_DIR)/%.c
	@mkdir -p $(@D)
	clang $(CFLAGS) -o $@ $<

$(DAT): $(DAT_DIR)/%/big: $(DAT_DIR)/%/small
	mkdir -p $(@D) && cp $(srcdir)/$(@D)/small $(srcdir)/$(@D)/gen_* $(@D)
	( cd $(@D) && ./gen_* )

$(KLEENEX):
	mkdir -p $(@D) && cp $(srcdir)/engines/kleenex/getkleenex.sh $(srcdir)/engines/kleenex/0001-Updating-for-new-GHC.patch $(@D)
	( cd $(@D) && ./getkleenex.sh )

$(RAGEL):
	mkdir -p $(@D) && cp $(srcdir)/engines/ragel/getragel7.sh $(@D)
	( cd $(@D) && ./getragel7.sh )

clean-local:
	@rm -f $(GEN) $(BIN) $(DAT)
