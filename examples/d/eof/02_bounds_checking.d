/* Generated by re2c 3.0 on Sun Jan  8 12:34:41 2023 */
#line 1 "02_bounds_checking.re"
// re2d $INPUT -o $OUTPUT
module bounds_checking02;
import core.stdc.stdlib;
import core.stdc.string;

#line 9 "02_bounds_checking.d"
enum YYMAXFILL = 1;
#line 6 "02_bounds_checking.re"


int lex(in string str, ulong len) {
    // Make a copy of the string with YYMAXFILL zeroes at the end.
    char *buf = cast(char*) malloc(len + YYMAXFILL);
    memcpy(buf, cast(const(void*)) str, len);
    memset(buf + len, 0, YYMAXFILL);

    const(char) *YYCURSOR = buf, YYLIMIT = buf + len + YYMAXFILL;
    int count = 0;

loop:
    
#line 25 "02_bounds_checking.d"
{
	char yych;
	if (YYLIMIT <= YYCURSOR) goto fail;
	yych = *YYCURSOR;
	if (yych <= ' ') {
		if (yych <= 0x0000) goto yy1;
		if (yych <= 0x001F) goto yy2;
		goto yy3;
	} else {
		if (yych == '\'') goto yy4;
		goto yy2;
	}
yy1:
	YYCURSOR++;
#line 28 "02_bounds_checking.re"
	{
            // Check that it is the sentinel, not some unexpected null.
            if (YYCURSOR - 1 == buf + len) goto exit; else goto fail;
        }
#line 45 "02_bounds_checking.d"
yy2:
	YYCURSOR++;
#line 34 "02_bounds_checking.re"
	{ goto fail; }
#line 50 "02_bounds_checking.d"
yy3:
	YYCURSOR++;
	if (YYLIMIT <= YYCURSOR) goto fail;
	yych = *YYCURSOR;
	if (yych == ' ') goto yy3;
#line 33 "02_bounds_checking.re"
	{ goto loop; }
#line 58 "02_bounds_checking.d"
yy4:
	YYCURSOR++;
	if (YYLIMIT <= YYCURSOR) goto fail;
	yych = *YYCURSOR;
	if (yych == '\'') goto yy5;
	if (yych == '\\') goto yy6;
	goto yy4;
yy5:
	YYCURSOR++;
#line 32 "02_bounds_checking.re"
	{ ++count; goto loop; }
#line 70 "02_bounds_checking.d"
yy6:
	YYCURSOR++;
	if (YYLIMIT <= YYCURSOR) goto fail;
	goto yy4;
}
#line 35 "02_bounds_checking.re"


fail:
    count = -1;

exit:
    free(buf);
    return count;
}

void TEST(immutable char[] s, int r){
    assert(lex(s,s.length)==r);
}

unittest{
    TEST("", 0);
    TEST("'qu\0tes' 'are' 'fine: \\'' ", 3);
    TEST("'unterminated\\'", -1);
    TEST("'unexpected \0 null\\'", -1);
}

extern(C) void main()
{
    static foreach(u; __traits(getUnitTests, __traits(parent, main)))
        u();
}


