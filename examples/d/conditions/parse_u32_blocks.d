/* Generated by re2c 3.0 on Sun Jan  8 11:19:58 2023 */
// re2d $INPUT -o $OUTPUT -i


enum ERROR = ulong.max;

void add(ulong BASE)( ref ulong u, int d){
    u =u*BASE+d;
    if (u > uint.max){ u = ERROR;}
}


ulong parse_u32(const(char) * s){
    const(char) *  YYCURSOR = s, YYMARKER;
    ulong u = 0;

    
{
	char yych;
	yych = *YYCURSOR;
	if (yych <= '/') goto yy1;
	if (yych <= '0') goto yy2;
	if (yych <= '9') goto yy4;
yy1:
	YYCURSOR++;
	{ return ERROR; }
yy2:
	YYCURSOR++;
	YYMARKER = YYCURSOR;
	yych = *YYCURSOR;
	if (yych <= 'X') {
		if (yych == 'B') goto yy5;
		if (yych >= 'X') goto yy7;
	} else {
		if (yych <= 'b') {
			if (yych >= 'b') goto yy5;
		} else {
			if (yych == 'x') goto yy7;
		}
	}
yy3:
	{ goto oct; }
yy4:
	YYCURSOR++;
	YYCURSOR += -1;
	{ goto dec; }
yy5:
	YYCURSOR++;
	yych = *YYCURSOR;
	if (yych <= '/') goto yy6;
	if (yych <= '1') goto yy8;
yy6:
	YYCURSOR = YYMARKER;
	goto yy3;
yy7:
	YYCURSOR++;
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy6;
		if (yych <= '9') goto yy9;
		goto yy6;
	} else {
		if (yych <= 'F') goto yy9;
		if (yych <= '`') goto yy6;
		if (yych <= 'f') goto yy9;
		goto yy6;
	}
yy8:
	YYCURSOR++;
	YYCURSOR += -1;
	{ goto bin; }
yy9:
	YYCURSOR++;
	YYCURSOR += -1;
	{ goto hex; }
}

bin:
    
{
	char yych;
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy11;
	if (yych <= '/') goto yy12;
	if (yych <= '1') goto yy13;
	goto yy12;
yy11:
	YYCURSOR++;
	{ return u; }
yy12:
	YYCURSOR++;
	{ return ERROR; }
yy13:
	YYCURSOR++;
	{ add!(2)(u, YYCURSOR[-1] - '0'); goto bin; }
}

oct:
    
{
	char yych;
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy15;
	if (yych <= '/') goto yy16;
	if (yych <= '7') goto yy17;
	goto yy16;
yy15:
	YYCURSOR++;
	{ return u; }
yy16:
	YYCURSOR++;
	{ return ERROR; }
yy17:
	YYCURSOR++;
	{ add!(8)(u, YYCURSOR[-1] - '0'); goto oct; }
}

dec:
    
{
	char yych;
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy19;
	if (yych <= '/') goto yy20;
	if (yych <= '9') goto yy21;
	goto yy20;
yy19:
	YYCURSOR++;
	{ return u; }
yy20:
	YYCURSOR++;
	{ return ERROR; }
yy21:
	YYCURSOR++;
	{ add!(10)(u, YYCURSOR[-1] - '0'); goto dec; }
}

hex:
    
{
	char yych;
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= 0x0000) goto yy23;
		if (yych <= '/') goto yy24;
		if (yych <= '9') goto yy25;
		goto yy24;
	} else {
		if (yych <= 'F') goto yy26;
		if (yych <= '`') goto yy24;
		if (yych <= 'f') goto yy27;
		goto yy24;
	}
yy23:
	YYCURSOR++;
	{ return u; }
yy24:
	YYCURSOR++;
	{ return ERROR; }
yy25:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - '0');      goto hex; }
yy26:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - 'A' + 10); goto hex; }
yy27:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - 'a' + 10); goto hex; }
}

}

unittest{
    assert(parse_u32("") == ERROR);
    assert(parse_u32("1234567890") == 1234567890);
    assert(parse_u32("0b1101") == 13);
    assert(parse_u32("0x7Fe") == 2046);
    assert(parse_u32("0644") == 420);
    assert(parse_u32("9999999999") == ERROR);
}

extern(C) void main()
{
    static foreach(u; __traits(getUnitTests, __traits(parent, main)))
        u();
}

