/* Generated by re2c 3.0 on Sun Jan  8 11:25:48 2023 */
// re2d $INPUT -o $OUTPUT -ci

enum ERROR = ulong.max;
enum YYCONDTYPE {
	yycinit,
	yycbin,
	yycdec,
	yychex,
	yycoct
};


void add(ulong BASE)( ref ulong u, int d){
    u =u*BASE+d;
    if (u > uint.max){ u = ERROR;}
}

ulong parse_u32(const char * s){
    const(char) *  YYCURSOR = s, YYMARKER;
    YYCONDTYPE c = YYCONDTYPE.yycinit;
    ulong u = 0;

    
{
	char yych;
	if (c < 2) {
		if (c < 1) {
			goto yyc_init;
		} else {
			goto yyc_bin;
		}
	} else {
		if (c < 3) {
			goto yyc_dec;
		} else {
			if (c < 4) {
				goto yyc_hex;
			} else {
				goto yyc_oct;
			}
		}
	}
/* *********************************** */
yyc_init:
	yych = *YYCURSOR;
	if (yych <= '/') goto yy1;
	if (yych <= '0') goto yy2;
	if (yych <= '9') goto yy4;
yy1:
	YYCURSOR++;
	{ return ERROR; }
yy2:
	YYCURSOR++;
	YYMARKER = YYCURSOR;
	yych = *YYCURSOR;
	if (yych <= 'X') {
		if (yych == 'B') goto yy5;
		if (yych >= 'X') goto yy7;
	} else {
		if (yych <= 'b') {
			if (yych >= 'b') goto yy5;
		} else {
			if (yych == 'x') goto yy7;
		}
	}
yy3:
	c = YYCONDTYPE.yycoct;
	goto yyc_oct;
yy4:
	YYCURSOR++;
	YYCURSOR += -1;
	c = YYCONDTYPE.yycdec;
	goto yyc_dec;
yy5:
	YYCURSOR++;
	yych = *YYCURSOR;
	if (yych <= '/') goto yy6;
	if (yych <= '1') goto yy8;
yy6:
	YYCURSOR = YYMARKER;
	goto yy3;
yy7:
	YYCURSOR++;
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy6;
		if (yych <= '9') goto yy9;
		goto yy6;
	} else {
		if (yych <= 'F') goto yy9;
		if (yych <= '`') goto yy6;
		if (yych <= 'f') goto yy9;
		goto yy6;
	}
yy8:
	YYCURSOR++;
	YYCURSOR += -1;
	c = YYCONDTYPE.yycbin;
	goto yyc_bin;
yy9:
	YYCURSOR++;
	YYCURSOR += -1;
	c = YYCONDTYPE.yychex;
	goto yyc_hex;
/* *********************************** */
yyc_bin:
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy11;
	if (yych <= '/') goto yy12;
	if (yych <= '1') goto yy13;
	goto yy12;
yy11:
	YYCURSOR++;
	{ return u; }
yy12:
	YYCURSOR++;
	{ return ERROR; }
yy13:
	YYCURSOR++;
	{ add!(2)(u,  YYCURSOR[-1] - '0');      goto yyc_bin; }
/* *********************************** */
yyc_dec:
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy15;
	if (yych <= '/') goto yy16;
	if (yych <= '9') goto yy17;
	goto yy16;
yy15:
	YYCURSOR++;
	{ return u; }
yy16:
	YYCURSOR++;
	{ return ERROR; }
yy17:
	YYCURSOR++;
	{ add!(10)(u, YYCURSOR[-1] - '0');      goto yyc_dec; }
/* *********************************** */
yyc_hex:
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= 0x0000) goto yy19;
		if (yych <= '/') goto yy20;
		if (yych <= '9') goto yy21;
		goto yy20;
	} else {
		if (yych <= 'F') goto yy22;
		if (yych <= '`') goto yy20;
		if (yych <= 'f') goto yy23;
		goto yy20;
	}
yy19:
	YYCURSOR++;
	{ return u; }
yy20:
	YYCURSOR++;
	{ return ERROR; }
yy21:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - '0');      goto yyc_hex; }
yy22:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - 'A' + 10); goto yyc_hex; }
yy23:
	YYCURSOR++;
	{ add!(16)(u, YYCURSOR[-1] - 'a' + 10); goto yyc_hex; }
/* *********************************** */
yyc_oct:
	yych = *YYCURSOR;
	if (yych <= 0x0000) goto yy25;
	if (yych <= '/') goto yy26;
	if (yych <= '7') goto yy27;
	goto yy26;
yy25:
	YYCURSOR++;
	{ return u; }
yy26:
	YYCURSOR++;
	{ return ERROR; }
yy27:
	YYCURSOR++;
	{ add!(8)(u,  YYCURSOR[-1] - '0');      goto yyc_oct; }
}

}



unittest{
    assert(parse_u32("") == ERROR);
    assert(parse_u32("1234567890") == 1234567890);
    assert(parse_u32("0b1101") == 13);
    assert(parse_u32("0x7Fe") == 2046);
    assert(parse_u32("0644") == 420);
    assert(parse_u32("9999999999") == ERROR);
}

extern(C) void main()
{
    static foreach(u; __traits(getUnitTests, __traits(parent, main)))
        u();
}


