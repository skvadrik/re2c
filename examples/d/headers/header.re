// re2d $INPUT -o $OUTPUT -i --header lexer/state.d
import core.stdc.stddef;
import lexer.state;  // the module is generated by re2c

/*!header:re2c:on*/
module lexer.state;
struct LexerState {
    const(char) * str, cur;
    /*!stags:re2c format = "const(char) *@@;"; */
};
/*!header:re2c:off*/

long lex(ref LexerState st) {
    const(char) *t;
    /*!re2c
        re2c:header = "lexer/state.d";
        re2c:yyfill:enable = 0;
        re2c:define:YYCTYPE = char;
        re2c:define:YYCURSOR = "st.cur";
        re2c:define:YYPEEK = '*st.cur';
        re2c:define:YYSKIP = 'st.cur++;';
        re2c:define:YYSTAGP = "@@{tag} = st.cur;";
        re2c:tags = 1;
        re2c:tags:expression = "st.@@";

        [a]* @t [b]* { return t - st.str; }
    */
}

unittest{
    const char *s = "ab";
    LexerState st = { s, s /*!stags:re2c format = ", null"; */ };
    assert(lex(st) == 1);
    const char *s2 = "aaabbbbbbbb";
    LexerState st2 = { s2, s2 /*!stags:re2c format = ", null"; */ };
    assert(lex(st2) == 3);
}

extern(C) void main()
{
    static foreach(u; __traits(getUnitTests, __traits(parent, main)))
        u();
}
