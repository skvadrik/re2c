/* Generated by re2c 4.1 */
#line 1 "src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/helpers.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 28 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 25 "src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 60 "src/parse/lexer.re"


#line 132 "src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 160,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		160, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy1;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= '\f') goto yy1;
			goto yy5;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy1;
			goto yy6;
		} else {
			if (yych == '/') goto yy7;
			goto yy1;
		}
	}
	++cur;
#line 274 "src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 120 "src/parse/lexer.cc"
yy1:
	++cur;
yy2:
#line 294 "src/parse/lexer.re"
	{ goto loop; }
#line 126 "src/parse/lexer.cc"
yy3:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) goto yy8;
	if (yych == '#') goto yy10;
yy4:
#line 289 "src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 138 "src/parse/lexer.cc"
yy5:
	yych = *++cur;
	if (yych == '\n') goto yy3;
	goto yy2;
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '{') goto yy11;
	goto yy2;
yy7:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy12;
	goto yy2;
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) goto yy8;
	if (yych == '#') goto yy10;
yy9:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) goto yy4;
			else goto yy2;
		} else {
			goto yy58;
		}
	} else {
		if (yyaccept <= 4) {
			if (yyaccept == 3) goto yy142;
			else goto yy144;
		} else {
			goto yy172;
		}
	}
yy10:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych == 'l') goto yy13;
		goto yy9;
	}
yy11:
	yych = *++cur;
	if (yych <= 'h') {
		if (yych <= '\r') {
			if (yych == '\n') {
				yyt1 = cur;
				goto yy14;
			}
			if (yych <= '\f') goto yy9;
			yyt1 = cur;
			goto yy15;
		} else {
			if (yych <= 'c') {
				if (yych <= 'b') goto yy9;
				goto yy16;
			} else {
				if (yych <= 'f') goto yy9;
				if (yych <= 'g') goto yy17;
				goto yy18;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'k') {
				if (yych <= 'i') goto yy19;
				goto yy9;
			} else {
				if (yych <= 'l') goto yy20;
				if (yych <= 'm') goto yy21;
				goto yy9;
			}
		} else {
			if (yych <= 's') {
				if (yych <= 'r') goto yy22;
				goto yy23;
			} else {
				if (yych == 'u') goto yy24;
				goto yy9;
			}
		}
	}
yy12:
	yych = *++cur;
	if (yych == '!') goto yy25;
	goto yy9;
yy13:
	yych = *++cur;
	if (yych == 'i') goto yy26;
	goto yy9;
yy14:
	++cur;
	cur = yyt1;
#line 148 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 246 "src/parse/lexer.cc"
yy15:
	yych = *++cur;
	if (yych == '\n') goto yy14;
	goto yy9;
yy16:
	yych = *++cur;
	if (yych == 'o') goto yy27;
	goto yy9;
yy17:
	yych = *++cur;
	if (yych == 'e') goto yy28;
	goto yy9;
yy18:
	yych = *++cur;
	if (yych == 'e') goto yy29;
	goto yy9;
yy19:
	yych = *++cur;
	if (yych == 'g') goto yy30;
	if (yych == 'n') goto yy31;
	goto yy9;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy32;
	goto yy9;
yy21:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy33;
		goto yy9;
	} else {
		if (yych <= 't') goto yy34;
		if (yych == 'v') goto yy35;
		goto yy9;
	}
yy22:
	yych = *++cur;
	if (yych == 'u') goto yy36;
	goto yy9;
yy23:
	yych = *++cur;
	if (yych == 't') goto yy37;
	if (yych == 'v') goto yy38;
	goto yy9;
yy24:
	yych = *++cur;
	if (yych == 's') goto yy39;
	goto yy9;
yy25:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy40;
		case 'g': goto yy41;
		case 'h': goto yy42;
		case 'i': goto yy43;
		case 'l': goto yy44;
		case 'm': goto yy45;
		case 'r': goto yy46;
		case 's': goto yy47;
		case 't': goto yy48;
		case 'u': goto yy49;
		default: goto yy9;
	}
yy26:
	yych = *++cur;
	if (yych == 'n') goto yy50;
	goto yy9;
yy27:
	yych = *++cur;
	if (yych == 'n') goto yy51;
	goto yy9;
yy28:
	yych = *++cur;
	if (yych == 't') goto yy52;
	goto yy9;
yy29:
	yych = *++cur;
	if (yych == 'a') goto yy53;
	goto yy9;
yy30:
	yych = *++cur;
	if (yych == 'n') goto yy54;
	goto yy9;
yy31:
	yych = *++cur;
	if (yych == 'c') goto yy55;
	goto yy9;
yy32:
	yych = *++cur;
	if (yych == 'c') goto yy56;
	goto yy9;
yy33:
	yych = *++cur;
	if (yych == 'x') goto yy57;
	goto yy9;
yy34:
	yych = *++cur;
	if (yych == 'a') goto yy59;
	goto yy9;
yy35:
	yych = *++cur;
	if (yych == 'a') goto yy60;
	goto yy9;
yy36:
	yych = *++cur;
	if (yych == 'l') goto yy61;
	goto yy9;
yy37:
	yych = *++cur;
	if (yych == 'a') goto yy62;
	goto yy9;
yy38:
	yych = *++cur;
	if (yych == 'a') goto yy63;
	goto yy9;
yy39:
	yych = *++cur;
	if (yych == 'e') goto yy64;
	goto yy9;
yy40:
	yych = *++cur;
	if (yych == 'o') goto yy65;
	goto yy9;
yy41:
	yych = *++cur;
	if (yych == 'e') goto yy66;
	goto yy9;
yy42:
	yych = *++cur;
	if (yych == 'e') goto yy67;
	goto yy9;
yy43:
	yych = *++cur;
	if (yych == 'g') goto yy68;
	if (yych == 'n') goto yy69;
	goto yy9;
yy44:
	yych = *++cur;
	if (yych == 'o') goto yy70;
	goto yy9;
yy45:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy71;
		goto yy9;
	} else {
		if (yych <= 't') goto yy72;
		if (yych == 'v') goto yy73;
		goto yy9;
	}
yy46:
	yych = *++cur;
	if (yych == 'e') goto yy74;
	if (yych == 'u') goto yy75;
	goto yy9;
yy47:
	yych = *++cur;
	if (yych == 't') goto yy76;
	if (yych == 'v') goto yy77;
	goto yy9;
yy48:
	yych = *++cur;
	if (yych == 'y') goto yy78;
	goto yy9;
yy49:
	yych = *++cur;
	if (yych == 's') goto yy79;
	goto yy9;
yy50:
	yych = *++cur;
	if (yych == 'e') goto yy80;
	goto yy9;
yy51:
	yych = *++cur;
	if (yych == 'd') goto yy81;
	goto yy9;
yy52:
	yych = *++cur;
	if (yych == 's') goto yy82;
	goto yy9;
yy53:
	yych = *++cur;
	if (yych == 'd') goto yy83;
	goto yy9;
yy54:
	yych = *++cur;
	if (yych == 'o') goto yy84;
	goto yy9;
yy55:
	yych = *++cur;
	if (yych == 'l') goto yy85;
	goto yy9;
yy56:
	yych = *++cur;
	if (yych == 'a') goto yy86;
	goto yy9;
yy57:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == 'n') goto yy87;
yy58:
#line 178 "src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 453 "src/parse/lexer.cc"
yy59:
	yych = *++cur;
	if (yych == 'g') goto yy88;
	goto yy9;
yy60:
	yych = *++cur;
	if (yych == 'r') goto yy89;
	goto yy9;
yy61:
	yych = *++cur;
	if (yych == 'e') goto yy90;
	goto yy9;
yy62:
	yych = *++cur;
	if (yych == 'g') goto yy91;
	goto yy9;
yy63:
	yych = *++cur;
	if (yych == 'r') goto yy92;
	goto yy9;
yy64:
	++cur;
#line 172 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 482 "src/parse/lexer.cc"
yy65:
	yych = *++cur;
	if (yych == 'n') goto yy93;
	goto yy9;
yy66:
	yych = *++cur;
	if (yych == 't') goto yy94;
	goto yy9;
yy67:
	yych = *++cur;
	if (yych == 'a') goto yy95;
	goto yy9;
yy68:
	yych = *++cur;
	if (yych == 'n') goto yy96;
	goto yy9;
yy69:
	yych = *++cur;
	if (yych == 'c') goto yy97;
	goto yy9;
yy70:
	yych = *++cur;
	if (yych == 'c') goto yy98;
	goto yy9;
yy71:
	yych = *++cur;
	if (yych == 'x') goto yy99;
	goto yy9;
yy72:
	yych = *++cur;
	if (yych == 'a') goto yy100;
	goto yy9;
yy73:
	yych = *++cur;
	if (yych == 'a') goto yy101;
	goto yy9;
yy74:
	yych = *++cur;
	if (yych == '2') goto yy102;
	goto yy9;
yy75:
	yych = *++cur;
	if (yych == 'l') goto yy103;
	goto yy9;
yy76:
	yych = *++cur;
	if (yych == 'a') goto yy104;
	goto yy9;
yy77:
	yych = *++cur;
	if (yych == 'a') goto yy105;
	goto yy9;
yy78:
	yych = *++cur;
	if (yych == 'p') goto yy106;
	goto yy9;
yy79:
	yych = *++cur;
	if (yych == 'e') goto yy107;
	goto yy9;
yy80:
	yych = *++cur;
	if (yych <= '0') goto yy109;
	if (yych <= '9') goto yy9;
	goto yy109;
yy81:
	yych = *++cur;
	if (yych == 'i') goto yy110;
	goto yy9;
yy82:
	yych = *++cur;
	if (yych == 't') goto yy111;
	goto yy9;
yy83:
	yych = *++cur;
	if (yych == 'e') goto yy112;
	goto yy9;
yy84:
	yych = *++cur;
	if (yych == 'r') goto yy113;
	goto yy9;
yy85:
	yych = *++cur;
	if (yych == 'u') goto yy114;
	goto yy9;
yy86:
	yych = *++cur;
	if (yych == 'l') goto yy115;
	goto yy9;
yy87:
	yych = *++cur;
	if (yych == 'm') goto yy116;
	goto yy9;
yy88:
	yych = *++cur;
	if (yych == 's') goto yy117;
	goto yy9;
yy89:
	yych = *++cur;
	if (yych == 's') goto yy118;
	goto yy9;
yy90:
	yych = *++cur;
	if (yych == 's') goto yy119;
	goto yy9;
yy91:
	yych = *++cur;
	if (yych == 's') goto yy120;
	goto yy9;
yy92:
	yych = *++cur;
	if (yych == 's') goto yy121;
	goto yy9;
yy93:
	yych = *++cur;
	if (yych == 'd') goto yy122;
	goto yy9;
yy94:
	yych = *++cur;
	if (yych == 's') goto yy123;
	goto yy9;
yy95:
	yych = *++cur;
	if (yych == 'd') goto yy124;
	goto yy9;
yy96:
	yych = *++cur;
	if (yych == 'o') goto yy125;
	goto yy9;
yy97:
	yych = *++cur;
	if (yych == 'l') goto yy126;
	goto yy9;
yy98:
	yych = *++cur;
	if (yych == 'a') goto yy127;
	goto yy9;
yy99:
	yych = *++cur;
	if (yych == ':') goto yy128;
	if (yych == 'n') goto yy129;
	goto yy9;
yy100:
	yych = *++cur;
	if (yych == 'g') goto yy130;
	goto yy9;
yy101:
	yych = *++cur;
	if (yych == 'r') goto yy131;
	goto yy9;
yy102:
	yych = *++cur;
	if (yych == 'c') goto yy132;
	goto yy9;
yy103:
	yych = *++cur;
	if (yych == 'e') goto yy133;
	goto yy9;
yy104:
	yych = *++cur;
	if (yych == 'g') goto yy134;
	goto yy9;
yy105:
	yych = *++cur;
	if (yych == 'r') goto yy135;
	goto yy9;
yy106:
	yych = *++cur;
	if (yych == 'e') goto yy136;
	goto yy9;
yy107:
	yych = *++cur;
	if (yych == ':') goto yy137;
	goto yy9;
yy108:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy109:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy108;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy108;
		if (yych <= '0') goto yy9;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy138;
		}
		goto yy9;
	}
yy110:
	yych = *++cur;
	if (yych == 't') goto yy139;
	goto yy9;
yy111:
	yych = *++cur;
	if (yych == 'a') goto yy140;
	goto yy9;
yy112:
	yych = *++cur;
	if (yych == 'r') goto yy141;
	goto yy9;
yy113:
	yych = *++cur;
	if (yych == 'e') goto yy143;
	goto yy9;
yy114:
	yych = *++cur;
	if (yych == 'd') goto yy145;
	goto yy9;
yy115:
	++cur;
#line 160 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 702 "src/parse/lexer.cc"
yy116:
	yych = *++cur;
	if (yych == 'a') goto yy146;
	goto yy9;
yy117:
	++cur;
#line 194 "src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 715 "src/parse/lexer.cc"
yy118:
	++cur;
#line 206 "src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MVARS, allow));
        goto next;
    }
#line 724 "src/parse/lexer.cc"
yy119:
	++cur;
#line 166 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 733 "src/parse/lexer.cc"
yy120:
	++cur;
#line 188 "src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 742 "src/parse/lexer.cc"
yy121:
	++cur;
#line 200 "src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::SVARS, allow));
        goto next;
    }
#line 751 "src/parse/lexer.cc"
yy122:
	yych = *++cur;
	if (yych == 'i') goto yy147;
	goto yy9;
yy123:
	yych = *++cur;
	if (yych == 't') goto yy148;
	goto yy9;
yy124:
	yych = *++cur;
	if (yych == 'e') goto yy149;
	goto yy9;
yy125:
	yych = *++cur;
	if (yych == 'r') goto yy150;
	goto yy9;
yy126:
	yych = *++cur;
	if (yych == 'u') goto yy151;
	goto yy9;
yy127:
	yych = *++cur;
	if (yych == 'l') goto yy152;
	goto yy9;
yy128:
	yych = *++cur;
	if (yych == 'r') goto yy153;
	goto yy9;
yy129:
	yych = *++cur;
	if (yych == 'm') goto yy154;
	goto yy9;
yy130:
	yych = *++cur;
	if (yych == 's') goto yy155;
	goto yy9;
yy131:
	yych = *++cur;
	if (yych == 's') goto yy156;
	goto yy9;
yy132:
	++cur;
#line 154 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 800 "src/parse/lexer.cc"
yy133:
	yych = *++cur;
	if (yych == 's') goto yy157;
	goto yy9;
yy134:
	yych = *++cur;
	if (yych == 's') goto yy158;
	goto yy9;
yy135:
	yych = *++cur;
	if (yych == 's') goto yy159;
	goto yy9;
yy136:
	yych = *++cur;
	if (yych == 's') goto yy160;
	goto yy9;
yy137:
	yych = *++cur;
	if (yych == 'r') goto yy161;
	goto yy9;
yy138:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy138;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy9;
		if (yych <= '\t') goto yy162;
		if (yych <= '\n') goto yy163;
		goto yy9;
	} else {
		if (yych <= '\r') goto yy164;
		if (yych == ' ') goto yy162;
		goto yy9;
	}
yy139:
	yych = *++cur;
	if (yych == 'i') goto yy165;
	goto yy9;
yy140:
	yych = *++cur;
	if (yych == 't') goto yy166;
	goto yy9;
yy141:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy167;
yy142:
#line 248 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `header` block: expected `:on` or `:off`"));
    }
#line 853 "src/parse/lexer.cc"
yy143:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy168;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy168;
			}
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy168;
			}
			if (yych >= '%') {
				yyt1 = cur;
				goto yy169;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy170;
			}
		}
	}
yy144:
#line 269 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed `ignore` block: expected a space, a newline, or the end of block"));
    }
#line 892 "src/parse/lexer.cc"
yy145:
	yych = *++cur;
	if (yych == 'e') goto yy171;
	goto yy9;
yy146:
	yych = *++cur;
	if (yych == 't') goto yy173;
	goto yy9;
yy147:
	yych = *++cur;
	if (yych == 't') goto yy174;
	goto yy9;
yy148:
	yych = *++cur;
	if (yych == 'a') goto yy175;
	goto yy9;
yy149:
	yych = *++cur;
	if (yych == 'r') goto yy176;
	goto yy9;
yy150:
	yych = *++cur;
	if (yych == 'e') goto yy177;
	goto yy9;
yy151:
	yych = *++cur;
	if (yych == 'd') goto yy178;
	goto yy9;
yy152:
	yych = *++cur;
	if (yych == ':') goto yy179;
	goto yy9;
yy153:
	yych = *++cur;
	if (yych == 'e') goto yy180;
	goto yy9;
yy154:
	yych = *++cur;
	if (yych == 'a') goto yy181;
	goto yy9;
yy155:
	yych = *++cur;
	if (yych == ':') goto yy182;
	goto yy9;
yy156:
	yych = *++cur;
	if (yych == ':') goto yy183;
	goto yy9;
yy157:
	yych = *++cur;
	if (yych == ':') goto yy184;
	goto yy9;
yy158:
	yych = *++cur;
	if (yych == ':') goto yy185;
	goto yy9;
yy159:
	yych = *++cur;
	if (yych == ':') goto yy186;
	goto yy9;
yy160:
	yych = *++cur;
	if (yych == ':') goto yy187;
	goto yy9;
yy161:
	yych = *++cur;
	if (yych == 'e') goto yy188;
	goto yy9;
yy162:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy162;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy162;
		if (yych == '"') goto yy189;
		goto yy9;
	}
yy163:
	++cur;
	cur = yyt1;
#line 282 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 983 "src/parse/lexer.cc"
yy164:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	goto yy9;
yy165:
	yych = *++cur;
	if (yych == 'o') goto yy190;
	goto yy9;
yy166:
	yych = *++cur;
	if (yych == 'e') goto yy191;
	goto yy9;
yy167:
	yych = *++cur;
	if (yych == 'o') goto yy192;
	goto yy9;
yy168:
	++cur;
	cur = yyt1;
#line 263 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 1010 "src/parse/lexer.cc"
yy169:
	yych = *++cur;
	if (yych == '}') goto yy168;
	goto yy9;
yy170:
	yych = *++cur;
	if (yych == '/') goto yy168;
	goto yy9;
yy171:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy193;
	if (yych == ' ') goto yy193;
yy172:
#line 259 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `include` block: expected filename in quotes"));
    }
#line 1029 "src/parse/lexer.cc"
yy173:
	yych = *++cur;
	if (yych == 'c') goto yy194;
	goto yy9;
yy174:
	yych = *++cur;
	if (yych == 'i') goto yy195;
	goto yy9;
yy175:
	yych = *++cur;
	if (yych == 't') goto yy196;
	goto yy9;
yy176:
	yych = *++cur;
	if (yych == ':') goto yy197;
	goto yy9;
yy177:
	yych = *++cur;
	if (yych == ':') goto yy198;
	goto yy9;
yy178:
	yych = *++cur;
	if (yych == 'e') goto yy199;
	goto yy9;
yy179:
	yych = *++cur;
	if (yych == 'r') goto yy200;
	goto yy9;
yy180:
	yych = *++cur;
	if (yych == '2') goto yy201;
	goto yy9;
yy181:
	yych = *++cur;
	if (yych == 't') goto yy202;
	goto yy9;
yy182:
	yych = *++cur;
	if (yych == 'r') goto yy203;
	goto yy9;
yy183:
	yych = *++cur;
	if (yych == 'r') goto yy204;
	goto yy9;
yy184:
	yych = *++cur;
	if (yych == 'r') goto yy205;
	goto yy9;
yy185:
	yych = *++cur;
	if (yych == 'r') goto yy206;
	goto yy9;
yy186:
	yych = *++cur;
	if (yych == 'r') goto yy207;
	goto yy9;
yy187:
	yych = *++cur;
	if (yych == 'r') goto yy208;
	goto yy9;
yy188:
	yych = *++cur;
	if (yych == '2') goto yy209;
	goto yy9;
yy189:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy189;
	if (yych <= '\n') goto yy9;
	if (yych <= '"') goto yy210;
	goto yy211;
yy190:
	yych = *++cur;
	if (yych == 'n') goto yy212;
	goto yy9;
yy191:
	++cur;
#line 220 "src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1121 "src/parse/lexer.cc"
yy192:
	yych = *++cur;
	if (yych == 'f') goto yy213;
	if (yych == 'n') goto yy214;
	goto yy9;
yy193:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy193;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy193;
		if (yych == '"') {
			yyt1 = cur;
			goto yy215;
		}
		goto yy9;
	}
yy194:
	yych = *++cur;
	if (yych == 'h') goto yy216;
	goto yy9;
yy195:
	yych = *++cur;
	if (yych == 'o') goto yy217;
	goto yy9;
yy196:
	yych = *++cur;
	if (yych == 'e') goto yy218;
	goto yy9;
yy197:
	yych = *++cur;
	if (yych == 'r') goto yy219;
	goto yy9;
yy198:
	yych = *++cur;
	if (yych == 'r') goto yy220;
	goto yy9;
yy199:
	yych = *++cur;
	if (yych == ':') goto yy221;
	goto yy9;
yy200:
	yych = *++cur;
	if (yych == 'e') goto yy222;
	goto yy9;
yy201:
	yych = *++cur;
	if (yych == 'c') goto yy223;
	goto yy9;
yy202:
	yych = *++cur;
	if (yych == 'c') goto yy224;
	goto yy9;
yy203:
	yych = *++cur;
	if (yych == 'e') goto yy225;
	goto yy9;
yy204:
	yych = *++cur;
	if (yych == 'e') goto yy226;
	goto yy9;
yy205:
	yych = *++cur;
	if (yych == 'e') goto yy227;
	goto yy9;
yy206:
	yych = *++cur;
	if (yych == 'e') goto yy228;
	goto yy9;
yy207:
	yych = *++cur;
	if (yych == 'e') goto yy229;
	goto yy9;
yy208:
	yych = *++cur;
	if (yych == 'e') goto yy230;
	goto yy9;
yy209:
	yych = *++cur;
	if (yych == 'c') goto yy64;
	goto yy9;
yy210:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	if (yych == '\r') goto yy164;
	goto yy9;
yy211:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy189;
yy212:
	yych = *++cur;
	if (yych == 's') goto yy231;
	goto yy9;
yy213:
	yych = *++cur;
	if (yych == 'f') goto yy232;
	goto yy9;
yy214:
	++cur;
#line 233 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1236 "src/parse/lexer.cc"
yy215:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy9;
		if (yych == '\n') goto yy9;
		goto yy215;
	} else {
		if (yych <= '"') goto yy233;
		if (yych == '\\') goto yy234;
		goto yy215;
	}
yy216:
	++cur;
#line 183 "src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1257 "src/parse/lexer.cc"
yy217:
	yych = *++cur;
	if (yych == 'n') goto yy136;
	goto yy9;
yy218:
	yych = *++cur;
	if (yych == ':') goto yy235;
	goto yy9;
yy219:
	yych = *++cur;
	if (yych == 'e') goto yy236;
	goto yy9;
yy220:
	yych = *++cur;
	if (yych == 'e') goto yy237;
	goto yy9;
yy221:
	yych = *++cur;
	if (yych == 'r') goto yy238;
	goto yy9;
yy222:
	yych = *++cur;
	if (yych == '2') goto yy239;
	goto yy9;
yy223:
	++cur;
	goto yy58;
yy224:
	yych = *++cur;
	if (yych == 'h') goto yy240;
	goto yy9;
yy225:
	yych = *++cur;
	if (yych == '2') goto yy241;
	goto yy9;
yy226:
	yych = *++cur;
	if (yych == '2') goto yy242;
	goto yy9;
yy227:
	yych = *++cur;
	if (yych == '2') goto yy243;
	goto yy9;
yy228:
	yych = *++cur;
	if (yych == '2') goto yy244;
	goto yy9;
yy229:
	yych = *++cur;
	if (yych == '2') goto yy245;
	goto yy9;
yy230:
	yych = *++cur;
	if (yych == '2') goto yy246;
	goto yy9;
yy231:
	++cur;
#line 212 "src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 1323 "src/parse/lexer.cc"
yy232:
	++cur;
#line 241 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1334 "src/parse/lexer.cc"
yy233:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy9;
			yyt2 = cur;
			goto yy247;
		} else {
			if (yych == '\r') {
				yyt2 = cur;
				goto yy247;
			}
			goto yy9;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy247;
			}
			if (yych <= '$') goto yy9;
			yyt2 = cur;
			goto yy248;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy249;
			}
			goto yy9;
		}
	}
yy234:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy215;
yy235:
	yych = *++cur;
	if (yych == 'r') goto yy250;
	goto yy9;
yy236:
	yych = *++cur;
	if (yych == '2') goto yy251;
	goto yy9;
yy237:
	yych = *++cur;
	if (yych == '2') goto yy252;
	goto yy9;
yy238:
	yych = *++cur;
	if (yych == 'e') goto yy253;
	goto yy9;
yy239:
	yych = *++cur;
	if (yych == 'c') goto yy115;
	goto yy9;
yy240:
	yych = *++cur;
	if (yych == ':') goto yy254;
	goto yy9;
yy241:
	yych = *++cur;
	if (yych == 'c') goto yy117;
	goto yy9;
yy242:
	yych = *++cur;
	if (yych == 'c') goto yy118;
	goto yy9;
yy243:
	yych = *++cur;
	if (yych == 'c') goto yy119;
	goto yy9;
yy244:
	yych = *++cur;
	if (yych == 'c') goto yy120;
	goto yy9;
yy245:
	yych = *++cur;
	if (yych == 'c') goto yy121;
	goto yy9;
yy246:
	yych = *++cur;
	if (yych == 'c') goto yy231;
	goto yy9;
yy247:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 252 "src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1434 "src/parse/lexer.cc"
yy248:
	yych = *++cur;
	if (yych == '}') goto yy247;
	goto yy9;
yy249:
	yych = *++cur;
	if (yych == '/') goto yy247;
	goto yy9;
yy250:
	yych = *++cur;
	if (yych == 'e') goto yy255;
	goto yy9;
yy251:
	yych = *++cur;
	if (yych == 'c') goto yy141;
	goto yy9;
yy252:
	yych = *++cur;
	if (yych == 'c') goto yy143;
	goto yy9;
yy253:
	yych = *++cur;
	if (yych == '2') goto yy256;
	goto yy9;
yy254:
	yych = *++cur;
	if (yych == 'r') goto yy257;
	goto yy9;
yy255:
	yych = *++cur;
	if (yych == '2') goto yy258;
	goto yy9;
yy256:
	yych = *++cur;
	if (yych == 'c') goto yy171;
	goto yy9;
yy257:
	yych = *++cur;
	if (yych == 'e') goto yy259;
	goto yy9;
yy258:
	yych = *++cur;
	if (yych == 'c') goto yy191;
	goto yy9;
yy259:
	yych = *++cur;
	if (yych != '2') goto yy9;
	yych = *++cur;
	if (yych == 'c') goto yy216;
	goto yy9;
}
#line 295 "src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1495 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	mar = cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy261;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy262;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy262;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy262;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy263;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy265;
			}
			if (yych == ':') goto yy266;
		}
	}
yy261:
#line 303 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a block name, or the end of block"));
    }
#line 1573 "src/parse/lexer.cc"
yy262:
	++cur;
	cur = yyt1;
#line 309 "src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1579 "src/parse/lexer.cc"
yy263:
	yych = *++cur;
	if (yych == '}') goto yy262;
yy264:
	cur = mar;
	goto yy261;
yy265:
	yych = *++cur;
	if (yych == '/') goto yy262;
	goto yy264;
yy266:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy264;
		if (yych >= '[') goto yy264;
	} else {
		if (yych == '`') goto yy264;
		if (yych >= '{') goto yy264;
	}
yy267:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy267;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy264;
			yyt1 = cur;
		} else {
			if (yych != '\r') goto yy264;
			yyt1 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy268;
			}
			if (yych <= '$') goto yy264;
			yyt1 = cur;
			goto yy269;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy270;
			}
			goto yy264;
		}
	}
yy268:
	++cur;
	cur = yyt1;
#line 310 "src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1634 "src/parse/lexer.cc"
yy269:
	yych = *++cur;
	if (yych == '}') goto yy268;
	goto yy264;
yy270:
	yych = *++cur;
	if (yych == '/') goto yy268;
	goto yy264;
}
#line 311 "src/parse/lexer.re"

}

Ret Input::lex_name_list(BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1653 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	mar = cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy272;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy273;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy273;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy273;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy274;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy276;
			}
			if (yych == ':') goto yy277;
		}
	}
yy272:
#line 319 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a list of colon-separated block names, or the end of block"));
    }
#line 1731 "src/parse/lexer.cc"
yy273:
	++cur;
	cur = yyt1;
#line 325 "src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1737 "src/parse/lexer.cc"
yy274:
	yych = *++cur;
	if (yych == '}') goto yy273;
yy275:
	cur = mar;
	goto yy272;
yy276:
	yych = *++cur;
	if (yych == '/') goto yy273;
	goto yy275;
yy277:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy275;
		if (yych >= '[') goto yy275;
	} else {
		if (yych == '`') goto yy275;
		if (yych >= '{') goto yy275;
	}
yy278:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy278;
#line 327 "src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block `%s` on the list", p->name));
            }
        }

        goto loop;
    }
#line 1779 "src/parse/lexer.cc"
}
#line 343 "src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1788 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy282;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy280;
		if (yych <= '\n') goto yy283;
		if (yych >= '\r') goto yy284;
	} else {
		if (yych <= '%') {
			if (yych >= '%') goto yy285;
		} else {
			if (yych == '*') goto yy286;
		}
	}
yy280:
	++cur;
yy281:
#line 349 "src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional whitespaces followed by the end of block"));
    }
#line 1848 "src/parse/lexer.cc"
yy282:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy282;
#line 360 "src/parse/lexer.re"
	{ goto loop; }
#line 1856 "src/parse/lexer.cc"
yy283:
	++cur;
#line 361 "src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1861 "src/parse/lexer.cc"
yy284:
	yych = *++cur;
	if (yych == '\n') goto yy283;
	goto yy281;
yy285:
	yych = *++cur;
	if (yych == '}') goto yy287;
	goto yy281;
yy286:
	yych = *++cur;
	if (yych != '/') goto yy281;
yy287:
	++cur;
#line 354 "src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1882 "src/parse/lexer.cc"
}
#line 362 "src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(&blocks));

loop: 
#line 1896 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy291;
	if (yych <= '%') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy289;
			if (yych <= '\n') goto yy292;
		} else {
			if (yych <= '\r') goto yy293;
			if (yych >= '%') goto yy294;
		}
	} else {
		if (yych <= 'e') {
			if (yych == '*') goto yy295;
		} else {
			if (yych <= 'f') goto yy296;
			if (yych == 's') goto yy297;
		}
	}
yy289:
	++cur;
yy290:
#line 373 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional configurations followed by the end of block"));
    }
#line 1960 "src/parse/lexer.cc"
yy291:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy291;
#line 396 "src/parse/lexer.re"
	{ goto loop; }
#line 1968 "src/parse/lexer.cc"
yy292:
	++cur;
#line 398 "src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1973 "src/parse/lexer.cc"
yy293:
	yych = *++cur;
	if (yych == '\n') goto yy292;
	goto yy290;
yy294:
	yych = *++cur;
	if (yych == '}') goto yy298;
	goto yy290;
yy295:
	yych = *++cur;
	if (yych == '/') goto yy298;
	goto yy290;
yy296:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy299;
	goto yy290;
yy297:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy301;
	goto yy290;
yy298:
	++cur;
#line 400 "src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 2003 "src/parse/lexer.cc"
yy299:
	yych = *++cur;
	if (yych == 'r') goto yy302;
yy300:
	cur = mar;
	goto yy290;
yy301:
	yych = *++cur;
	if (yych == 'p') goto yy303;
	goto yy300;
yy302:
	yych = *++cur;
	if (yych == 'm') goto yy304;
	goto yy300;
yy303:
	yych = *++cur;
	if (yych == 'a') goto yy305;
	goto yy300;
yy304:
	yych = *++cur;
	if (yych == 'a') goto yy306;
	goto yy300;
yy305:
	yych = *++cur;
	if (yych == 'r') goto yy307;
	goto yy300;
yy306:
	yych = *++cur;
	if (yych == 't') goto yy308;
	goto yy300;
yy307:
	yych = *++cur;
	if (yych == 'a') goto yy309;
	goto yy300;
yy308:
	++cur;
#line 378 "src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 2049 "src/parse/lexer.cc"
yy309:
	yych = *++cur;
	if (yych != 't') goto yy300;
	yych = *++cur;
	if (yych != 'o') goto yy300;
	yych = *++cur;
	if (yych != 'r') goto yy300;
	++cur;
#line 387 "src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 2067 "src/parse/lexer.cc"
}
#line 406 "src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(RE2C_STYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 2081 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 144,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		144, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		224, 224, 224, 224, 224, 224, 224, 224,
		224, 224, 128, 128, 128, 128, 128, 128,
		128, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 128,   0, 128, 128, 160,
		128, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 160, 160, 160, 160, 160,
		160, 160, 160, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 12) if (!fill(12)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) goto yy313;
	if (yych <= '/') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy311;
				if (yych <= '\n') goto yy314;
				if (yych >= '\r') goto yy316;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy317;
				} else {
					if (yych <= '"') goto yy319;
					if (yych <= '#') goto yy320;
					goto yy321;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '&') {
					if (yych <= '%') goto yy322;
				} else {
					if (yych <= '\'') goto yy323;
					if (yych <= '(') goto yy324;
					goto yy321;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy325;
					goto yy321;
				} else {
					if (yych <= '-') goto yy311;
					if (yych <= '.') goto yy326;
					goto yy327;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') {
					if (yych <= '9') goto yy328;
					goto yy329;
				} else {
					if (yych <= ';') goto yy321;
					if (yych <= '<') goto yy330;
					goto yy331;
				}
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy321;
				} else {
					if (yych <= '@') goto yy320;
					if (yych <= 'Z') goto yy332;
					goto yy334;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy321;
				} else {
					if (yych != '`') goto yy332;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy335;
					goto yy332;
				} else {
					if (yych <= '{') goto yy336;
					if (yych <= '|') goto yy321;
				}
			}
		}
	}
yy311:
	++cur;
yy312:
#line 564 "src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 2212 "src/parse/lexer.cc"
yy313:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) goto yy313;
#line 551 "src/parse/lexer.re"
	{ goto scan; }
#line 2220 "src/parse/lexer.cc"
yy314:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy338;
	} else {
		if (yych <= ' ') goto yy338;
		if (yych == '#') goto yy340;
	}
yy315:
#line 555 "src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 2240 "src/parse/lexer.cc"
yy316:
	yych = *++cur;
	if (yych == '\n') goto yy314;
	goto yy312;
yy317:
	yych = *++cur;
	if (yych <= 'e') {
		if (yych <= '^') {
			if (yych <= '@') goto yy318;
			if (yych <= 'Z') goto yy341;
		} else {
			if (yych == '`') goto yy318;
			if (yych <= 'd') goto yy341;
			goto yy344;
		}
	} else {
		if (yych <= 'p') {
			if (yych == 'i') goto yy345;
			if (yych <= 'o') goto yy341;
			goto yy346;
		} else {
			if (yych == 'u') goto yy347;
			if (yych <= 'z') goto yy341;
		}
	}
yy318:
#line 443 "src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 2269 "src/parse/lexer.cc"
yy319:
	++cur;
#line 434 "src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2274 "src/parse/lexer.cc"
yy320:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy312;
		if (yych <= 'Z') goto yy348;
		goto yy312;
	} else {
		if (yych == '`') goto yy312;
		if (yych <= 'z') goto yy348;
		goto yy312;
	}
yy321:
	++cur;
	goto yy318;
yy322:
	yych = *++cur;
	if (yych == '}') goto yy350;
	goto yy312;
yy323:
	++cur;
#line 433 "src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2297 "src/parse/lexer.cc"
yy324:
	yych = *++cur;
	if (yych == '!') goto yy351;
	goto yy318;
yy325:
	yych = *++cur;
	if (yych == '/') goto yy350;
	goto yy318;
yy326:
	++cur;
#line 549 "src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 2310 "src/parse/lexer.cc"
yy327:
	yych = *++cur;
	if (yych == '*') goto yy352;
	if (yych == '/') goto yy353;
	goto yy318;
yy328:
	++cur;
#line 510 "src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
        }
        ast.temp_chars.push_back({*tok, tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2327 "src/parse/lexer.cc"
yy329:
	yych = *++cur;
	if (yych == '=') goto yy354;
	goto yy312;
yy330:
	++cur;
#line 426 "src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 2336 "src/parse/lexer.cc"
yy331:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy356;
	goto yy318;
yy332:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy333:
	if (yybm[0+yych] & 32) goto yy332;
#line 489 "src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2369 "src/parse/lexer.cc"
yy334:
	yych = *++cur;
	if (yych == '^') goto yy357;
#line 435 "src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2375 "src/parse/lexer.cc"
yy335:
	yych = *++cur;
	if (yych == 'e') goto yy358;
	goto yy333;
yy336:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) goto yy361;
	if (yych <= 'Z') {
		if (yych == ',') goto yy359;
		if (yych >= 'A') goto yy362;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy362;
		} else {
			if (yych <= '`') goto yy337;
			if (yych <= 'z') goto yy362;
		}
	}
yy337:
#line 418 "src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 2398 "src/parse/lexer.cc"
yy338:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy338;
	} else {
		if (yych <= ' ') goto yy338;
		if (yych == '#') goto yy340;
	}
yy339:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) goto yy315;
			else goto yy318;
		} else {
			if (yyaccept == 2) goto yy337;
			else goto yy355;
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) goto yy360;
			else goto yy381;
		} else {
			if (yyaccept == 6) goto yy343;
			else goto yy411;
		}
	}
yy340:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy340;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy340;
		if (yych == 'l') goto yy363;
		goto yy339;
	}
yy341:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy342:
	if (yych <= 'Z') {
		if (yych <= '/') goto yy343;
		if (yych <= '9') goto yy341;
		if (yych >= 'A') goto yy341;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy341;
		} else {
			if (yych <= '`') goto yy343;
			if (yych <= 'z') goto yy341;
		}
	}
yy343:
#line 547 "src/parse/lexer.re"
	{ RET_FAIL(error_at_tok("unknown action or directive '%.*s'", int(cur - tok), tok)); }
#line 2460 "src/parse/lexer.cc"
yy344:
	yych = *++cur;
	if (yych == 'n') goto yy364;
	goto yy342;
yy345:
	yych = *++cur;
	if (yych == 'n') goto yy365;
	goto yy342;
yy346:
	yych = *++cur;
	if (yych == 'o') goto yy366;
	if (yych == 'r') goto yy367;
	goto yy342;
yy347:
	yych = *++cur;
	if (yych == 's') goto yy368;
	goto yy342;
yy348:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy349;
		if (yych <= '9') goto yy348;
		if (yych >= 'A') goto yy348;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy348;
		} else {
			if (yych <= '`') goto yy349;
			if (yych <= 'z') goto yy348;
		}
	}
yy349:
#line 438 "src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2500 "src/parse/lexer.cc"
yy350:
	++cur;
#line 431 "src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2505 "src/parse/lexer.cc"
yy351:
	++cur;
#line 445 "src/parse/lexer.re"
	{ RET_TOK(TOKEN_LPAREN_NEG); }
#line 2510 "src/parse/lexer.cc"
yy352:
	++cur;
#line 429 "src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2515 "src/parse/lexer.cc"
yy353:
	++cur;
#line 428 "src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2520 "src/parse/lexer.cc"
yy354:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy356;
yy355:
#line 419 "src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2528 "src/parse/lexer.cc"
yy356:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy339;
			goto yy356;
		} else {
			if (yych == ' ') goto yy356;
			goto yy339;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy369;
			}
			if (yych <= '^') goto yy339;
			yyt1 = cur;
			goto yy369;
		} else {
			if (yych <= '`') goto yy339;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy369;
			}
			goto yy339;
		}
	}
yy357:
	++cur;
#line 436 "src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2563 "src/parse/lexer.cc"
yy358:
	yych = *++cur;
	if (yych == '2') goto yy371;
	goto yy333;
yy359:
	++cur;
yy360:
#line 474 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2576 "src/parse/lexer.cc"
yy361:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy361;
	if (yych == ',') {
		yyt1 = cur;
		goto yy372;
	}
	if (yych == '}') goto yy373;
	goto yy339;
yy362:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy339;
			goto yy362;
		} else {
			if (yych <= '@') goto yy339;
			if (yych <= 'Z') goto yy362;
			goto yy339;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy339;
			goto yy362;
		} else {
			if (yych == '}') goto yy374;
			goto yy339;
		}
	}
yy363:
	yych = *++cur;
	if (yych == 'i') goto yy375;
	goto yy339;
yy364:
	yych = *++cur;
	if (yych == 't') goto yy376;
	goto yy342;
yy365:
	yych = *++cur;
	if (yych == 'c') goto yy377;
	goto yy342;
yy366:
	yych = *++cur;
	if (yych == 's') goto yy378;
	goto yy342;
yy367:
	yych = *++cur;
	if (yych == 'e') goto yy379;
	goto yy342;
yy368:
	yych = *++cur;
	if (yych == 'e') goto yy380;
	goto yy342;
yy369:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy370;
		if (yych <= '9') goto yy369;
		if (yych >= 'A') goto yy369;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy369;
		} else {
			if (yych <= '`') goto yy370;
			if (yych <= 'z') goto yy369;
		}
	}
yy370:
	p = yyt1;
#line 421 "src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2657 "src/parse/lexer.cc"
yy371:
	yych = *++cur;
	if (yych == 'c') goto yy382;
	goto yy333;
yy372:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy360;
	if (yych <= '9') goto yy383;
	if (yych == '}') goto yy384;
	goto yy360;
yy373:
	++cur;
#line 447 "src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2679 "src/parse/lexer.cc"
yy374:
	++cur;
#line 479 "src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2690 "src/parse/lexer.cc"
yy375:
	yych = *++cur;
	if (yych == 'n') goto yy385;
	goto yy339;
yy376:
	yych = *++cur;
	if (yych == 'r') goto yy386;
	goto yy342;
yy377:
	yych = *++cur;
	if (yych == 'l') goto yy387;
	goto yy342;
yy378:
	yych = *++cur;
	if (yych == 't') goto yy388;
	goto yy342;
yy379:
	yych = *++cur;
	if (yych == '_') goto yy389;
	goto yy342;
yy380:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych <= 'Z') {
		if (yych <= '9') {
			if (yych >= '0') goto yy341;
		} else {
			if (yych <= ':') goto yy390;
			if (yych >= 'A') goto yy341;
		}
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy341;
		} else {
			if (yych <= '`') goto yy381;
			if (yych <= 'z') goto yy341;
		}
	}
yy381:
#line 536 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2737 "src/parse/lexer.cc"
yy382:
	yych = *++cur;
	if (yych == ':') goto yy391;
	goto yy333;
yy383:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy339;
	if (yych <= '9') goto yy383;
	if (yych == '}') goto yy392;
	goto yy339;
yy384:
	++cur;
#line 466 "src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2760 "src/parse/lexer.cc"
yy385:
	yych = *++cur;
	if (yych == 'e') goto yy393;
	goto yy339;
yy386:
	yych = *++cur;
	if (yych == 'y') goto yy394;
	goto yy342;
yy387:
	yych = *++cur;
	if (yych == 'u') goto yy395;
	goto yy342;
yy388:
	yych = *++cur;
	if (yych == '_') goto yy396;
	goto yy342;
yy389:
	yych = *++cur;
	if (yych == 'r') goto yy397;
	goto yy342;
yy390:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy339;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy398;
		}
		goto yy339;
	} else {
		if (yych == '`') goto yy339;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy398;
		}
		goto yy339;
	}
yy391:
	++cur;
#line 487 "src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2802 "src/parse/lexer.cc"
yy392:
	++cur;
	p = yyt1;
#line 455 "src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2817 "src/parse/lexer.cc"
yy393:
	yych = *++cur;
	if (yych <= '0') goto yy400;
	if (yych <= '9') goto yy339;
	goto yy400;
yy394:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy342;
			yyt1 = cur;
			goto yy401;
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy401;
			}
			goto yy342;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy401;
			}
			if (yych <= '$') goto yy342;
			yyt1 = cur;
			goto yy402;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy403;
			}
			goto yy342;
		}
	}
yy395:
	yych = *++cur;
	if (yych == 'd') goto yy404;
	goto yy342;
yy396:
	yych = *++cur;
	if (yych == 'r') goto yy405;
	goto yy342;
yy397:
	yych = *++cur;
	if (yych == 'u') goto yy406;
	goto yy342;
yy398:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy407;
			}
			goto yy339;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy407;
			}
			if (yych <= '/') goto yy339;
			if (yych <= '9') goto yy398;
			goto yy339;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy408;
			}
			if (yych <= '@') goto yy339;
			if (yych <= 'Z') goto yy398;
			goto yy339;
		} else {
			if (yych == '`') goto yy339;
			if (yych <= 'z') goto yy398;
			goto yy339;
		}
	}
yy399:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy400:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy399;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy399;
		if (yych <= '0') goto yy339;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy409;
		}
		goto yy339;
	}
yy401:
	++cur;
	cur = yyt1;
#line 543 "src/parse/lexer.re"
	{ RET_TOK(TOKEN_ENTRY); }
#line 2924 "src/parse/lexer.cc"
yy402:
	yych = *++cur;
	if (yych == '}') goto yy401;
	goto yy339;
yy403:
	yych = *++cur;
	if (yych == '/') goto yy401;
	goto yy339;
yy404:
	yych = *++cur;
	if (yych == 'e') goto yy410;
	goto yy342;
yy405:
	yych = *++cur;
	if (yych == 'u') goto yy412;
	goto yy342;
yy406:
	yych = *++cur;
	if (yych == 'l') goto yy413;
	goto yy342;
yy407:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy407;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy407;
		if (yych != ';') goto yy339;
	}
yy408:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy339;
			yyt3 = cur;
			goto yy414;
		} else {
			if (yych == '\r') {
				yyt3 = cur;
				goto yy414;
			}
			goto yy339;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy414;
			}
			if (yych <= '$') goto yy339;
			yyt3 = cur;
			goto yy415;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy416;
			}
			goto yy339;
		}
	}
yy409:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy339;
			goto yy417;
		} else {
			if (yych <= '\n') goto yy418;
			if (yych <= '\f') goto yy339;
			goto yy419;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy339;
			goto yy417;
		} else {
			if (yych <= '/') goto yy339;
			if (yych <= '9') goto yy409;
			goto yy339;
		}
	}
yy410:
	yyaccept = 7;
	yych = *(mar = ++cur);
	if (yych <= '9') {
		if (yych <= 0x1F) {
			if (yych == '\t') goto yy420;
		} else {
			if (yych <= ' ') goto yy420;
			if (yych >= '0') goto yy341;
		}
	} else {
		if (yych <= '^') {
			if (yych <= '@') goto yy411;
			if (yych <= 'Z') goto yy341;
		} else {
			if (yych == '`') goto yy411;
			if (yych <= 'z') goto yy341;
		}
	}
yy411:
#line 523 "src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 3037 "src/parse/lexer.cc"
yy412:
	yych = *++cur;
	if (yych == 'l') goto yy421;
	goto yy342;
yy413:
	yych = *++cur;
	if (yych == 'e') goto yy422;
	goto yy342;
yy414:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 530 "src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 3058 "src/parse/lexer.cc"
yy415:
	yych = *++cur;
	if (yych == '}') goto yy414;
	goto yy339;
yy416:
	yych = *++cur;
	if (yych == '/') goto yy414;
	goto yy339;
yy417:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy417;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy417;
		if (yych == '"') goto yy423;
		goto yy339;
	}
yy418:
	++cur;
	cur = yyt1;
#line 553 "src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 3084 "src/parse/lexer.cc"
yy419:
	yych = *++cur;
	if (yych == '\n') goto yy418;
	goto yy339;
yy420:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy420;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy420;
		if (yych == '"') {
			yyt1 = cur;
			goto yy424;
		}
		goto yy339;
	}
yy421:
	yych = *++cur;
	if (yych == 'e') goto yy425;
	goto yy342;
yy422:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy342;
			yyt1 = cur;
			goto yy426;
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy426;
			}
			goto yy342;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy426;
			}
			if (yych <= '$') goto yy342;
			yyt1 = cur;
			goto yy427;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy428;
			}
			goto yy342;
		}
	}
yy423:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy423;
	if (yych <= '\n') goto yy339;
	if (yych <= '"') goto yy429;
	goto yy430;
yy424:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy339;
		if (yych == '\n') goto yy339;
		goto yy424;
	} else {
		if (yych <= '"') goto yy431;
		if (yych == '\\') goto yy432;
		goto yy424;
	}
yy425:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy342;
			yyt1 = cur;
			goto yy433;
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy433;
			}
			goto yy342;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy433;
			}
			if (yych <= '$') goto yy342;
			yyt1 = cur;
			goto yy434;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy435;
			}
			goto yy342;
		}
	}
yy426:
	++cur;
	cur = yyt1;
#line 544 "src/parse/lexer.re"
	{ RET_TOK(TOKEN_PRE_RULE); }
#line 3198 "src/parse/lexer.cc"
yy427:
	yych = *++cur;
	if (yych == '}') goto yy426;
	goto yy339;
yy428:
	yych = *++cur;
	if (yych == '/') goto yy426;
	goto yy339;
yy429:
	yych = *++cur;
	if (yych == '\n') goto yy418;
	if (yych == '\r') goto yy419;
	goto yy339;
yy430:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy339;
	if (yych == '\n') goto yy339;
	goto yy423;
yy431:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy436;
		}
		goto yy339;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy436;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy437;
		}
		goto yy339;
	}
yy432:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy339;
	if (yych == '\n') goto yy339;
	goto yy424;
yy433:
	++cur;
	cur = yyt1;
#line 545 "src/parse/lexer.re"
	{ RET_TOK(TOKEN_POST_RULE); }
#line 3250 "src/parse/lexer.cc"
yy434:
	yych = *++cur;
	if (yych == '}') goto yy433;
	goto yy339;
yy435:
	yych = *++cur;
	if (yych == '/') goto yy433;
	goto yy339;
yy436:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy436;
		goto yy339;
	} else {
		if (yych <= ' ') goto yy436;
		if (yych != ';') goto yy339;
	}
yy437:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy339;
			yyt3 = cur;
		} else {
			if (yych != '\r') goto yy339;
			yyt3 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy438;
			}
			if (yych <= '$') goto yy339;
			yyt3 = cur;
			goto yy439;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy440;
			}
			goto yy339;
		}
	}
yy438:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 519 "src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 3307 "src/parse/lexer.cc"
yy439:
	yych = *++cur;
	if (yych == '}') goto yy438;
	goto yy339;
yy440:
	yych = *++cur;
	if (yych == '/') goto yy438;
	goto yy339;
}
#line 577 "src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 3325 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	mar = cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy443;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy443;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy445;
		}
	}
yy442:
#line 585 "src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3383 "src/parse/lexer.cc"
yy443:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy443;
	if (yych == '=') goto yy445;
yy444:
	cur = mar;
	goto yy442;
yy445:
	yych = *++cur;
	if (yych == '>') goto yy444;
	++cur;
	cur = yyt1;
#line 584 "src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3400 "src/parse/lexer.cc"
}
#line 586 "src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 3408 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy447;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy447;
	}
#line 593 "src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3457 "src/parse/lexer.cc"
yy447:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy447;
	if (yych <= '<') {
		if (yych == ':') goto yy448;
	} else {
		if (yych <= '=') goto yy448;
		if (yych == '{') goto yy448;
	}
	cur = yyt1;
#line 592 "src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3472 "src/parse/lexer.cc"
yy448:
	++cur;
	cur = yyt1;
#line 591 "src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3478 "src/parse/lexer.cc"
}
#line 594 "src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 3490 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	goto yy449;
yy450:
	++cur;
yy449:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy450;
	if (yych <= 0x1F) goto yy451;
	if (yych <= '!') goto yy452;
	if (yych == '>') goto yy453;
yy451:
#line 605 "src/parse/lexer.re"
	{ goto cond; }
#line 3540 "src/parse/lexer.cc"
yy452:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy452;
	if (yych == ' ') goto yy452;
#line 603 "src/parse/lexer.re"
	{ token = TOKEN_CPRE_RULE; goto cond; }
#line 3549 "src/parse/lexer.cc"
yy453:
	++cur;
#line 604 "src/parse/lexer.re"
	{ token = TOKEN_CZERO; goto end; }
#line 3554 "src/parse/lexer.cc"
}
#line 606 "src/parse/lexer.re"

cond:
    tok = cur;

#line 3561 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0, 128,
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy456;
		if (yych >= 'A') goto yy457;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy457;
		} else {
			if (yych <= '`') goto yy455;
			if (yych <= 'z') goto yy457;
		}
	}
yy455:
	++cur;
#line 612 "src/parse/lexer.re"
	{ goto error; }
#line 3615 "src/parse/lexer.cc"
yy456:
	++cur;
#line 611 "src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 3620 "src/parse/lexer.cc"
yy457:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy457;
#line 610 "src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 3628 "src/parse/lexer.cc"
}
#line 613 "src/parse/lexer.re"

next: 
#line 3633 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		128,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy460;
		if (yych >= ' ') goto yy460;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy461;
		} else {
			if (yych == '>') goto yy462;
		}
	}
	++cur;
yy459:
#line 617 "src/parse/lexer.re"
	{ goto error; }
#line 3686 "src/parse/lexer.cc"
yy460:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy463;
		if (yych <= 0x1F) goto yy459;
		goto yy463;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy459;
		} else {
			if (yych == '>') goto yy462;
			goto yy459;
		}
	}
yy461:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy461;
#line 615 "src/parse/lexer.re"
	{ goto cond; }
#line 3708 "src/parse/lexer.cc"
yy462:
	++cur;
#line 616 "src/parse/lexer.re"
	{ goto end; }
#line 3713 "src/parse/lexer.cc"
yy463:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy463;
		if (yych >= ' ') goto yy463;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy461;
		} else {
			if (yych == '>') goto yy462;
		}
	}
	cur = mar;
	goto yy459;
}
#line 618 "src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::process_semact(RE2C_STYPE* yylval, Ast& ast, const uint8_t* p, const uint8_t* q) {
    const char* text = "";
    if (globopts->indentation_sensitive) {
        // Cut off any leading or trailing newlines to make the code uniform.
        while (p <= q && *p == '\n') ++p;
        while (p <= q && *q == '\n') --q;

        if (p <= q) {
            // Split semantic action by newlines (note: last character `*q` is not a newline).
            // Drop blank lines (this simplifies the code below that removes indentation).
            auto is_blank = [](const uint8_t* s, const uint8_t* e) {
                while (s < e && is_space(*s)) ++s;
                return s == e;
            };
            tmp_list.clear();
            for (const uint8_t* s = p; s < q; ++s) {
                if (*s == '\n') {
                    if (!is_blank(p, s)) tmp_list.push_back(std::string(p, s + 1));
                    p = s + 1;
                }
            }
            if (!is_blank(p, q + 1)) tmp_list.push_back(std::string(p, q + 1) + "\n");

            if (!tmp_list.empty()) {
                // Find first line indentation and use it as base indentation.
                const std::string& first = tmp_list[0];
                uint32_t indent = 0;
                while (is_space_nonl(static_cast<uint8_t>(first[indent]))) ++indent;
                std::string indstr = first.substr(0, indent);

                // Cut off base indentation from every line and glue them together.
                tmp_str.clear();
                for (std::string& line: tmp_list) {
                    if (line.compare(0, indent, indstr) == 0) {
                        tmp_str += line.substr(indent, std::string::npos); // remove indent
                    } else {
                        RET_FAIL(error_at_tok("inconsistent indentation in semantic action"));
                    }
                }
                text = copystr(tmp_str, alc);
            }
        }
    } else {
        // copy the entire semantic action verbatim
        text = ast.cstr_global(p, q + 1);
    }

    yylval->semact = ast.sem_act(tok_loc(), text, nullptr, false);
    return Ret::OK;
}

Ret Input::lex_code_indented(RE2C_STYPE* yylval, Ast& ast) {
    tok = cur;
code: 
#line 3795 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy466;
			if (yych >= '\r') goto yy467;
		} else {
			if (yych == '"') goto yy468;
			if (yych >= '\'') goto yy468;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy469;
			if (yych >= '`') goto yy468;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy470;
			} else {
				if (yych == '}') goto yy470;
			}
		}
	}
	++cur;
yy465:
#line 686 "src/parse/lexer.re"
	{ goto code; }
#line 3824 "src/parse/lexer.cc"
yy466:
	++cur;
#line 681 "src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3829 "src/parse/lexer.cc"
yy467:
	yych = *++cur;
	if (yych == '\n') goto yy466;
	goto yy465;
yy468:
	++cur;
#line 684 "src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3838 "src/parse/lexer.cc"
yy469:
	yych = *++cur;
	if (yych == '*') goto yy471;
	if (yych == '/') goto yy472;
	goto yy465;
yy470:
	++cur;
#line 685 "src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3848 "src/parse/lexer.cc"
yy471:
	++cur;
#line 683 "src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3853 "src/parse/lexer.cc"
yy472:
	++cur;
#line 682 "src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3858 "src/parse/lexer.cc"
}
#line 687 "src/parse/lexer.re"

indent: 
#line 3863 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy474;
		if (yych <= '\n') goto yy475;
	} else {
		if (yych <= '\r') goto yy475;
		if (yych == ' ') goto yy475;
	}
yy474:
#line 690 "src/parse/lexer.re"
	{
        const uint8_t* p = tok, *q = cur - 1;
        if (!globopts->indentation_sensitive) {
            while (p <= q && is_space(*p)) ++p;
            while (p <= q && is_space(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3885 "src/parse/lexer.cc"
yy475:
	++cur;
	cur -= 1;
#line 689 "src/parse/lexer.re"
	{ goto code; }
#line 3891 "src/parse/lexer.cc"
}
#line 698 "src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(RE2C_STYPE* yylval, Ast& ast) {
    uint32_t depth = 1;
code: 
#line 3900 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 160,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		160, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy478;
			if (yych >= '\r') goto yy480;
		} else {
			if (yych == '"') goto yy481;
			if (yych >= '\'') goto yy481;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy482;
			if (yych >= '`') goto yy481;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy483;
			} else {
				if (yych == '}') goto yy484;
			}
		}
	}
	++cur;
yy477:
#line 725 "src/parse/lexer.re"
	{ goto code; }
#line 3963 "src/parse/lexer.cc"
yy478:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) goto yy485;
	if (yych == '#') goto yy487;
yy479:
#line 721 "src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3971 "src/parse/lexer.cc"
yy480:
	yych = *++cur;
	if (yych == '\n') goto yy478;
	goto yy477;
yy481:
	++cur;
#line 724 "src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3980 "src/parse/lexer.cc"
yy482:
	yych = *++cur;
	if (yych == '*') goto yy488;
	if (yych == '/') goto yy489;
	goto yy477;
yy483:
	++cur;
#line 719 "src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3990 "src/parse/lexer.cc"
yy484:
	++cur;
#line 704 "src/parse/lexer.re"
	{
        --depth;
        if (depth > 0) goto code;

        const uint8_t* p = tok, *q = cur - 1;
        if (globopts->code_model == CodeModel::REC_FUNC || !globopts->wrap_blocks_in_braces) {
            // Strip curly braces and adjacent whitespace. In rec/func mode it is always safe
            // to do, as the code is in a separate function and won't cause name collisions.
            ++p; --q; // skip '{' and '}'
            while (p <= q && is_space_nonl(*p)) ++p;
            while (p <= q && is_space_nonl(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 4008 "src/parse/lexer.cc"
yy485:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) goto yy485;
	if (yych == '#') goto yy487;
yy486:
	cur = mar;
	goto yy479;
yy487:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy487;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy487;
		if (yych == 'l') goto yy490;
		goto yy486;
	}
yy488:
	++cur;
#line 722 "src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 4034 "src/parse/lexer.cc"
yy489:
	++cur;
#line 723 "src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 4039 "src/parse/lexer.cc"
yy490:
	yych = *++cur;
	if (yych != 'i') goto yy486;
	yych = *++cur;
	if (yych != 'n') goto yy486;
	yych = *++cur;
	if (yych != 'e') goto yy486;
	yych = *++cur;
	if (yych <= '0') goto yy492;
	if (yych <= '9') goto yy486;
	goto yy492;
yy491:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy492:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy491;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy491;
		if (yych <= '0') goto yy486;
		if (yych >= ':') goto yy486;
		yyt1 = cur;
	}
yy493:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy493;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy486;
		if (yych <= '\t') goto yy494;
		if (yych <= '\n') goto yy495;
		goto yy486;
	} else {
		if (yych <= '\r') goto yy496;
		if (yych != ' ') goto yy486;
	}
yy494:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy494;
		goto yy486;
	} else {
		if (yych <= ' ') goto yy494;
		if (yych == '"') goto yy497;
		goto yy486;
	}
yy495:
	++cur;
	cur = yyt1;
#line 720 "src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 4096 "src/parse/lexer.cc"
yy496:
	yych = *++cur;
	if (yych == '\n') goto yy495;
	goto yy486;
yy497:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) goto yy497;
	if (yych <= '\n') goto yy486;
	if (yych >= '#') goto yy498;
	yych = *++cur;
	if (yych == '\n') goto yy495;
	if (yych == '\r') goto yy496;
	goto yy486;
yy498:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy486;
	if (yych == '\n') goto yy486;
	goto yy497;
}
#line 726 "src/parse/lexer.re"

}

Ret Input::lex_dqstring_in_code() {
loop: 
#line 4126 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy501;
		if (yych >= '\r') goto yy502;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy503;
		} else {
			if (yych == '\\') goto yy504;
		}
	}
	++cur;
yy500:
#line 734 "src/parse/lexer.re"
	{ goto loop; }
#line 4145 "src/parse/lexer.cc"
yy501:
	++cur;
#line 733 "src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4150 "src/parse/lexer.cc"
yy502:
	yych = *++cur;
	if (yych == '\n') goto yy501;
	goto yy500;
yy503:
	++cur;
#line 731 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4159 "src/parse/lexer.cc"
yy504:
	yych = *++cur;
	if (yych == '"') goto yy505;
	if (yych != '\\') goto yy500;
yy505:
	++cur;
#line 732 "src/parse/lexer.re"
	{ goto loop; }
#line 4168 "src/parse/lexer.cc"
}
#line 735 "src/parse/lexer.re"

}

Ret Input::lex_sqstring_in_code() {
loop: 
#line 4176 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy508;
		if (yych >= '\r') goto yy509;
	} else {
		if (yych <= '\'') {
			if (yych >= '\'') goto yy510;
		} else {
			if (yych == '\\') goto yy511;
		}
	}
	++cur;
yy507:
#line 743 "src/parse/lexer.re"
	{ goto loop; }
#line 4195 "src/parse/lexer.cc"
yy508:
	++cur;
#line 742 "src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4200 "src/parse/lexer.cc"
yy509:
	yych = *++cur;
	if (yych == '\n') goto yy508;
	goto yy507;
yy510:
	++cur;
#line 740 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4209 "src/parse/lexer.cc"
yy511:
	yych = *++cur;
	if (yych == '\'') goto yy512;
	if (yych != '\\') goto yy507;
yy512:
	++cur;
#line 741 "src/parse/lexer.re"
	{ goto loop; }
#line 4218 "src/parse/lexer.cc"
}
#line 744 "src/parse/lexer.re"

}

Ret Input::lex_bqstring_in_code() {
loop: 
#line 4226 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy515;
	} else {
		if (yych <= '\r') goto yy516;
		if (yych == '`') goto yy517;
	}
	++cur;
yy514:
#line 751 "src/parse/lexer.re"
	{ goto loop; }
#line 4241 "src/parse/lexer.cc"
yy515:
	++cur;
#line 750 "src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4246 "src/parse/lexer.cc"
yy516:
	yych = *++cur;
	if (yych == '\n') goto yy515;
	goto yy514;
yy517:
	++cur;
#line 749 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4255 "src/parse/lexer.cc"
}
#line 752 "src/parse/lexer.re"

}

// Generalized rule for char literals (covering various languages).
///
// Char literals may contain closing curly brace, e.g. '}'. We must lex all possible forms of
// char literals, otherwise we might erroneously lex closing single quote as the beginning of
// another literal and overlook a real closing brace (e.g. in 'a'}'b' we might recognize '}'
// as a literal).
//
#line 773 "src/parse/lexer.re"


Ret Input::lex_sqchar_or_standalone_in_code() {

#line 4273 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		192, 192, 192, 192, 192, 192, 192, 192,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	mar = cur;
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy520;
			goto yy522;
		} else {
			if (yych <= 0x7F) goto yy520;
			if (yych >= 0xC2) goto yy523;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy524;
			if (yych <= 0xEF) goto yy525;
			goto yy526;
		} else {
			if (yych <= 0xF3) goto yy527;
			if (yych <= 0xF4) goto yy528;
		}
	}
yy519:
#line 779 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4334 "src/parse/lexer.cc"
yy520:
	yych = *++cur;
	if (yych == '\'') goto yy529;
yy521:
	cur = mar;
	goto yy519;
yy522:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= '&') {
				if (yych == '"') goto yy520;
				goto yy521;
			} else {
				if (yych <= '\'') goto yy531;
				if (yych <= '/') goto yy521;
				if (yych <= '0') goto yy532;
				goto yy533;
			}
		} else {
			if (yych <= 'T') {
				if (yych == '?') goto yy520;
				goto yy521;
			} else {
				if (yych <= 'U') goto yy534;
				if (yych == '\\') goto yy520;
				goto yy521;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy520;
				if (yych <= 'e') goto yy521;
				goto yy520;
			} else {
				if (yych <= 'm') goto yy521;
				if (yych <= 'n') goto yy520;
				if (yych <= 'o') goto yy535;
				goto yy521;
			}
		} else {
			if (yych <= 'u') {
				if (yych == 's') goto yy521;
				if (yych <= 't') goto yy520;
				goto yy536;
			} else {
				if (yych <= 'v') goto yy520;
				if (yych == 'x') goto yy537;
				goto yy521;
			}
		}
	}
yy523:
	yych = *++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy520;
	goto yy521;
yy524:
	yych = *++cur;
	if (yych <= 0x9F) goto yy521;
	if (yych <= 0xBF) goto yy523;
	goto yy521;
yy525:
	yych = *++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy523;
	goto yy521;
yy526:
	yych = *++cur;
	if (yych <= 0x8F) goto yy521;
	if (yych <= 0xBF) goto yy525;
	goto yy521;
yy527:
	yych = *++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0xBF) goto yy525;
	goto yy521;
yy528:
	yych = *++cur;
	if (yych <= 0x7F) goto yy521;
	if (yych <= 0x8F) goto yy525;
	goto yy521;
yy529:
	++cur;
yy530:
#line 778 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4423 "src/parse/lexer.cc"
yy531:
	yych = *++cur;
	if (yych == '\'') goto yy529;
	goto yy530;
yy532:
	yych = *++cur;
	if (yych == '\'') goto yy529;
	if (yych <= '/') goto yy521;
	if (yych <= '7') goto yy538;
	goto yy521;
yy533:
	yych = *++cur;
	if (yych <= '/') goto yy521;
	if (yych <= '7') goto yy538;
	goto yy521;
yy534:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy539;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy539;
		goto yy521;
	}
yy535:
	yych = *++cur;
	if (yych == '{') goto yy540;
	goto yy521;
yy536:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy541;
		if (yych <= '@') goto yy521;
		goto yy541;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy521;
			goto yy541;
		} else {
			if (yych == '{') goto yy542;
			goto yy521;
		}
	}
yy537:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy543;
		if (yych <= '@') goto yy521;
		goto yy543;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy521;
			goto yy543;
		} else {
			if (yych == '{') goto yy542;
			goto yy521;
		}
	}
yy538:
	yych = *++cur;
	if (yych <= '/') goto yy521;
	if (yych <= '7') goto yy520;
	goto yy521;
yy539:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy544;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy544;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy544;
		goto yy521;
	}
yy540:
	yych = *++cur;
	if (yybm[0+yych] & 64) goto yy545;
	goto yy521;
yy541:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy546;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy546;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy546;
		goto yy521;
	}
yy542:
	yych = *++cur;
	if (yych == '}') goto yy521;
	goto yy548;
yy543:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy520;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy520;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy520;
		goto yy521;
	}
yy544:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy549;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy549;
		goto yy521;
	}
yy545:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy545;
	if (yych == '}') goto yy520;
	goto yy521;
yy546:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy543;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy543;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy543;
		goto yy521;
	}
yy547:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy548:
	if (yybm[0+yych] & 128) goto yy547;
	if (yych == '}') goto yy520;
	goto yy521;
yy549:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych >= ':') goto yy521;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy521;
		if (yych >= 'g') goto yy521;
	}
yy550:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy541;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy541;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy541;
		goto yy521;
	}
}
#line 780 "src/parse/lexer.re"

}

Ret Input::lex_bqchar_or_standalone_in_code() {

#line 4604 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		192, 192, 192, 192, 192, 192, 192, 192,
		128, 128,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0, 128, 128, 128, 128, 128, 128,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0,
		  0,   0,   0,   0,   0,   0,   0,   0
	};
	mar = cur;
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy553;
			goto yy555;
		} else {
			if (yych <= 0x7F) goto yy553;
			if (yych >= 0xC2) goto yy556;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy557;
			if (yych <= 0xEF) goto yy558;
			goto yy559;
		} else {
			if (yych <= 0xF3) goto yy560;
			if (yych <= 0xF4) goto yy561;
		}
	}
yy552:
#line 787 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4665 "src/parse/lexer.cc"
yy553:
	yych = *++cur;
	if (yych == '`') goto yy562;
yy554:
	cur = mar;
	goto yy552;
yy555:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '7') {
			if (yych <= '&') {
				if (yych == '"') goto yy553;
				goto yy554;
			} else {
				if (yych <= '\'') goto yy553;
				if (yych <= '/') goto yy554;
				if (yych <= '0') goto yy563;
				goto yy564;
			}
		} else {
			if (yych <= 'U') {
				if (yych == '?') goto yy553;
				if (yych <= 'T') goto yy554;
				goto yy565;
			} else {
				if (yych == '\\') goto yy553;
				if (yych <= '_') goto yy554;
				goto yy562;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'f') {
				if (yych <= 'b') goto yy553;
				if (yych <= 'e') goto yy554;
				goto yy553;
			} else {
				if (yych <= 'm') goto yy554;
				if (yych <= 'n') goto yy553;
				if (yych <= 'o') goto yy566;
				goto yy554;
			}
		} else {
			if (yych <= 'u') {
				if (yych == 's') goto yy554;
				if (yych <= 't') goto yy553;
				goto yy567;
			} else {
				if (yych <= 'v') goto yy553;
				if (yych == 'x') goto yy568;
				goto yy554;
			}
		}
	}
yy556:
	yych = *++cur;
	if (yych <= 0x7F) goto yy554;
	if (yych <= 0xBF) goto yy553;
	goto yy554;
yy557:
	yych = *++cur;
	if (yych <= 0x9F) goto yy554;
	if (yych <= 0xBF) goto yy556;
	goto yy554;
yy558:
	yych = *++cur;
	if (yych <= 0x7F) goto yy554;
	if (yych <= 0xBF) goto yy556;
	goto yy554;
yy559:
	yych = *++cur;
	if (yych <= 0x8F) goto yy554;
	if (yych <= 0xBF) goto yy558;
	goto yy554;
yy560:
	yych = *++cur;
	if (yych <= 0x7F) goto yy554;
	if (yych <= 0xBF) goto yy558;
	goto yy554;
yy561:
	yych = *++cur;
	if (yych <= 0x7F) goto yy554;
	if (yych <= 0x8F) goto yy558;
	goto yy554;
yy562:
	++cur;
#line 786 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4754 "src/parse/lexer.cc"
yy563:
	yych = *++cur;
	if (yych <= '/') goto yy554;
	if (yych <= '7') goto yy569;
	if (yych == '`') goto yy562;
	goto yy554;
yy564:
	yych = *++cur;
	if (yych <= '/') goto yy554;
	if (yych <= '7') goto yy569;
	goto yy554;
yy565:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy570;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy570;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy570;
		goto yy554;
	}
yy566:
	yych = *++cur;
	if (yych == '{') goto yy571;
	goto yy554;
yy567:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy572;
		if (yych <= '@') goto yy554;
		goto yy572;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy554;
			goto yy572;
		} else {
			if (yych == '{') goto yy573;
			goto yy554;
		}
	}
yy568:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy574;
		if (yych <= '@') goto yy554;
		goto yy574;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy554;
			goto yy574;
		} else {
			if (yych == '{') goto yy573;
			goto yy554;
		}
	}
yy569:
	yych = *++cur;
	if (yych <= '/') goto yy554;
	if (yych <= '7') goto yy553;
	goto yy554;
yy570:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy575;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy575;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy575;
		goto yy554;
	}
yy571:
	yych = *++cur;
	if (yybm[0+yych] & 64) goto yy576;
	goto yy554;
yy572:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy577;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy577;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy577;
		goto yy554;
	}
yy573:
	yych = *++cur;
	if (yych == '}') goto yy554;
	goto yy579;
yy574:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy553;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy553;
		goto yy554;
	}
yy575:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy580;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy580;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy580;
		goto yy554;
	}
yy576:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy576;
	if (yych == '}') goto yy553;
	goto yy554;
yy577:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy574;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy574;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy574;
		goto yy554;
	}
yy578:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy579:
	if (yybm[0+yych] & 128) goto yy578;
	if (yych == '}') goto yy553;
	goto yy554;
yy580:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych >= ':') goto yy554;
	} else {
		if (yych <= 'F') goto yy581;
		if (yych <= '`') goto yy554;
		if (yych >= 'g') goto yy554;
	}
yy581:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy572;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy572;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy572;
		goto yy554;
	}
}
#line 788 "src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    switch (quote) {
    case '"':
        return lex_dqstring_in_code();
    case '\'':
        return globopts->single_quoted_strings
            ? lex_sqstring_in_code()
            : lex_sqchar_or_standalone_in_code();
    case '`':
        return globopts->backtick_quoted_strings
            ? lex_bqstring_in_code()
            : lex_bqchar_or_standalone_in_code();
    default:
        return Ret::FAIL;
    }
}

Ret Input::lex_c_comment() {
loop: 
#line 4950 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy584;
	} else {
		if (yych <= '\r') goto yy585;
		if (yych == '*') goto yy586;
	}
	++cur;
yy583:
#line 814 "src/parse/lexer.re"
	{ goto loop; }
#line 4965 "src/parse/lexer.cc"
yy584:
	++cur;
#line 813 "src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4970 "src/parse/lexer.cc"
yy585:
	yych = *++cur;
	if (yych == '\n') goto yy584;
	goto yy583;
yy586:
	yych = *++cur;
	if (yych != '/') goto yy583;
	++cur;
#line 812 "src/parse/lexer.re"
	{ return Ret::OK; }
#line 4981 "src/parse/lexer.cc"
}
#line 815 "src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 4989 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy589;
	if (yych == '\r') goto yy590;
	++cur;
yy588:
#line 821 "src/parse/lexer.re"
	{ goto loop; }
#line 5000 "src/parse/lexer.cc"
yy589:
	++cur;
#line 820 "src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 5005 "src/parse/lexer.cc"
yy590:
	yych = *++cur;
	if (yych == '\n') goto yy589;
	goto yy588;
}
#line 822 "src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 5022 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy592;
#line 833 "src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 5030 "src/parse/lexer.cc"
yy592:
	++cur;
#line 832 "src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 5035 "src/parse/lexer.cc"
}
#line 834 "src/parse/lexer.re"

snd: 
#line 5040 "src/parse/lexer.cc"
{
	uint8_t yych;
	mar = cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '-') goto yy595;
yy594:
#line 836 "src/parse/lexer.re"
	{ u = l; goto add; }
#line 5050 "src/parse/lexer.cc"
yy595:
	yych = *++cur;
	if (yych != ']') goto yy596;
	cur = mar;
	goto yy594;
yy596:
	++cur;
	cur -= 1;
#line 837 "src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 5068 "src/parse/lexer.cc"
}
#line 845 "src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 880 "src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5085 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy599;
	} else {
		if (yych <= '\r') goto yy600;
		if (yych == '\\') goto yy601;
	}
	++cur;
yy598:
#line 862 "src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 5101 "src/parse/lexer.cc"
yy599:
	++cur;
#line 856 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 5106 "src/parse/lexer.cc"
yy600:
	yych = *++cur;
	if (yych == '\n') goto yy599;
	goto yy598;
yy601:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy602;
				if (yych == '\n') goto yy599;
				goto yy603;
			} else {
				if (yych <= '\r') goto yy605;
				if (yych == '-') goto yy606;
				goto yy603;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy607;
				if (yych <= '7') goto yy609;
				if (yych <= 'T') goto yy603;
				goto yy610;
			} else {
				if (yych == 'X') goto yy612;
				if (yych <= '[') goto yy603;
				goto yy613;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy614;
				if (yych <= '`') goto yy603;
				if (yych <= 'a') goto yy615;
				goto yy616;
			} else {
				if (yych == 'f') goto yy617;
				if (yych <= 'm') goto yy603;
				goto yy618;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy619;
				if (yych <= 's') goto yy603;
				goto yy620;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy612;
					goto yy621;
				} else {
					if (yych == 'x') goto yy622;
					goto yy603;
				}
			}
		}
	}
yy602:
#line 859 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 5167 "src/parse/lexer.cc"
yy603:
	++cur;
yy604:
#line 875 "src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 5177 "src/parse/lexer.cc"
yy605:
	yych = *++cur;
	if (yych == '\n') goto yy599;
	goto yy604;
yy606:
	++cur;
#line 873 "src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 5186 "src/parse/lexer.cc"
yy607:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy608;
	if (yych <= '7') goto yy623;
yy608:
#line 858 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 5195 "src/parse/lexer.cc"
yy609:
	++cur;
	goto yy608;
yy610:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy625;
	} else {
		if (yych <= 'F') goto yy625;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy625;
	}
yy611:
#line 857 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 5213 "src/parse/lexer.cc"
yy612:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy626;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy626;
		goto yy611;
	}
yy613:
	++cur;
#line 872 "src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5231 "src/parse/lexer.cc"
yy614:
	++cur;
#line 874 "src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5236 "src/parse/lexer.cc"
yy615:
	++cur;
#line 865 "src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5241 "src/parse/lexer.cc"
yy616:
	++cur;
#line 866 "src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5246 "src/parse/lexer.cc"
yy617:
	++cur;
#line 867 "src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5251 "src/parse/lexer.cc"
yy618:
	++cur;
#line 868 "src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5256 "src/parse/lexer.cc"
yy619:
	++cur;
#line 869 "src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5261 "src/parse/lexer.cc"
yy620:
	++cur;
#line 870 "src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5266 "src/parse/lexer.cc"
yy621:
	++cur;
#line 871 "src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5271 "src/parse/lexer.cc"
yy622:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy611;
		if (yych <= '9') goto yy627;
		goto yy611;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy611;
		if (yych <= 'f') goto yy627;
		goto yy611;
	}
yy623:
	yych = *++cur;
	if (yych <= '/') goto yy624;
	if (yych <= '7') goto yy628;
yy624:
	cur = mar;
	if (yyaccept == 0) goto yy608;
	else goto yy611;
yy625:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy629;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy629;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy629;
		goto yy624;
	}
yy626:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy630;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy630;
		goto yy624;
	}
yy627:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy631;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy631;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy631;
		goto yy624;
	}
yy628:
	++cur;
#line 864 "src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5333 "src/parse/lexer.cc"
yy629:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy632;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy632;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy632;
		goto yy624;
	}
yy630:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy627;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy627;
		goto yy624;
	}
yy631:
	++cur;
#line 863 "src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5362 "src/parse/lexer.cc"
yy632:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych >= ':') goto yy624;
	} else {
		if (yych <= 'F') goto yy633;
		if (yych <= '`') goto yy624;
		if (yych >= 'g') goto yy624;
	}
yy633:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy624;
		if (yych <= '9') goto yy626;
		goto yy624;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy624;
		if (yych <= 'f') goto yy626;
		goto yy624;
	}
}
#line 882 "src/parse/lexer.re"

    } else {
        
#line 5390 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy637;
		} else {
			if (yych <= '\r') goto yy638;
			if (yych == '\\') goto yy639;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy641;
			if (yych <= 0xDF) goto yy643;
			if (yych <= 0xE0) goto yy644;
			goto yy645;
		} else {
			if (yych <= 0xF0) goto yy646;
			if (yych <= 0xF3) goto yy647;
			if (yych <= 0xF4) goto yy648;
			goto yy641;
		}
	}
yy635:
	++cur;
yy636:
#line 862 "src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 5421 "src/parse/lexer.cc"
yy637:
	++cur;
#line 856 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 5426 "src/parse/lexer.cc"
yy638:
	yych = *++cur;
	if (yych == '\n') goto yy637;
	goto yy636;
yy639:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy649;
				} else {
					if (yych <= '\n') goto yy637;
					if (yych <= '\f') goto yy649;
					goto yy651;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy649;
					goto yy652;
				} else {
					if (yych <= '/') goto yy649;
					if (yych <= '3') goto yy653;
					goto yy655;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy649;
					goto yy656;
				} else {
					if (yych == 'X') goto yy658;
					goto yy649;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy659;
					goto yy660;
				} else {
					if (yych <= '`') goto yy649;
					if (yych <= 'a') goto yy661;
					goto yy662;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy649;
					goto yy663;
				} else {
					if (yych == 'n') goto yy664;
					goto yy649;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy665;
					goto yy649;
				} else {
					if (yych <= 't') goto yy666;
					if (yych <= 'u') goto yy658;
					goto yy667;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy649;
					goto yy668;
				} else {
					if (yych <= 0x7F) goto yy649;
					if (yych >= 0xC2) goto yy669;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy671;
					if (yych <= 0xEF) goto yy672;
					goto yy673;
				} else {
					if (yych <= 0xF3) goto yy674;
					if (yych <= 0xF4) goto yy675;
				}
			}
		}
	}
yy640:
#line 859 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 5518 "src/parse/lexer.cc"
yy641:
	++cur;
yy642:
#line 860 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 5524 "src/parse/lexer.cc"
yy643:
	yych = *++cur;
	if (yych <= 0x7F) goto yy642;
	if (yych <= 0xBF) goto yy635;
	goto yy642;
yy644:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy642;
	if (yych <= 0xBF) goto yy676;
	goto yy642;
yy645:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy642;
	if (yych <= 0xBF) goto yy676;
	goto yy642;
yy646:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy642;
	if (yych <= 0xBF) goto yy677;
	goto yy642;
yy647:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy642;
	if (yych <= 0xBF) goto yy677;
	goto yy642;
yy648:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy642;
	if (yych <= 0x8F) goto yy677;
	goto yy642;
yy649:
	++cur;
yy650:
#line 875 "src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 5569 "src/parse/lexer.cc"
yy651:
	yych = *++cur;
	if (yych == '\n') goto yy637;
	goto yy650;
yy652:
	++cur;
#line 873 "src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 5578 "src/parse/lexer.cc"
yy653:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy654;
	if (yych <= '7') goto yy678;
yy654:
#line 858 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 5587 "src/parse/lexer.cc"
yy655:
	++cur;
	goto yy654;
yy656:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy679;
	} else {
		if (yych <= 'F') goto yy679;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy679;
	}
yy657:
#line 857 "src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 5605 "src/parse/lexer.cc"
yy658:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy680;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy680;
		goto yy657;
	}
yy659:
	++cur;
#line 872 "src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5623 "src/parse/lexer.cc"
yy660:
	++cur;
#line 874 "src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5628 "src/parse/lexer.cc"
yy661:
	++cur;
#line 865 "src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5633 "src/parse/lexer.cc"
yy662:
	++cur;
#line 866 "src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5638 "src/parse/lexer.cc"
yy663:
	++cur;
#line 867 "src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5643 "src/parse/lexer.cc"
yy664:
	++cur;
#line 868 "src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5648 "src/parse/lexer.cc"
yy665:
	++cur;
#line 869 "src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5653 "src/parse/lexer.cc"
yy666:
	++cur;
#line 870 "src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5658 "src/parse/lexer.cc"
yy667:
	++cur;
#line 871 "src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5663 "src/parse/lexer.cc"
yy668:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy681;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy681;
		goto yy657;
	}
yy669:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0xBF) goto yy649;
yy670:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) goto yy640;
		else goto yy642;
	} else {
		if (yyaccept == 2) goto yy654;
		else goto yy657;
	}
yy671:
	yych = *++cur;
	if (yych <= 0x9F) goto yy670;
	if (yych <= 0xBF) goto yy669;
	goto yy670;
yy672:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0xBF) goto yy669;
	goto yy670;
yy673:
	yych = *++cur;
	if (yych <= 0x8F) goto yy670;
	if (yych <= 0xBF) goto yy672;
	goto yy670;
yy674:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0xBF) goto yy672;
	goto yy670;
yy675:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0x8F) goto yy672;
	goto yy670;
yy676:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0xBF) goto yy635;
	goto yy670;
yy677:
	yych = *++cur;
	if (yych <= 0x7F) goto yy670;
	if (yych <= 0xBF) goto yy676;
	goto yy670;
yy678:
	yych = *++cur;
	if (yych <= '/') goto yy670;
	if (yych <= '7') goto yy682;
	goto yy670;
yy679:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy683;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy683;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy683;
		goto yy670;
	}
yy680:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy684;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy684;
		goto yy670;
	}
yy681:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy685;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy685;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy685;
		goto yy670;
	}
yy682:
	++cur;
#line 864 "src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5770 "src/parse/lexer.cc"
yy683:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy686;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy686;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy686;
		goto yy670;
	}
yy684:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy681;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy681;
		goto yy670;
	}
yy685:
	++cur;
#line 863 "src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5799 "src/parse/lexer.cc"
yy686:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych >= ':') goto yy670;
	} else {
		if (yych <= 'F') goto yy687;
		if (yych <= '`') goto yy670;
		if (yych >= 'g') goto yy670;
	}
yy687:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy670;
		if (yych <= '9') goto yy680;
		goto yy670;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy670;
		if (yych <= 'f') goto yy680;
		goto yy670;
	}
}
#line 884 "src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 915 "src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5836 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy690;
	} else {
		if (yych <= '\r') goto yy691;
		if (yych == '\\') goto yy692;
	}
	++cur;
yy689:
#line 899 "src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5852 "src/parse/lexer.cc"
yy690:
	++cur;
#line 893 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5857 "src/parse/lexer.cc"
yy691:
	yych = *++cur;
	if (yych == '\n') goto yy690;
	goto yy689;
yy692:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy693;
				if (yych <= '\t') goto yy694;
				goto yy690;
			} else {
				if (yych == '\r') goto yy696;
				if (yych <= '/') goto yy694;
				goto yy697;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy699;
				if (yych == 'U') goto yy700;
				goto yy694;
			} else {
				if (yych <= 'X') goto yy702;
				if (yych == '\\') goto yy703;
				goto yy694;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy704;
				if (yych <= 'b') goto yy705;
				goto yy694;
			} else {
				if (yych <= 'f') goto yy706;
				if (yych == 'n') goto yy707;
				goto yy694;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy708;
				if (yych <= 's') goto yy694;
				if (yych <= 't') goto yy709;
				goto yy702;
			} else {
				if (yych <= 'v') goto yy710;
				if (yych == 'x') goto yy711;
				goto yy694;
			}
		}
	}
yy693:
#line 896 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5913 "src/parse/lexer.cc"
yy694:
	++cur;
yy695:
#line 910 "src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5923 "src/parse/lexer.cc"
yy696:
	yych = *++cur;
	if (yych == '\n') goto yy690;
	goto yy695;
yy697:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy698;
	if (yych <= '7') goto yy712;
yy698:
#line 895 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5936 "src/parse/lexer.cc"
yy699:
	++cur;
	goto yy698;
yy700:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy714;
	} else {
		if (yych <= 'F') goto yy714;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy714;
	}
yy701:
#line 894 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5954 "src/parse/lexer.cc"
yy702:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy715;
		goto yy701;
	} else {
		if (yych <= 'F') goto yy715;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy715;
		goto yy701;
	}
yy703:
	++cur;
#line 909 "src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5972 "src/parse/lexer.cc"
yy704:
	++cur;
#line 902 "src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5977 "src/parse/lexer.cc"
yy705:
	++cur;
#line 903 "src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5982 "src/parse/lexer.cc"
yy706:
	++cur;
#line 904 "src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5987 "src/parse/lexer.cc"
yy707:
	++cur;
#line 905 "src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5992 "src/parse/lexer.cc"
yy708:
	++cur;
#line 906 "src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5997 "src/parse/lexer.cc"
yy709:
	++cur;
#line 907 "src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 6002 "src/parse/lexer.cc"
yy710:
	++cur;
#line 908 "src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 6007 "src/parse/lexer.cc"
yy711:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy716;
		goto yy701;
	} else {
		if (yych <= 'F') goto yy716;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy716;
		goto yy701;
	}
yy712:
	yych = *++cur;
	if (yych <= '/') goto yy713;
	if (yych <= '7') goto yy717;
yy713:
	cur = mar;
	if (yyaccept == 0) goto yy698;
	else goto yy701;
yy714:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy718;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy718;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy718;
		goto yy713;
	}
yy715:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy719;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy719;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy719;
		goto yy713;
	}
yy716:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy720;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy720;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy720;
		goto yy713;
	}
yy717:
	++cur;
#line 901 "src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 6069 "src/parse/lexer.cc"
yy718:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy721;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy721;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy721;
		goto yy713;
	}
yy719:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy716;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy716;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy716;
		goto yy713;
	}
yy720:
	++cur;
#line 900 "src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 6098 "src/parse/lexer.cc"
yy721:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych >= ':') goto yy713;
	} else {
		if (yych <= 'F') goto yy722;
		if (yych <= '`') goto yy713;
		if (yych >= 'g') goto yy713;
	}
yy722:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy713;
		if (yych <= '9') goto yy715;
		goto yy713;
	} else {
		if (yych <= 'F') goto yy715;
		if (yych <= '`') goto yy713;
		if (yych <= 'f') goto yy715;
		goto yy713;
	}
}
#line 917 "src/parse/lexer.re"

    } else {
        
#line 6126 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy726;
		} else {
			if (yych <= '\r') goto yy727;
			if (yych == '\\') goto yy728;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy730;
			if (yych <= 0xDF) goto yy732;
			if (yych <= 0xE0) goto yy733;
			goto yy734;
		} else {
			if (yych <= 0xF0) goto yy735;
			if (yych <= 0xF3) goto yy736;
			if (yych <= 0xF4) goto yy737;
			goto yy730;
		}
	}
yy724:
	++cur;
yy725:
#line 899 "src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 6157 "src/parse/lexer.cc"
yy726:
	++cur;
#line 893 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 6162 "src/parse/lexer.cc"
yy727:
	yych = *++cur;
	if (yych == '\n') goto yy726;
	goto yy725;
yy728:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy729;
				if (yych == '\n') goto yy726;
				goto yy738;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy740;
					goto yy738;
				} else {
					if (yych <= '3') goto yy741;
					if (yych <= '7') goto yy743;
					goto yy738;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy744;
					goto yy738;
				} else {
					if (yych <= 'X') goto yy746;
					if (yych <= '[') goto yy738;
					goto yy747;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy738;
					goto yy748;
				} else {
					if (yych <= 'b') goto yy749;
					if (yych <= 'e') goto yy738;
					goto yy750;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy751;
				if (yych <= 'q') goto yy738;
				goto yy752;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy738;
					goto yy753;
				} else {
					if (yych <= 'u') goto yy746;
					if (yych <= 'v') goto yy754;
					goto yy738;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy755;
					goto yy738;
				} else {
					if (yych <= 0xC1) goto yy729;
					if (yych <= 0xDF) goto yy756;
					goto yy758;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy759;
					goto yy760;
				} else {
					if (yych <= 0xF3) goto yy761;
					if (yych <= 0xF4) goto yy762;
				}
			}
		}
	}
yy729:
#line 896 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 6247 "src/parse/lexer.cc"
yy730:
	++cur;
yy731:
#line 897 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 6253 "src/parse/lexer.cc"
yy732:
	yych = *++cur;
	if (yych <= 0x7F) goto yy731;
	if (yych <= 0xBF) goto yy724;
	goto yy731;
yy733:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy731;
	if (yych <= 0xBF) goto yy763;
	goto yy731;
yy734:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy731;
	if (yych <= 0xBF) goto yy763;
	goto yy731;
yy735:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy731;
	if (yych <= 0xBF) goto yy764;
	goto yy731;
yy736:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy731;
	if (yych <= 0xBF) goto yy764;
	goto yy731;
yy737:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy731;
	if (yych <= 0x8F) goto yy764;
	goto yy731;
yy738:
	++cur;
yy739:
#line 910 "src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 6298 "src/parse/lexer.cc"
yy740:
	yych = *++cur;
	if (yych == '\n') goto yy726;
	goto yy739;
yy741:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy742;
	if (yych <= '7') goto yy765;
yy742:
#line 895 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 6311 "src/parse/lexer.cc"
yy743:
	++cur;
	goto yy742;
yy744:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy745;
		if (yych <= '9') goto yy766;
	} else {
		if (yych <= 'F') goto yy766;
		if (yych <= '`') goto yy745;
		if (yych <= 'f') goto yy766;
	}
yy745:
#line 894 "src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 6329 "src/parse/lexer.cc"
yy746:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy745;
		if (yych <= '9') goto yy767;
		goto yy745;
	} else {
		if (yych <= 'F') goto yy767;
		if (yych <= '`') goto yy745;
		if (yych <= 'f') goto yy767;
		goto yy745;
	}
yy747:
	++cur;
#line 909 "src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 6347 "src/parse/lexer.cc"
yy748:
	++cur;
#line 902 "src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 6352 "src/parse/lexer.cc"
yy749:
	++cur;
#line 903 "src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 6357 "src/parse/lexer.cc"
yy750:
	++cur;
#line 904 "src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 6362 "src/parse/lexer.cc"
yy751:
	++cur;
#line 905 "src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 6367 "src/parse/lexer.cc"
yy752:
	++cur;
#line 906 "src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 6372 "src/parse/lexer.cc"
yy753:
	++cur;
#line 907 "src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 6377 "src/parse/lexer.cc"
yy754:
	++cur;
#line 908 "src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 6382 "src/parse/lexer.cc"
yy755:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy745;
		if (yych <= '9') goto yy768;
		goto yy745;
	} else {
		if (yych <= 'F') goto yy768;
		if (yych <= '`') goto yy745;
		if (yych <= 'f') goto yy768;
		goto yy745;
	}
yy756:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0xBF) goto yy738;
yy757:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) goto yy729;
		else goto yy731;
	} else {
		if (yyaccept == 2) goto yy742;
		else goto yy745;
	}
yy758:
	yych = *++cur;
	if (yych <= 0x9F) goto yy757;
	if (yych <= 0xBF) goto yy756;
	goto yy757;
yy759:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0xBF) goto yy756;
	goto yy757;
yy760:
	yych = *++cur;
	if (yych <= 0x8F) goto yy757;
	if (yych <= 0xBF) goto yy759;
	goto yy757;
yy761:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0xBF) goto yy759;
	goto yy757;
yy762:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0x8F) goto yy759;
	goto yy757;
yy763:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0xBF) goto yy724;
	goto yy757;
yy764:
	yych = *++cur;
	if (yych <= 0x7F) goto yy757;
	if (yych <= 0xBF) goto yy763;
	goto yy757;
yy765:
	yych = *++cur;
	if (yych <= '/') goto yy757;
	if (yych <= '7') goto yy769;
	goto yy757;
yy766:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy770;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy770;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy770;
		goto yy757;
	}
yy767:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy771;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy771;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy771;
		goto yy757;
	}
yy768:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy772;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy772;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy772;
		goto yy757;
	}
yy769:
	++cur;
#line 901 "src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 6489 "src/parse/lexer.cc"
yy770:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy773;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy773;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy773;
		goto yy757;
	}
yy771:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy768;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy768;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy768;
		goto yy757;
	}
yy772:
	++cur;
#line 900 "src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 6518 "src/parse/lexer.cc"
yy773:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych >= ':') goto yy757;
	} else {
		if (yych <= 'F') goto yy774;
		if (yych <= '`') goto yy757;
		if (yych >= 'g') goto yy757;
	}
yy774:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy757;
		if (yych <= '9') goto yy767;
		goto yy757;
	} else {
		if (yych <= 'F') goto yy767;
		if (yych <= '`') goto yy757;
		if (yych <= 'f') goto yy767;
		goto yy757;
	}
}
#line 919 "src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 6565 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[256] = {
		  0, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128,   0, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		192, 192, 192, 192, 192, 192, 192, 192,
		192, 192, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128,   0, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128,
		128, 128, 128, 128, 128, 128, 128, 128
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy776;
		} else {
			if (yych <= '\n') goto yy778;
			if (yych <= '\f') goto yy776;
			goto yy779;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy776;
			goto yy780;
		} else {
			if (yych <= '0') goto yy776;
			if (yych <= '9') goto yy781;
			goto yy776;
		}
	}
	++cur;
#line 960 "src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 6625 "src/parse/lexer.cc"
yy776:
	++cur;
yy777:
#line 961 "src/parse/lexer.re"
	{ goto sourceline; }
#line 6631 "src/parse/lexer.cc"
yy778:
	++cur;
#line 959 "src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 6636 "src/parse/lexer.cc"
yy779:
	yych = *++cur;
	if (yych == '\n') goto yy778;
	goto yy777;
yy780:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy777;
	if (yych == '\n') goto yy777;
	goto yy783;
yy781:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) goto yy781;
#line 941 "src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 6660 "src/parse/lexer.cc"
yy782:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy783:
	if (yybm[0+yych] & 128) goto yy782;
	if (yych <= '\n') goto yy784;
	if (yych <= '"') goto yy785;
	goto yy786;
yy784:
	cur = mar;
	goto yy777;
yy785:
	++cur;
#line 950 "src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 6684 "src/parse/lexer.cc"
yy786:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy784;
	if (yych == '\n') goto yy784;
	goto yy782;
}
#line 962 "src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c
