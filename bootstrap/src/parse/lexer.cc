/* Generated by re2c 3.1 */
#line 1 "../src/parse/lexer.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/helpers.h"
#include "src/codegen/output.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lexer.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

namespace re2c {

#line 28 "src/parse/lexer.cc"
size_t LexerState::maxfill_main() { return 18; }
#line 25 "../src/parse/lexer.re"


// Global re2c configurations and definitions.
#line 60 "../src/parse/lexer.re"


#line 132 "../src/parse/lexer.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Input::lex_program(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 54 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy1;
		} else {
			if (yych <= '\n') goto yy3;
			if (yych <= '\f') goto yy1;
			goto yy5;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy1;
			goto yy6;
		} else {
			if (yych == '/') goto yy7;
			goto yy1;
		}
	}
	++cur;
#line 274 "../src/parse/lexer.re"
	{
        if (is_eof()) {
            out.gen_raw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 120 "src/parse/lexer.cc"
yy1:
	++cur;
yy2:
#line 294 "../src/parse/lexer.re"
	{ goto loop; }
#line 126 "src/parse/lexer.cc"
yy3:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy4:
#line 289 "../src/parse/lexer.re"
	{
        next_line();
        goto loop;
    }
#line 140 "src/parse/lexer.cc"
yy5:
	yych = *++cur;
	if (yych == '\n') goto yy3;
	goto yy2;
yy6:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '{') goto yy11;
	goto yy2;
yy7:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy12;
	goto yy2;
yy8:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy8;
	}
	if (yych == '#') goto yy10;
yy9:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy4;
			} else {
				goto yy2;
			}
		} else {
			goto yy58;
		}
	} else {
		if (yyaccept <= 4) {
			if (yyaccept == 3) {
				goto yy142;
			} else {
				goto yy144;
			}
		} else {
			goto yy172;
		}
	}
yy10:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy10;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy10;
		if (yych == 'l') goto yy13;
		goto yy9;
	}
yy11:
	yych = *++cur;
	if (yych <= 'h') {
		if (yych <= '\r') {
			if (yych == '\n') {
				yyt1 = cur;
				goto yy14;
			}
			if (yych <= '\f') goto yy9;
			yyt1 = cur;
			goto yy15;
		} else {
			if (yych <= 'c') {
				if (yych <= 'b') goto yy9;
				goto yy16;
			} else {
				if (yych <= 'f') goto yy9;
				if (yych <= 'g') goto yy17;
				goto yy18;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'k') {
				if (yych <= 'i') goto yy19;
				goto yy9;
			} else {
				if (yych <= 'l') goto yy20;
				if (yych <= 'm') goto yy21;
				goto yy9;
			}
		} else {
			if (yych <= 's') {
				if (yych <= 'r') goto yy22;
				goto yy23;
			} else {
				if (yych == 'u') goto yy24;
				goto yy9;
			}
		}
	}
yy12:
	yych = *++cur;
	if (yych == '!') goto yy25;
	goto yy9;
yy13:
	yych = *++cur;
	if (yych == 'i') goto yy26;
	goto yy9;
yy14:
	++cur;
	cur = yyt1;
#line 148 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 256 "src/parse/lexer.cc"
yy15:
	yych = *++cur;
	if (yych == '\n') goto yy14;
	goto yy9;
yy16:
	yych = *++cur;
	if (yych == 'o') goto yy27;
	goto yy9;
yy17:
	yych = *++cur;
	if (yych == 'e') goto yy28;
	goto yy9;
yy18:
	yych = *++cur;
	if (yych == 'e') goto yy29;
	goto yy9;
yy19:
	yych = *++cur;
	if (yych == 'g') goto yy30;
	if (yych == 'n') goto yy31;
	goto yy9;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy32;
	goto yy9;
yy21:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy33;
		goto yy9;
	} else {
		if (yych <= 't') goto yy34;
		if (yych == 'v') goto yy35;
		goto yy9;
	}
yy22:
	yych = *++cur;
	if (yych == 'u') goto yy36;
	goto yy9;
yy23:
	yych = *++cur;
	if (yych == 't') goto yy37;
	if (yych == 'v') goto yy38;
	goto yy9;
yy24:
	yych = *++cur;
	if (yych == 's') goto yy39;
	goto yy9;
yy25:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy40;
		case 'g': goto yy41;
		case 'h': goto yy42;
		case 'i': goto yy43;
		case 'l': goto yy44;
		case 'm': goto yy45;
		case 'r': goto yy46;
		case 's': goto yy47;
		case 't': goto yy48;
		case 'u': goto yy49;
		default: goto yy9;
	}
yy26:
	yych = *++cur;
	if (yych == 'n') goto yy50;
	goto yy9;
yy27:
	yych = *++cur;
	if (yych == 'n') goto yy51;
	goto yy9;
yy28:
	yych = *++cur;
	if (yych == 't') goto yy52;
	goto yy9;
yy29:
	yych = *++cur;
	if (yych == 'a') goto yy53;
	goto yy9;
yy30:
	yych = *++cur;
	if (yych == 'n') goto yy54;
	goto yy9;
yy31:
	yych = *++cur;
	if (yych == 'c') goto yy55;
	goto yy9;
yy32:
	yych = *++cur;
	if (yych == 'c') goto yy56;
	goto yy9;
yy33:
	yych = *++cur;
	if (yych == 'x') goto yy57;
	goto yy9;
yy34:
	yych = *++cur;
	if (yych == 'a') goto yy59;
	goto yy9;
yy35:
	yych = *++cur;
	if (yych == 'a') goto yy60;
	goto yy9;
yy36:
	yych = *++cur;
	if (yych == 'l') goto yy61;
	goto yy9;
yy37:
	yych = *++cur;
	if (yych == 'a') goto yy62;
	goto yy9;
yy38:
	yych = *++cur;
	if (yych == 'a') goto yy63;
	goto yy9;
yy39:
	yych = *++cur;
	if (yych == 'e') goto yy64;
	goto yy9;
yy40:
	yych = *++cur;
	if (yych == 'o') goto yy65;
	goto yy9;
yy41:
	yych = *++cur;
	if (yych == 'e') goto yy66;
	goto yy9;
yy42:
	yych = *++cur;
	if (yych == 'e') goto yy67;
	goto yy9;
yy43:
	yych = *++cur;
	if (yych == 'g') goto yy68;
	if (yych == 'n') goto yy69;
	goto yy9;
yy44:
	yych = *++cur;
	if (yych == 'o') goto yy70;
	goto yy9;
yy45:
	yych = *++cur;
	if (yych <= 's') {
		if (yych == 'a') goto yy71;
		goto yy9;
	} else {
		if (yych <= 't') goto yy72;
		if (yych == 'v') goto yy73;
		goto yy9;
	}
yy46:
	yych = *++cur;
	if (yych == 'e') goto yy74;
	if (yych == 'u') goto yy75;
	goto yy9;
yy47:
	yych = *++cur;
	if (yych == 't') goto yy76;
	if (yych == 'v') goto yy77;
	goto yy9;
yy48:
	yych = *++cur;
	if (yych == 'y') goto yy78;
	goto yy9;
yy49:
	yych = *++cur;
	if (yych == 's') goto yy79;
	goto yy9;
yy50:
	yych = *++cur;
	if (yych == 'e') goto yy80;
	goto yy9;
yy51:
	yych = *++cur;
	if (yych == 'd') goto yy81;
	goto yy9;
yy52:
	yych = *++cur;
	if (yych == 's') goto yy82;
	goto yy9;
yy53:
	yych = *++cur;
	if (yych == 'd') goto yy83;
	goto yy9;
yy54:
	yych = *++cur;
	if (yych == 'o') goto yy84;
	goto yy9;
yy55:
	yych = *++cur;
	if (yych == 'l') goto yy85;
	goto yy9;
yy56:
	yych = *++cur;
	if (yych == 'a') goto yy86;
	goto yy9;
yy57:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == 'n') goto yy87;
yy58:
#line 178 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXFILL, DCONF_FORMAT));
        goto next;
    }
#line 463 "src/parse/lexer.cc"
yy59:
	yych = *++cur;
	if (yych == 'g') goto yy88;
	goto yy9;
yy60:
	yych = *++cur;
	if (yych == 'r') goto yy89;
	goto yy9;
yy61:
	yych = *++cur;
	if (yych == 'e') goto yy90;
	goto yy9;
yy62:
	yych = *++cur;
	if (yych == 'g') goto yy91;
	goto yy9;
yy63:
	yych = *++cur;
	if (yych == 'r') goto yy92;
	goto yy9;
yy64:
	++cur;
#line 172 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 492 "src/parse/lexer.cc"
yy65:
	yych = *++cur;
	if (yych == 'n') goto yy93;
	goto yy9;
yy66:
	yych = *++cur;
	if (yych == 't') goto yy94;
	goto yy9;
yy67:
	yych = *++cur;
	if (yych == 'a') goto yy95;
	goto yy9;
yy68:
	yych = *++cur;
	if (yych == 'n') goto yy96;
	goto yy9;
yy69:
	yych = *++cur;
	if (yych == 'c') goto yy97;
	goto yy9;
yy70:
	yych = *++cur;
	if (yych == 'c') goto yy98;
	goto yy9;
yy71:
	yych = *++cur;
	if (yych == 'x') goto yy99;
	goto yy9;
yy72:
	yych = *++cur;
	if (yych == 'a') goto yy100;
	goto yy9;
yy73:
	yych = *++cur;
	if (yych == 'a') goto yy101;
	goto yy9;
yy74:
	yych = *++cur;
	if (yych == '2') goto yy102;
	goto yy9;
yy75:
	yych = *++cur;
	if (yych == 'l') goto yy103;
	goto yy9;
yy76:
	yych = *++cur;
	if (yych == 'a') goto yy104;
	goto yy9;
yy77:
	yych = *++cur;
	if (yych == 'a') goto yy105;
	goto yy9;
yy78:
	yych = *++cur;
	if (yych == 'p') goto yy106;
	goto yy9;
yy79:
	yych = *++cur;
	if (yych == 'e') goto yy107;
	goto yy9;
yy80:
	yych = *++cur;
	if (yych <= '0') goto yy109;
	if (yych <= '9') goto yy9;
	goto yy109;
yy81:
	yych = *++cur;
	if (yych == 'i') goto yy110;
	goto yy9;
yy82:
	yych = *++cur;
	if (yych == 't') goto yy111;
	goto yy9;
yy83:
	yych = *++cur;
	if (yych == 'e') goto yy112;
	goto yy9;
yy84:
	yych = *++cur;
	if (yych == 'r') goto yy113;
	goto yy9;
yy85:
	yych = *++cur;
	if (yych == 'u') goto yy114;
	goto yy9;
yy86:
	yych = *++cur;
	if (yych == 'l') goto yy115;
	goto yy9;
yy87:
	yych = *++cur;
	if (yych == 'm') goto yy116;
	goto yy9;
yy88:
	yych = *++cur;
	if (yych == 's') goto yy117;
	goto yy9;
yy89:
	yych = *++cur;
	if (yych == 's') goto yy118;
	goto yy9;
yy90:
	yych = *++cur;
	if (yych == 's') goto yy119;
	goto yy9;
yy91:
	yych = *++cur;
	if (yych == 's') goto yy120;
	goto yy9;
yy92:
	yych = *++cur;
	if (yych == 's') goto yy121;
	goto yy9;
yy93:
	yych = *++cur;
	if (yych == 'd') goto yy122;
	goto yy9;
yy94:
	yych = *++cur;
	if (yych == 's') goto yy123;
	goto yy9;
yy95:
	yych = *++cur;
	if (yych == 'd') goto yy124;
	goto yy9;
yy96:
	yych = *++cur;
	if (yych == 'o') goto yy125;
	goto yy9;
yy97:
	yych = *++cur;
	if (yych == 'l') goto yy126;
	goto yy9;
yy98:
	yych = *++cur;
	if (yych == 'a') goto yy127;
	goto yy9;
yy99:
	yych = *++cur;
	if (yych == ':') goto yy128;
	if (yych == 'n') goto yy129;
	goto yy9;
yy100:
	yych = *++cur;
	if (yych == 'g') goto yy130;
	goto yy9;
yy101:
	yych = *++cur;
	if (yych == 'r') goto yy131;
	goto yy9;
yy102:
	yych = *++cur;
	if (yych == 'c') goto yy132;
	goto yy9;
yy103:
	yych = *++cur;
	if (yych == 'e') goto yy133;
	goto yy9;
yy104:
	yych = *++cur;
	if (yych == 'g') goto yy134;
	goto yy9;
yy105:
	yych = *++cur;
	if (yych == 'r') goto yy135;
	goto yy9;
yy106:
	yych = *++cur;
	if (yych == 'e') goto yy136;
	goto yy9;
yy107:
	yych = *++cur;
	if (yych == ':') goto yy137;
	goto yy9;
yy108:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy109:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy108;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy108;
		if (yych <= '0') goto yy9;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy138;
		}
		goto yy9;
	}
yy110:
	yych = *++cur;
	if (yych == 't') goto yy139;
	goto yy9;
yy111:
	yych = *++cur;
	if (yych == 'a') goto yy140;
	goto yy9;
yy112:
	yych = *++cur;
	if (yych == 'r') goto yy141;
	goto yy9;
yy113:
	yych = *++cur;
	if (yych == 'e') goto yy143;
	goto yy9;
yy114:
	yych = *++cur;
	if (yych == 'd') goto yy145;
	goto yy9;
yy115:
	++cur;
#line 160 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 712 "src/parse/lexer.cc"
yy116:
	yych = *++cur;
	if (yych == 'a') goto yy146;
	goto yy9;
yy117:
	++cur;
#line 194 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MTAGS, allow));
        goto next;
    }
#line 725 "src/parse/lexer.cc"
yy118:
	++cur;
#line 206 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::MVARS, allow));
        goto next;
    }
#line 734 "src/parse/lexer.cc"
yy119:
	++cur;
#line 166 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 743 "src/parse/lexer.cc"
yy120:
	++cur;
#line 188 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::STAGS, allow));
        goto next;
    }
#line 752 "src/parse/lexer.cc"
yy121:
	++cur;
#line 200 "../src/parse/lexer.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::SVARS, allow));
        goto next;
    }
#line 761 "src/parse/lexer.cc"
yy122:
	yych = *++cur;
	if (yych == 'i') goto yy147;
	goto yy9;
yy123:
	yych = *++cur;
	if (yych == 't') goto yy148;
	goto yy9;
yy124:
	yych = *++cur;
	if (yych == 'e') goto yy149;
	goto yy9;
yy125:
	yych = *++cur;
	if (yych == 'r') goto yy150;
	goto yy9;
yy126:
	yych = *++cur;
	if (yych == 'u') goto yy151;
	goto yy9;
yy127:
	yych = *++cur;
	if (yych == 'l') goto yy152;
	goto yy9;
yy128:
	yych = *++cur;
	if (yych == 'r') goto yy153;
	goto yy9;
yy129:
	yych = *++cur;
	if (yych == 'm') goto yy154;
	goto yy9;
yy130:
	yych = *++cur;
	if (yych == 's') goto yy155;
	goto yy9;
yy131:
	yych = *++cur;
	if (yych == 's') goto yy156;
	goto yy9;
yy132:
	++cur;
#line 154 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 810 "src/parse/lexer.cc"
yy133:
	yych = *++cur;
	if (yych == 's') goto yy157;
	goto yy9;
yy134:
	yych = *++cur;
	if (yych == 's') goto yy158;
	goto yy9;
yy135:
	yych = *++cur;
	if (yych == 's') goto yy159;
	goto yy9;
yy136:
	yych = *++cur;
	if (yych == 's') goto yy160;
	goto yy9;
yy137:
	yych = *++cur;
	if (yych == 'r') goto yy161;
	goto yy9;
yy138:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy138;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy9;
		if (yych <= '\t') goto yy162;
		if (yych <= '\n') goto yy163;
		goto yy9;
	} else {
		if (yych <= '\r') goto yy164;
		if (yych == ' ') goto yy162;
		goto yy9;
	}
yy139:
	yych = *++cur;
	if (yych == 'i') goto yy165;
	goto yy9;
yy140:
	yych = *++cur;
	if (yych == 't') goto yy166;
	goto yy9;
yy141:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy167;
yy142:
#line 248 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `header` block: expected `:on` or `:off`"));
    }
#line 865 "src/parse/lexer.cc"
yy143:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy168;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy168;
			}
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy168;
			}
			if (yych >= '%') {
				yyt1 = cur;
				goto yy169;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy170;
			}
		}
	}
yy144:
#line 269 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed `ignore` block: expected a space, a newline, or the end of block"));
    }
#line 904 "src/parse/lexer.cc"
yy145:
	yych = *++cur;
	if (yych == 'e') goto yy171;
	goto yy9;
yy146:
	yych = *++cur;
	if (yych == 't') goto yy173;
	goto yy9;
yy147:
	yych = *++cur;
	if (yych == 't') goto yy174;
	goto yy9;
yy148:
	yych = *++cur;
	if (yych == 'a') goto yy175;
	goto yy9;
yy149:
	yych = *++cur;
	if (yych == 'r') goto yy176;
	goto yy9;
yy150:
	yych = *++cur;
	if (yych == 'e') goto yy177;
	goto yy9;
yy151:
	yych = *++cur;
	if (yych == 'd') goto yy178;
	goto yy9;
yy152:
	yych = *++cur;
	if (yych == ':') goto yy179;
	goto yy9;
yy153:
	yych = *++cur;
	if (yych == 'e') goto yy180;
	goto yy9;
yy154:
	yych = *++cur;
	if (yych == 'a') goto yy181;
	goto yy9;
yy155:
	yych = *++cur;
	if (yych == ':') goto yy182;
	goto yy9;
yy156:
	yych = *++cur;
	if (yych == ':') goto yy183;
	goto yy9;
yy157:
	yych = *++cur;
	if (yych == ':') goto yy184;
	goto yy9;
yy158:
	yych = *++cur;
	if (yych == ':') goto yy185;
	goto yy9;
yy159:
	yych = *++cur;
	if (yych == ':') goto yy186;
	goto yy9;
yy160:
	yych = *++cur;
	if (yych == ':') goto yy187;
	goto yy9;
yy161:
	yych = *++cur;
	if (yych == 'e') goto yy188;
	goto yy9;
yy162:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy162;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy162;
		if (yych == '"') goto yy189;
		goto yy9;
	}
yy163:
	++cur;
	cur = yyt1;
#line 282 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.gen_stmt(code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 995 "src/parse/lexer.cc"
yy164:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	goto yy9;
yy165:
	yych = *++cur;
	if (yych == 'o') goto yy190;
	goto yy9;
yy166:
	yych = *++cur;
	if (yych == 'e') goto yy191;
	goto yy9;
yy167:
	yych = *++cur;
	if (yych == 'o') goto yy192;
	goto yy9;
yy168:
	++cur;
	cur = yyt1;
#line 263 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 1022 "src/parse/lexer.cc"
yy169:
	yych = *++cur;
	if (yych == '}') goto yy168;
	goto yy9;
yy170:
	yych = *++cur;
	if (yych == '/') goto yy168;
	goto yy9;
yy171:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy193;
	if (yych == ' ') goto yy193;
yy172:
#line 259 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur("ill-formed `include` block: expected filename in quotes"));
    }
#line 1041 "src/parse/lexer.cc"
yy173:
	yych = *++cur;
	if (yych == 'c') goto yy194;
	goto yy9;
yy174:
	yych = *++cur;
	if (yych == 'i') goto yy195;
	goto yy9;
yy175:
	yych = *++cur;
	if (yych == 't') goto yy196;
	goto yy9;
yy176:
	yych = *++cur;
	if (yych == ':') goto yy197;
	goto yy9;
yy177:
	yych = *++cur;
	if (yych == ':') goto yy198;
	goto yy9;
yy178:
	yych = *++cur;
	if (yych == 'e') goto yy199;
	goto yy9;
yy179:
	yych = *++cur;
	if (yych == 'r') goto yy200;
	goto yy9;
yy180:
	yych = *++cur;
	if (yych == '2') goto yy201;
	goto yy9;
yy181:
	yych = *++cur;
	if (yych == 't') goto yy202;
	goto yy9;
yy182:
	yych = *++cur;
	if (yych == 'r') goto yy203;
	goto yy9;
yy183:
	yych = *++cur;
	if (yych == 'r') goto yy204;
	goto yy9;
yy184:
	yych = *++cur;
	if (yych == 'r') goto yy205;
	goto yy9;
yy185:
	yych = *++cur;
	if (yych == 'r') goto yy206;
	goto yy9;
yy186:
	yych = *++cur;
	if (yych == 'r') goto yy207;
	goto yy9;
yy187:
	yych = *++cur;
	if (yych == 'r') goto yy208;
	goto yy9;
yy188:
	yych = *++cur;
	if (yych == '2') goto yy209;
	goto yy9;
yy189:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy189;
	}
	if (yych <= '\n') goto yy9;
	if (yych <= '"') goto yy210;
	goto yy211;
yy190:
	yych = *++cur;
	if (yych == 'n') goto yy212;
	goto yy9;
yy191:
	++cur;
#line 220 "../src/parse/lexer.re"
	{
        out.state_goto = true;
        if (!opts->storable_state) {
            RET_FAIL(error_at_cur("`getstate` without `-f --storable-state` option"));
        } else if (opts->code_model == CodeModel::LOOP_SWITCH) {
            RET_FAIL(error_at_cur(
                    "`getstate` is incompatible with --loop-switch code model, it requires"
                    " cross-block `goto` transitions or function calls"));
        }
        CHECK_RET(lex_special_block(out, CodeKind::STATE_GOTO, 0));
        goto next;
    }
#line 1135 "src/parse/lexer.cc"
yy192:
	yych = *++cur;
	if (yych == 'f') goto yy213;
	if (yych == 'n') goto yy214;
	goto yy9;
yy193:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy193;
		goto yy9;
	} else {
		if (yych <= ' ') goto yy193;
		if (yych == '"') {
			yyt1 = cur;
			goto yy215;
		}
		goto yy9;
	}
yy194:
	yych = *++cur;
	if (yych == 'h') goto yy216;
	goto yy9;
yy195:
	yych = *++cur;
	if (yych == 'o') goto yy217;
	goto yy9;
yy196:
	yych = *++cur;
	if (yych == 'e') goto yy218;
	goto yy9;
yy197:
	yych = *++cur;
	if (yych == 'r') goto yy219;
	goto yy9;
yy198:
	yych = *++cur;
	if (yych == 'r') goto yy220;
	goto yy9;
yy199:
	yych = *++cur;
	if (yych == ':') goto yy221;
	goto yy9;
yy200:
	yych = *++cur;
	if (yych == 'e') goto yy222;
	goto yy9;
yy201:
	yych = *++cur;
	if (yych == 'c') goto yy223;
	goto yy9;
yy202:
	yych = *++cur;
	if (yych == 'c') goto yy224;
	goto yy9;
yy203:
	yych = *++cur;
	if (yych == 'e') goto yy225;
	goto yy9;
yy204:
	yych = *++cur;
	if (yych == 'e') goto yy226;
	goto yy9;
yy205:
	yych = *++cur;
	if (yych == 'e') goto yy227;
	goto yy9;
yy206:
	yych = *++cur;
	if (yych == 'e') goto yy228;
	goto yy9;
yy207:
	yych = *++cur;
	if (yych == 'e') goto yy229;
	goto yy9;
yy208:
	yych = *++cur;
	if (yych == 'e') goto yy230;
	goto yy9;
yy209:
	yych = *++cur;
	if (yych == 'c') goto yy64;
	goto yy9;
yy210:
	yych = *++cur;
	if (yych == '\n') goto yy163;
	if (yych == '\r') goto yy164;
	goto yy9;
yy211:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy189;
yy212:
	yych = *++cur;
	if (yych == 's') goto yy231;
	goto yy9;
yy213:
	yych = *++cur;
	if (yych == 'f') goto yy232;
	goto yy9;
yy214:
	++cur;
#line 233 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1250 "src/parse/lexer.cc"
yy215:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy9;
		if (yych == '\n') goto yy9;
		goto yy215;
	} else {
		if (yych <= '"') goto yy233;
		if (yych == '\\') goto yy234;
		goto yy215;
	}
yy216:
	++cur;
#line 183 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_special_block(out, CodeKind::MAXNMATCH, DCONF_FORMAT));
        goto next;
    }
#line 1271 "src/parse/lexer.cc"
yy217:
	yych = *++cur;
	if (yych == 'n') goto yy136;
	goto yy9;
yy218:
	yych = *++cur;
	if (yych == ':') goto yy235;
	goto yy9;
yy219:
	yych = *++cur;
	if (yych == 'e') goto yy236;
	goto yy9;
yy220:
	yych = *++cur;
	if (yych == 'e') goto yy237;
	goto yy9;
yy221:
	yych = *++cur;
	if (yych == 'r') goto yy238;
	goto yy9;
yy222:
	yych = *++cur;
	if (yych == '2') goto yy239;
	goto yy9;
yy223:
	++cur;
	goto yy58;
yy224:
	yych = *++cur;
	if (yych == 'h') goto yy240;
	goto yy9;
yy225:
	yych = *++cur;
	if (yych == '2') goto yy241;
	goto yy9;
yy226:
	yych = *++cur;
	if (yych == '2') goto yy242;
	goto yy9;
yy227:
	yych = *++cur;
	if (yych == '2') goto yy243;
	goto yy9;
yy228:
	yych = *++cur;
	if (yych == '2') goto yy244;
	goto yy9;
yy229:
	yych = *++cur;
	if (yych == '2') goto yy245;
	goto yy9;
yy230:
	yych = *++cur;
	if (yych == '2') goto yy246;
	goto yy9;
yy231:
	++cur;
#line 212 "../src/parse/lexer.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_special_block(out, CodeKind::COND_ENUM, allow));
        goto next;
    }
#line 1337 "src/parse/lexer.cc"
yy232:
	++cur;
#line 241 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        out.header_mode(false);
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1348 "src/parse/lexer.cc"
yy233:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy9;
			yyt2 = cur;
			goto yy247;
		} else {
			if (yych == '\r') {
				yyt2 = cur;
				goto yy247;
			}
			goto yy9;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy247;
			}
			if (yych <= '$') goto yy9;
			yyt2 = cur;
			goto yy248;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy249;
			}
			goto yy9;
		}
	}
yy234:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy9;
	if (yych == '\n') goto yy9;
	goto yy215;
yy235:
	yych = *++cur;
	if (yych == 'r') goto yy250;
	goto yy9;
yy236:
	yych = *++cur;
	if (yych == '2') goto yy251;
	goto yy9;
yy237:
	yych = *++cur;
	if (yych == '2') goto yy252;
	goto yy9;
yy238:
	yych = *++cur;
	if (yych == 'e') goto yy253;
	goto yy9;
yy239:
	yych = *++cur;
	if (yych == 'c') goto yy115;
	goto yy9;
yy240:
	yych = *++cur;
	if (yych == ':') goto yy254;
	goto yy9;
yy241:
	yych = *++cur;
	if (yych == 'c') goto yy117;
	goto yy9;
yy242:
	yych = *++cur;
	if (yych == 'c') goto yy118;
	goto yy9;
yy243:
	yych = *++cur;
	if (yych == 'c') goto yy119;
	goto yy9;
yy244:
	yych = *++cur;
	if (yych == 'c') goto yy120;
	goto yy9;
yy245:
	yych = *++cur;
	if (yych == 'c') goto yy121;
	goto yy9;
yy246:
	yych = *++cur;
	if (yych == 'c') goto yy231;
	goto yy9;
yy247:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 252 "../src/parse/lexer.re"
	{
        out.gen_raw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1448 "src/parse/lexer.cc"
yy248:
	yych = *++cur;
	if (yych == '}') goto yy247;
	goto yy9;
yy249:
	yych = *++cur;
	if (yych == '/') goto yy247;
	goto yy9;
yy250:
	yych = *++cur;
	if (yych == 'e') goto yy255;
	goto yy9;
yy251:
	yych = *++cur;
	if (yych == 'c') goto yy141;
	goto yy9;
yy252:
	yych = *++cur;
	if (yych == 'c') goto yy143;
	goto yy9;
yy253:
	yych = *++cur;
	if (yych == '2') goto yy256;
	goto yy9;
yy254:
	yych = *++cur;
	if (yych == 'r') goto yy257;
	goto yy9;
yy255:
	yych = *++cur;
	if (yych == '2') goto yy258;
	goto yy9;
yy256:
	yych = *++cur;
	if (yych == 'c') goto yy171;
	goto yy9;
yy257:
	yych = *++cur;
	if (yych == 'e') goto yy259;
	goto yy9;
yy258:
	yych = *++cur;
	if (yych == 'c') goto yy191;
	goto yy9;
yy259:
	yych = *++cur;
	if (yych != '2') goto yy9;
	yych = *++cur;
	if (yych == 'c') goto yy216;
	goto yy9;
}
#line 295 "../src/parse/lexer.re"

}

#undef RET_BLOCK

Ret Input::lex_opt_name(std::string& name) {
    tok = cur;

#line 1509 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy261;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy262;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy262;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy262;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy263;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy265;
			}
			if (yych == ':') goto yy266;
		}
	}
yy261:
#line 303 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a block name, or the end of block"));
    }
#line 1586 "src/parse/lexer.cc"
yy262:
	++cur;
	cur = yyt1;
#line 309 "../src/parse/lexer.re"
	{ name.clear();              return Ret::OK; }
#line 1592 "src/parse/lexer.cc"
yy263:
	yych = *++cur;
	if (yych == '}') goto yy262;
yy264:
	cur = mar;
	goto yy261;
yy265:
	yych = *++cur;
	if (yych == '/') goto yy262;
	goto yy264;
yy266:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy264;
		if (yych >= '[') goto yy264;
	} else {
		if (yych == '`') goto yy264;
		if (yych >= '{') goto yy264;
	}
yy267:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy267;
	}
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy264;
			yyt1 = cur;
		} else {
			if (yych != '\r') goto yy264;
			yyt1 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy268;
			}
			if (yych <= '$') goto yy264;
			yyt1 = cur;
			goto yy269;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy270;
			}
			goto yy264;
		}
	}
yy268:
	++cur;
	cur = yyt1;
#line 310 "../src/parse/lexer.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1649 "src/parse/lexer.cc"
yy269:
	yych = *++cur;
	if (yych == '}') goto yy268;
	goto yy264;
yy270:
	yych = *++cur;
	if (yych == '/') goto yy268;
	goto yy264;
}
#line 311 "../src/parse/lexer.re"

}

Ret Input::lex_name_list(BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1668 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy272;
			if (yych <= '\n') {
				yyt1 = cur;
				goto yy273;
			}
		} else {
			if (yych <= '\r') {
				yyt1 = cur;
				goto yy273;
			}
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy273;
			}
		}
	} else {
		if (yych <= ')') {
			if (yych == '%') {
				yyt1 = cur;
				goto yy274;
			}
		} else {
			if (yych <= '*') {
				yyt1 = cur;
				goto yy276;
			}
			if (yych == ':') goto yy277;
		}
	}
yy272:
#line 319 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
                "ill-formed start of a block: expected a space, a newline, a colon "
                "followed by a list of colon-separated block names, or the end of block"));
    }
#line 1745 "src/parse/lexer.cc"
yy273:
	++cur;
	cur = yyt1;
#line 325 "../src/parse/lexer.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1751 "src/parse/lexer.cc"
yy274:
	yych = *++cur;
	if (yych == '}') goto yy273;
yy275:
	cur = mar;
	goto yy272;
yy276:
	yych = *++cur;
	if (yych == '/') goto yy273;
	goto yy275;
yy277:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy275;
		if (yych >= '[') goto yy275;
	} else {
		if (yych == '`') goto yy275;
		if (yych >= '{') goto yy275;
	}
yy278:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy278;
	}
#line 327 "../src/parse/lexer.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(error_at_cur("duplicate block `%s` on the list", p->name));
            }
        }

        goto loop;
    }
#line 1795 "src/parse/lexer.cc"
}
#line 343 "../src/parse/lexer.re"

}

Ret Input::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1804 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy282;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy280;
		if (yych <= '\n') goto yy283;
		if (yych >= '\r') goto yy284;
	} else {
		if (yych <= '%') {
			if (yych >= '%') goto yy285;
		} else {
			if (yych == '*') goto yy286;
		}
	}
yy280:
	++cur;
yy281:
#line 349 "../src/parse/lexer.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional whitespaces followed by the end of block"));
    }
#line 1866 "src/parse/lexer.cc"
yy282:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy282;
	}
#line 360 "../src/parse/lexer.re"
	{ goto loop; }
#line 1876 "src/parse/lexer.cc"
yy283:
	++cur;
#line 361 "../src/parse/lexer.re"
	{ next_line(); multiline = true; goto loop; }
#line 1881 "src/parse/lexer.cc"
yy284:
	yych = *++cur;
	if (yych == '\n') goto yy283;
	goto yy281;
yy285:
	yych = *++cur;
	if (yych == '}') goto yy287;
	goto yy281;
yy286:
	yych = *++cur;
	if (yych != '/') goto yy281;
yy287:
	++cur;
#line 354 "../src/parse/lexer.re"
	{
        if (multiline && globopts->line_dirs) {
            out.gen_stmt(code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1902 "src/parse/lexer.cc"
}
#line 362 "../src/parse/lexer.re"

}

Ret Input::lex_special_block(Output& out, CodeKind kind, uint32_t mask) {
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;

    out.gen_raw(tok, ptr, globopts->line_dirs);
    CHECK_RET(lex_name_list(&blocks));

loop: 
#line 1916 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy291;
	}
	if (yych <= '%') {
		if (yych <= '\f') {
			if (yych <= 0x08) goto yy289;
			if (yych <= '\n') goto yy292;
		} else {
			if (yych <= '\r') goto yy293;
			if (yych >= '%') goto yy294;
		}
	} else {
		if (yych <= 'e') {
			if (yych == '*') goto yy295;
		} else {
			if (yych <= 'f') goto yy296;
			if (yych == 's') goto yy297;
		}
	}
yy289:
	++cur;
yy290:
#line 373 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_cur(
            "ill-formed block: expected optional configurations followed by the end of block"));
    }
#line 1982 "src/parse/lexer.cc"
yy291:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy291;
	}
#line 396 "../src/parse/lexer.re"
	{ goto loop; }
#line 1992 "src/parse/lexer.cc"
yy292:
	++cur;
#line 398 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 1997 "src/parse/lexer.cc"
yy293:
	yych = *++cur;
	if (yych == '\n') goto yy292;
	goto yy290;
yy294:
	yych = *++cur;
	if (yych == '}') goto yy298;
	goto yy290;
yy295:
	yych = *++cur;
	if (yych == '/') goto yy298;
	goto yy290;
yy296:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy299;
	goto yy290;
yy297:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy301;
	goto yy290;
yy298:
	++cur;
#line 400 "../src/parse/lexer.re"
	{
        if (globopts->line_dirs) out.gen_stmt(code_line_info_output(alc));
        out.gen_stmt(code_fmt(alc, kind, blocks, fmt, sep));
        if (globopts->line_dirs) out.gen_stmt(code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 2027 "src/parse/lexer.cc"
yy299:
	yych = *++cur;
	if (yych == 'r') goto yy302;
yy300:
	cur = mar;
	goto yy290;
yy301:
	yych = *++cur;
	if (yych == 'p') goto yy303;
	goto yy300;
yy302:
	yych = *++cur;
	if (yych == 'm') goto yy304;
	goto yy300;
yy303:
	yych = *++cur;
	if (yych == 'a') goto yy305;
	goto yy300;
yy304:
	yych = *++cur;
	if (yych == 'a') goto yy306;
	goto yy300;
yy305:
	yych = *++cur;
	if (yych == 'r') goto yy307;
	goto yy300;
yy306:
	yych = *++cur;
	if (yych == 't') goto yy308;
	goto yy300;
yy307:
	yych = *++cur;
	if (yych == 'a') goto yy309;
	goto yy300;
yy308:
	++cur;
#line 378 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        fmt = copystr(tmp_str, alc);
        goto loop;
    }
#line 2073 "src/parse/lexer.cc"
yy309:
	yych = *++cur;
	if (yych != 't') goto yy300;
	yych = *++cur;
	if (yych != 'o') goto yy300;
	yych = *++cur;
	if (yych != 'r') goto yy300;
	++cur;
#line 387 "../src/parse/lexer.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(error_at_cur("unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string_legacy());
        sep = copystr(tmp_str, alc);
        goto loop;
    }
#line 2091 "src/parse/lexer.cc"
}
#line 406 "../src/parse/lexer.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Input::lex_block(RE2C_STYPE* yylval, Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 2105 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy313;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy311;
				if (yych <= '\n') goto yy314;
				if (yych >= '\r') goto yy316;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy317;
				} else {
					if (yych <= '"') goto yy319;
					if (yych <= '#') goto yy320;
					goto yy321;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy322;
				} else {
					if (yych <= '\'') goto yy323;
					if (yych <= ')') goto yy321;
					goto yy324;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy321;
				} else {
					if (yych <= '.') goto yy325;
					if (yych <= '/') goto yy326;
					goto yy327;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy328;
				if (yych <= ';') goto yy321;
				if (yych <= '<') goto yy329;
				goto yy330;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy321;
				} else {
					if (yych <= '@') goto yy320;
					if (yych <= 'Z') goto yy331;
					goto yy333;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy321;
				} else {
					if (yych != '`') goto yy331;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy334;
					goto yy331;
				} else {
					if (yych <= '{') goto yy335;
					if (yych <= '|') goto yy321;
				}
			}
		}
	}
yy311:
	++cur;
yy312:
#line 556 "../src/parse/lexer.re"
	{
        if (globopts->flex_syntax && globopts->input_encoding == Enc::Type::UTF8) {
            // Try to lex this as a raw UTF-8 code point (not captured by the `name` rule above
            // because it is restricted to alphanumeric ASCII characters and underscore).
            --cur;
            uint32_t c;
            CHECK_RET(lex_cls_chr(c));
            ast.temp_chars.push_back({c, tok_loc()});
            yylval->regexp = ast.str(tok_loc(), false);
            RET_TOK(TOKEN_REGEXP);
        }
        RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
    }
#line 2233 "src/parse/lexer.cc"
yy313:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy313;
	}
#line 543 "../src/parse/lexer.re"
	{ goto scan; }
#line 2243 "src/parse/lexer.cc"
yy314:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '#') goto yy339;
	}
yy315:
#line 547 "../src/parse/lexer.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 2263 "src/parse/lexer.cc"
yy316:
	yych = *++cur;
	if (yych == '\n') goto yy314;
	goto yy312;
yy317:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == 'i') goto yy340;
	if (yych == 'u') goto yy341;
yy318:
#line 443 "../src/parse/lexer.re"
	{ RET_TOK(*tok); }
#line 2276 "src/parse/lexer.cc"
yy319:
	++cur;
#line 434 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2281 "src/parse/lexer.cc"
yy320:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy312;
		if (yych <= 'Z') goto yy342;
		goto yy312;
	} else {
		if (yych == '`') goto yy312;
		if (yych <= 'z') goto yy342;
		goto yy312;
	}
yy321:
	++cur;
	goto yy318;
yy322:
	yych = *++cur;
	if (yych == '}') goto yy344;
	goto yy312;
yy323:
	++cur;
#line 433 "../src/parse/lexer.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2304 "src/parse/lexer.cc"
yy324:
	yych = *++cur;
	if (yych == '/') goto yy344;
	goto yy318;
yy325:
	++cur;
#line 541 "../src/parse/lexer.re"
	{ yylval->regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 2313 "src/parse/lexer.cc"
yy326:
	yych = *++cur;
	if (yych == '*') goto yy345;
	if (yych == '/') goto yy346;
	goto yy318;
yy327:
	++cur;
#line 508 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("unexpected character: '%c'", *tok));
        }
        ast.temp_chars.push_back({*tok, tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2330 "src/parse/lexer.cc"
yy328:
	yych = *++cur;
	if (yych == '=') goto yy347;
	goto yy312;
yy329:
	++cur;
#line 426 "../src/parse/lexer.re"
	{ return lex_clist(ast, token); }
#line 2339 "src/parse/lexer.cc"
yy330:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy349;
	goto yy318;
yy331:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy332:
	if (yybm[0+yych] & 32) {
		goto yy331;
	}
#line 487 "../src/parse/lexer.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->flex_syntax || yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval->cstr = ast.cstr_local(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval->regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 2374 "src/parse/lexer.cc"
yy333:
	yych = *++cur;
	if (yych == '^') goto yy350;
#line 435 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, false, yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2380 "src/parse/lexer.cc"
yy334:
	yych = *++cur;
	if (yych == 'e') goto yy351;
	goto yy332;
yy335:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy354;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy352;
		if (yych >= 'A') goto yy355;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy355;
		} else {
			if (yych <= '`') goto yy336;
			if (yych <= 'z') goto yy355;
		}
	}
yy336:
#line 418 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_in_braces(yylval, ast)); RET_TOK(TOKEN_CODE); }
#line 2405 "src/parse/lexer.cc"
yy337:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '#') goto yy339;
	}
yy338:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy315;
			} else {
				goto yy318;
			}
		} else {
			if (yyaccept == 2) {
				goto yy336;
			} else {
				goto yy348;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy353;
			} else {
				goto yy368;
			}
		} else {
			goto yy387;
		}
	}
yy339:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy339;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy339;
		if (yych == 'l') goto yy356;
		goto yy338;
	}
yy340:
	yych = *++cur;
	if (yych == 'n') goto yy357;
	goto yy338;
yy341:
	yych = *++cur;
	if (yych == 's') goto yy358;
	goto yy338;
yy342:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy343;
		if (yych <= '9') goto yy342;
		if (yych >= 'A') goto yy342;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy342;
		} else {
			if (yych <= '`') goto yy343;
			if (yych <= 'z') goto yy342;
		}
	}
yy343:
#line 438 "../src/parse/lexer.re"
	{
        yylval->regexp = ast.tag(tok_loc(), ast.cstr_global(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2485 "src/parse/lexer.cc"
yy344:
	++cur;
#line 431 "../src/parse/lexer.re"
	{ tok = cur; RET_TOK(0); }
#line 2490 "src/parse/lexer.cc"
yy345:
	++cur;
#line 429 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2495 "src/parse/lexer.cc"
yy346:
	++cur;
#line 428 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2500 "src/parse/lexer.cc"
yy347:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy349;
yy348:
#line 419 "../src/parse/lexer.re"
	{ CHECK_RET(lex_code_indented(yylval, ast));  RET_TOK(TOKEN_CODE); }
#line 2508 "src/parse/lexer.cc"
yy349:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy338;
			goto yy349;
		} else {
			if (yych == ' ') goto yy349;
			goto yy338;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy359;
			}
			if (yych <= '^') goto yy338;
			yyt1 = cur;
			goto yy359;
		} else {
			if (yych <= '`') goto yy338;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy359;
			}
			goto yy338;
		}
	}
yy350:
	++cur;
#line 436 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval->regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2543 "src/parse/lexer.cc"
yy351:
	yych = *++cur;
	if (yych == '2') goto yy361;
	goto yy332;
yy352:
	++cur;
yy353:
#line 472 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers"));
    }
#line 2556 "src/parse/lexer.cc"
yy354:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy354;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy362;
	}
	if (yych == '}') goto yy363;
	goto yy338;
yy355:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy338;
			goto yy355;
		} else {
			if (yych <= '@') goto yy338;
			if (yych <= 'Z') goto yy355;
			goto yy338;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy338;
			goto yy355;
		} else {
			if (yych == '}') goto yy364;
			goto yy338;
		}
	}
yy356:
	yych = *++cur;
	if (yych == 'i') goto yy365;
	goto yy338;
yy357:
	yych = *++cur;
	if (yych == 'c') goto yy366;
	goto yy338;
yy358:
	yych = *++cur;
	if (yych == 'e') goto yy367;
	goto yy338;
yy359:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy360;
		if (yych <= '9') goto yy359;
		if (yych >= 'A') goto yy359;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy359;
		} else {
			if (yych <= '`') goto yy360;
			if (yych <= 'z') goto yy359;
		}
	}
yy360:
	p = yyt1;
#line 421 "../src/parse/lexer.re"
	{
        yylval->cstr = ast.cstr_global(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2627 "src/parse/lexer.cc"
yy361:
	yych = *++cur;
	if (yych == 'c') goto yy369;
	goto yy332;
yy362:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy353;
	if (yych <= '9') goto yy370;
	if (yych == '}') goto yy371;
	goto yy353;
yy363:
	++cur;
#line 445 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition count overflow"));
        }
        yylval->bounds.max = yylval->bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2649 "src/parse/lexer.cc"
yy364:
	++cur;
#line 477 "../src/parse/lexer.re"
	{
        if (!globopts->flex_syntax) {
            RET_FAIL(error_at_tok("curly braces for names only allowed with -F switch"));
        }
        yylval->cstr = ast.cstr_local(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2660 "src/parse/lexer.cc"
yy365:
	yych = *++cur;
	if (yych == 'n') goto yy372;
	goto yy338;
yy366:
	yych = *++cur;
	if (yych == 'l') goto yy373;
	goto yy338;
yy367:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy374;
yy368:
#line 534 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed use directive: expected `!use` followed by a colon, a block name,"
                " optional spaces, a semicolon, and finally a space, a newline, or the end of"
                " block"));
    }
#line 2681 "src/parse/lexer.cc"
yy369:
	yych = *++cur;
	if (yych == ':') goto yy375;
	goto yy332;
yy370:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy338;
	if (yych <= '9') goto yy370;
	if (yych == '}') goto yy376;
	goto yy338;
yy371:
	++cur;
#line 464 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        }
        yylval->bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2704 "src/parse/lexer.cc"
yy372:
	yych = *++cur;
	if (yych == 'e') goto yy377;
	goto yy338;
yy373:
	yych = *++cur;
	if (yych == 'u') goto yy378;
	goto yy338;
yy374:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy338;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy379;
		}
		goto yy338;
	} else {
		if (yych == '`') goto yy338;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy379;
		}
		goto yy338;
	}
yy375:
	++cur;
#line 485 "../src/parse/lexer.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2734 "src/parse/lexer.cc"
yy376:
	++cur;
	p = yyt1;
#line 453 "../src/parse/lexer.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval->bounds.min)) {
            RET_FAIL(error_at_tok("repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval->bounds.max)) {
            RET_FAIL(error_at_tok("repetition upper bound overflow"));
        } else if (yylval->bounds.min > yylval->bounds.max) {
            RET_FAIL(error_at_tok("repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2749 "src/parse/lexer.cc"
yy377:
	yych = *++cur;
	if (yych <= '0') goto yy381;
	if (yych <= '9') goto yy338;
	goto yy381;
yy378:
	yych = *++cur;
	if (yych == 'd') goto yy382;
	goto yy338;
yy379:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy383;
			}
			goto yy338;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy383;
			}
			if (yych <= '/') goto yy338;
			if (yych <= '9') goto yy379;
			goto yy338;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy384;
			}
			if (yych <= '@') goto yy338;
			if (yych <= 'Z') goto yy379;
			goto yy338;
		} else {
			if (yych == '`') goto yy338;
			if (yych <= 'z') goto yy379;
			goto yy338;
		}
	}
yy380:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy381:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy380;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy380;
		if (yych <= '0') goto yy338;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy385;
		}
		goto yy338;
	}
yy382:
	yych = *++cur;
	if (yych == 'e') goto yy386;
	goto yy338;
yy383:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy383;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy383;
		if (yych != ';') goto yy338;
	}
yy384:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy338;
			yyt3 = cur;
			goto yy388;
		} else {
			if (yych == '\r') {
				yyt3 = cur;
				goto yy388;
			}
			goto yy338;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy388;
			}
			if (yych <= '$') goto yy338;
			yyt3 = cur;
			goto yy389;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy390;
			}
			goto yy338;
		}
	}
yy385:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy338;
			goto yy391;
		} else {
			if (yych <= '\n') goto yy392;
			if (yych <= '\f') goto yy338;
			goto yy393;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy338;
			goto yy391;
		} else {
			if (yych <= '/') goto yy338;
			if (yych <= '9') goto yy385;
			goto yy338;
		}
	}
yy386:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy394;
	if (yych == ' ') goto yy394;
yy387:
#line 521 "../src/parse/lexer.re"
	{
        RET_FAIL(error_at_tok(
                "ill-formed include directive: expected `!include` followed by spaces, a"
                " double-quoted file path, optional spaces, a semicolon, and finally a space, a"
                " newline, or the end of block"));
    }
#line 2893 "src/parse/lexer.cc"
yy388:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 528 "../src/parse/lexer.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2906 "src/parse/lexer.cc"
yy389:
	yych = *++cur;
	if (yych == '}') goto yy388;
	goto yy338;
yy390:
	yych = *++cur;
	if (yych == '/') goto yy388;
	goto yy338;
yy391:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy391;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy391;
		if (yych == '"') goto yy395;
		goto yy338;
	}
yy392:
	++cur;
	cur = yyt1;
#line 545 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2932 "src/parse/lexer.cc"
yy393:
	yych = *++cur;
	if (yych == '\n') goto yy392;
	goto yy338;
yy394:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy394;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy394;
		if (yych == '"') {
			yyt1 = cur;
			goto yy396;
		}
		goto yy338;
	}
yy395:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy395;
	}
	if (yych <= '\n') goto yy338;
	if (yych <= '"') goto yy397;
	goto yy398;
yy396:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy338;
		if (yych == '\n') goto yy338;
		goto yy396;
	} else {
		if (yych <= '"') goto yy399;
		if (yych == '\\') goto yy400;
		goto yy396;
	}
yy397:
	yych = *++cur;
	if (yych == '\n') goto yy392;
	if (yych == '\r') goto yy393;
	goto yy338;
yy398:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy338;
	if (yych == '\n') goto yy338;
	goto yy395;
yy399:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy401;
		}
		goto yy338;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy401;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy402;
		}
		goto yy338;
	}
yy400:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy338;
	if (yych == '\n') goto yy338;
	goto yy396;
yy401:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy401;
		goto yy338;
	} else {
		if (yych <= ' ') goto yy401;
		if (yych != ';') goto yy338;
	}
yy402:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych <= 0x08) goto yy338;
			yyt3 = cur;
		} else {
			if (yych != '\r') goto yy338;
			yyt3 = cur;
		}
	} else {
		if (yych <= '%') {
			if (yych <= ' ') {
				yyt3 = cur;
				goto yy403;
			}
			if (yych <= '$') goto yy338;
			yyt3 = cur;
			goto yy404;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy405;
			}
			goto yy338;
		}
	}
yy403:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 517 "../src/parse/lexer.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 3061 "src/parse/lexer.cc"
yy404:
	yych = *++cur;
	if (yych == '}') goto yy403;
	goto yy338;
yy405:
	yych = *++cur;
	if (yych == '/') goto yy403;
	goto yy338;
}
#line 569 "../src/parse/lexer.re"

}

#undef RET_TOK

Ret Input::lex_namedef_context_re2c(bool& yes) {

#line 3079 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy408;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy408;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy410;
		}
	}
yy407:
#line 577 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3136 "src/parse/lexer.cc"
yy408:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy408;
	}
	if (yych == '=') goto yy410;
yy409:
	cur = mar;
	goto yy407;
yy410:
	yych = *++cur;
	if (yych == '>') goto yy409;
	++cur;
	cur = yyt1;
#line 576 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3155 "src/parse/lexer.cc"
}
#line 578 "../src/parse/lexer.re"

}

Ret Input::lex_namedef_context_flex(bool& yes) {

#line 3163 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy412;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy412;
	}
#line 585 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3212 "src/parse/lexer.cc"
yy412:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy412;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy413;
	} else {
		if (yych <= '=') goto yy413;
		if (yych == '{') goto yy413;
	}
	cur = yyt1;
#line 584 "../src/parse/lexer.re"
	{ yes = true;  return Ret::OK; }
#line 3229 "src/parse/lexer.cc"
yy413:
	++cur;
	cur = yyt1;
#line 583 "../src/parse/lexer.re"
	{ yes = false; return Ret::OK; }
#line 3235 "src/parse/lexer.cc"
}
#line 586 "../src/parse/lexer.re"

}

Ret Input::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 3247 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy414;
yy415:
	++cur;
yy414:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy415;
	}
	if (yych <= 0x1F) goto yy416;
	if (yych <= '!') goto yy417;
	if (yych == '>') goto yy418;
yy416:
#line 597 "../src/parse/lexer.re"
	{ goto cond; }
#line 3299 "src/parse/lexer.cc"
yy417:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy417;
	if (yych == ' ') goto yy417;
#line 595 "../src/parse/lexer.re"
	{ token = TOKEN_CSETUP; goto cond; }
#line 3308 "src/parse/lexer.cc"
yy418:
	++cur;
#line 596 "../src/parse/lexer.re"
	{ token = TOKEN_CZERO;  goto end; }
#line 3313 "src/parse/lexer.cc"
}
#line 598 "../src/parse/lexer.re"

cond:
    tok = cur;

#line 3320 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy421;
		if (yych >= 'A') goto yy422;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy422;
		} else {
			if (yych <= '`') goto yy420;
			if (yych <= 'z') goto yy422;
		}
	}
yy420:
	++cur;
#line 604 "../src/parse/lexer.re"
	{ goto error; }
#line 3374 "src/parse/lexer.cc"
yy421:
	++cur;
#line 603 "../src/parse/lexer.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 3379 "src/parse/lexer.cc"
yy422:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy422;
	}
#line 602 "../src/parse/lexer.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 3389 "src/parse/lexer.cc"
}
#line 605 "../src/parse/lexer.re"

next: 
#line 3394 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy425;
		if (yych >= ' ') goto yy425;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy426;
		} else {
			if (yych == '>') goto yy427;
		}
	}
	++cur;
yy424:
#line 609 "../src/parse/lexer.re"
	{ goto error; }
#line 3447 "src/parse/lexer.cc"
yy425:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy428;
		if (yych <= 0x1F) goto yy424;
		goto yy428;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy424;
		} else {
			if (yych == '>') goto yy427;
			goto yy424;
		}
	}
yy426:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy426;
	}
#line 607 "../src/parse/lexer.re"
	{ goto cond; }
#line 3471 "src/parse/lexer.cc"
yy427:
	++cur;
#line 608 "../src/parse/lexer.re"
	{ goto end; }
#line 3476 "src/parse/lexer.cc"
yy428:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy428;
		if (yych >= ' ') goto yy428;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy426;
		} else {
			if (yych == '>') goto yy427;
		}
	}
	cur = mar;
	goto yy424;
}
#line 610 "../src/parse/lexer.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(error_at_cur("syntax error in condition list"));
}

Ret Input::process_semact(RE2C_STYPE* yylval, Ast& ast, const uint8_t* p, const uint8_t* q) {
    const char* text = "";
    if (globopts->indentation_sensitive) {
        // Cut off any leading or trailing newlines to make the code uniform.
        while (p <= q && *p == '\n') ++p;
        while (p <= q && *q == '\n') --q;

        if (p <= q) {
            // Split semantic action by newlines (note: last character `*q` is not a newline).
            // Drop blank lines (this simplifies the code below that removes indentation).
            auto is_blank = [](const uint8_t* s, const uint8_t* e) {
                while (s < e && is_space(*s)) ++s;
                return s == e;
            };
            tmp_list.clear();
            for (const uint8_t* s = p; s < q; ++s) {
                if (*s == '\n') {
                    if (!is_blank(p, s)) tmp_list.push_back(std::string(p, s + 1));
                    p = s + 1;
                }
            }
            if (!is_blank(p, q + 1)) tmp_list.push_back(std::string(p, q + 1) + "\n");

            if (!tmp_list.empty()) {
                // Find first line indentation and use it as base indentation.
                const std::string& first = tmp_list[0];
                uint32_t indent = 0;
                while (is_space_nonl(static_cast<uint8_t>(first[indent]))) ++indent;
                std::string indstr = first.substr(0, indent);

                // Cut off base indentation from every line and glue them together.
                tmp_str.clear();
                for (std::string& line: tmp_list) {
                    if (line.compare(0, indent, indstr) == 0) {
                        tmp_str += line.substr(indent, std::string::npos); // remove indent
                    } else {
                        RET_FAIL(error_at_tok("inconsistent indentation in semantic action"));
                    }
                }
                text = copystr(tmp_str, alc);
            }
        }
    } else {
        // copy the entire semantic action verbatim
        text = ast.cstr_global(p, q + 1);
    }

    yylval->semact = ast.sem_act(tok_loc(), text, nullptr, false);
    return Ret::OK;
}

Ret Input::lex_code_indented(RE2C_STYPE* yylval, Ast& ast) {
    tok = cur;
code: 
#line 3558 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy431;
			if (yych >= '\r') goto yy432;
		} else {
			if (yych == '"') goto yy433;
			if (yych >= '\'') goto yy433;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy434;
			if (yych >= '`') goto yy433;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy435;
			} else {
				if (yych == '}') goto yy435;
			}
		}
	}
	++cur;
yy430:
#line 678 "../src/parse/lexer.re"
	{ goto code; }
#line 3587 "src/parse/lexer.cc"
yy431:
	++cur;
#line 673 "../src/parse/lexer.re"
	{ next_line(); goto indent; }
#line 3592 "src/parse/lexer.cc"
yy432:
	yych = *++cur;
	if (yych == '\n') goto yy431;
	goto yy430;
yy433:
	++cur;
#line 676 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3601 "src/parse/lexer.cc"
yy434:
	yych = *++cur;
	if (yych == '*') goto yy436;
	if (yych == '/') goto yy437;
	goto yy430;
yy435:
	++cur;
#line 677 "../src/parse/lexer.re"
	{ RET_FAIL(error_at_cur("Curly braces are not allowed after ':='")); }
#line 3611 "src/parse/lexer.cc"
yy436:
	++cur;
#line 675 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3616 "src/parse/lexer.cc"
yy437:
	++cur;
#line 674 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3621 "src/parse/lexer.cc"
}
#line 679 "../src/parse/lexer.re"

indent: 
#line 3626 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy439;
		if (yych <= '\n') goto yy440;
	} else {
		if (yych <= '\r') goto yy440;
		if (yych == ' ') goto yy440;
	}
yy439:
#line 682 "../src/parse/lexer.re"
	{
        const uint8_t* p = tok, *q = cur - 1;
        if (!globopts->indentation_sensitive) {
            while (p <= q && is_space(*p)) ++p;
            while (p <= q && is_space(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3648 "src/parse/lexer.cc"
yy440:
	++cur;
	cur -= 1;
#line 681 "../src/parse/lexer.re"
	{ goto code; }
#line 3654 "src/parse/lexer.cc"
}
#line 690 "../src/parse/lexer.re"

}

Ret Input::lex_code_in_braces(RE2C_STYPE* yylval, Ast& ast) {
    uint32_t depth = 1;
code: 
#line 3663 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\'') {
		if (yych <= '\r') {
			if (yych == '\n') goto yy443;
			if (yych >= '\r') goto yy445;
		} else {
			if (yych == '"') goto yy446;
			if (yych >= '\'') goto yy446;
		}
	} else {
		if (yych <= '`') {
			if (yych == '/') goto yy447;
			if (yych >= '`') goto yy446;
		} else {
			if (yych <= '{') {
				if (yych >= '{') goto yy448;
			} else {
				if (yych == '}') goto yy449;
			}
		}
	}
	++cur;
yy442:
#line 717 "../src/parse/lexer.re"
	{ goto code; }
#line 3726 "src/parse/lexer.cc"
yy443:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy450;
	}
	if (yych == '#') goto yy452;
yy444:
#line 713 "../src/parse/lexer.re"
	{ next_line(); goto code; }
#line 3736 "src/parse/lexer.cc"
yy445:
	yych = *++cur;
	if (yych == '\n') goto yy443;
	goto yy442;
yy446:
	++cur;
#line 716 "../src/parse/lexer.re"
	{ CHECK_RET(try_lex_literal_in_code(cur[-1])); goto code; }
#line 3745 "src/parse/lexer.cc"
yy447:
	yych = *++cur;
	if (yych == '*') goto yy453;
	if (yych == '/') goto yy454;
	goto yy442;
yy448:
	++cur;
#line 711 "../src/parse/lexer.re"
	{ ++depth; goto code; }
#line 3755 "src/parse/lexer.cc"
yy449:
	++cur;
#line 696 "../src/parse/lexer.re"
	{
        --depth;
        if (depth > 0) goto code;

        const uint8_t* p = tok, *q = cur - 1;
        if (globopts->code_model == CodeModel::REC_FUNC || !globopts->wrap_blocks_in_braces) {
            // Strip curly braces and adjacent whitespace. In rec/func mode it is always safe
            // to do, as the code is in a separate function and won't cause name collisions.
            ++p; --q; // skip '{' and '}'
            while (p <= q && is_space_nonl(*p)) ++p;
            while (p <= q && is_space_nonl(*q)) --q;
        }
        return process_semact(yylval, ast, p, q);
    }
#line 3773 "src/parse/lexer.cc"
yy450:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy450;
	}
	if (yych == '#') goto yy452;
yy451:
	cur = mar;
	goto yy444;
yy452:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy452;
		goto yy451;
	} else {
		if (yych <= ' ') goto yy452;
		if (yych == 'l') goto yy455;
		goto yy451;
	}
yy453:
	++cur;
#line 714 "../src/parse/lexer.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3801 "src/parse/lexer.cc"
yy454:
	++cur;
#line 715 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3806 "src/parse/lexer.cc"
yy455:
	yych = *++cur;
	if (yych != 'i') goto yy451;
	yych = *++cur;
	if (yych != 'n') goto yy451;
	yych = *++cur;
	if (yych != 'e') goto yy451;
	yych = *++cur;
	if (yych <= '0') goto yy457;
	if (yych <= '9') goto yy451;
	goto yy457;
yy456:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy457:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy456;
		goto yy451;
	} else {
		if (yych <= ' ') goto yy456;
		if (yych <= '0') goto yy451;
		if (yych >= ':') goto yy451;
		yyt1 = cur;
	}
yy458:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy458;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy451;
		if (yych <= '\t') goto yy459;
		if (yych <= '\n') goto yy460;
		goto yy451;
	} else {
		if (yych <= '\r') goto yy461;
		if (yych != ' ') goto yy451;
	}
yy459:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy459;
		goto yy451;
	} else {
		if (yych <= ' ') goto yy459;
		if (yych == '"') goto yy462;
		goto yy451;
	}
yy460:
	++cur;
	cur = yyt1;
#line 712 "../src/parse/lexer.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3865 "src/parse/lexer.cc"
yy461:
	yych = *++cur;
	if (yych == '\n') goto yy460;
	goto yy451;
yy462:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy462;
	}
	if (yych <= '\n') goto yy451;
	if (yych >= '#') goto yy463;
	yych = *++cur;
	if (yych == '\n') goto yy460;
	if (yych == '\r') goto yy461;
	goto yy451;
yy463:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy451;
	if (yych == '\n') goto yy451;
	goto yy462;
}
#line 718 "../src/parse/lexer.re"

}

Ret Input::lex_dqstring_in_code() {
loop: 
#line 3897 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy466;
		if (yych >= '\r') goto yy467;
	} else {
		if (yych <= '"') {
			if (yych >= '"') goto yy468;
		} else {
			if (yych == '\\') goto yy469;
		}
	}
	++cur;
yy465:
#line 726 "../src/parse/lexer.re"
	{ goto loop; }
#line 3916 "src/parse/lexer.cc"
yy466:
	++cur;
#line 725 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3921 "src/parse/lexer.cc"
yy467:
	yych = *++cur;
	if (yych == '\n') goto yy466;
	goto yy465;
yy468:
	++cur;
#line 723 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3930 "src/parse/lexer.cc"
yy469:
	yych = *++cur;
	if (yych == '"') goto yy470;
	if (yych != '\\') goto yy465;
yy470:
	++cur;
#line 724 "../src/parse/lexer.re"
	{ goto loop; }
#line 3939 "src/parse/lexer.cc"
}
#line 727 "../src/parse/lexer.re"

}

Ret Input::lex_sqstring_in_code() {
loop: 
#line 3947 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych == '\n') goto yy473;
		if (yych >= '\r') goto yy474;
	} else {
		if (yych <= '\'') {
			if (yych >= '\'') goto yy475;
		} else {
			if (yych == '\\') goto yy476;
		}
	}
	++cur;
yy472:
#line 735 "../src/parse/lexer.re"
	{ goto loop; }
#line 3966 "src/parse/lexer.cc"
yy473:
	++cur;
#line 734 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 3971 "src/parse/lexer.cc"
yy474:
	yych = *++cur;
	if (yych == '\n') goto yy473;
	goto yy472;
yy475:
	++cur;
#line 732 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 3980 "src/parse/lexer.cc"
yy476:
	yych = *++cur;
	if (yych == '\'') goto yy477;
	if (yych != '\\') goto yy472;
yy477:
	++cur;
#line 733 "../src/parse/lexer.re"
	{ goto loop; }
#line 3989 "src/parse/lexer.cc"
}
#line 736 "../src/parse/lexer.re"

}

Ret Input::lex_bqstring_in_code() {
loop: 
#line 3997 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy480;
	} else {
		if (yych <= '\r') goto yy481;
		if (yych == '`') goto yy482;
	}
	++cur;
yy479:
#line 743 "../src/parse/lexer.re"
	{ goto loop; }
#line 4012 "src/parse/lexer.cc"
yy480:
	++cur;
#line 742 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4017 "src/parse/lexer.cc"
yy481:
	yych = *++cur;
	if (yych == '\n') goto yy480;
	goto yy479;
yy482:
	++cur;
#line 741 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4026 "src/parse/lexer.cc"
}
#line 744 "../src/parse/lexer.re"

}

// Generalized rule for char literals (covering various languages).
///
// Char literals may contain closing curly brace, e.g. '}'. We must lex all possible forms of
// char literals, otherwise we might erroneously lex closing single quote as the beginning of
// another literal and overlook a real closing brace (e.g. in 'a'}'b' we might recognize '}'
// as a literal).
//
#line 765 "../src/parse/lexer.re"


Ret Input::lex_sqchar_or_standalone_in_code() {

#line 4044 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy485;
			goto yy487;
		} else {
			if (yych <= 0x7F) goto yy485;
			if (yych >= 0xC2) goto yy488;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy489;
			if (yych <= 0xEF) goto yy490;
			goto yy491;
		} else {
			if (yych <= 0xF3) goto yy492;
			if (yych <= 0xF4) goto yy493;
		}
	}
yy484:
#line 771 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4104 "src/parse/lexer.cc"
yy485:
	yych = *++cur;
	if (yych == '\'') goto yy494;
yy486:
	cur = mar;
	goto yy484;
yy487:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '>') {
			if (yych <= '/') {
				if (yych == '\'') goto yy496;
				goto yy486;
			} else {
				if (yych <= '0') goto yy497;
				if (yych <= '7') goto yy498;
				goto yy486;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '?') goto yy485;
				if (yych <= 'T') goto yy486;
				goto yy499;
			} else {
				if (yych == '\\') goto yy485;
				if (yych <= '`') goto yy486;
				goto yy485;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy485;
				goto yy486;
			} else {
				if (yych <= 'n') goto yy485;
				if (yych <= 'o') goto yy500;
				if (yych <= 'q') goto yy486;
				goto yy485;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy486;
				if (yych <= 't') goto yy485;
				goto yy501;
			} else {
				if (yych <= 'v') goto yy485;
				if (yych == 'x') goto yy502;
				goto yy486;
			}
		}
	}
yy488:
	yych = *++cur;
	if (yych <= 0x7F) goto yy486;
	if (yych <= 0xBF) goto yy485;
	goto yy486;
yy489:
	yych = *++cur;
	if (yych <= 0x9F) goto yy486;
	if (yych <= 0xBF) goto yy488;
	goto yy486;
yy490:
	yych = *++cur;
	if (yych <= 0x7F) goto yy486;
	if (yych <= 0xBF) goto yy488;
	goto yy486;
yy491:
	yych = *++cur;
	if (yych <= 0x8F) goto yy486;
	if (yych <= 0xBF) goto yy490;
	goto yy486;
yy492:
	yych = *++cur;
	if (yych <= 0x7F) goto yy486;
	if (yych <= 0xBF) goto yy490;
	goto yy486;
yy493:
	yych = *++cur;
	if (yych <= 0x7F) goto yy486;
	if (yych <= 0x8F) goto yy490;
	goto yy486;
yy494:
	++cur;
yy495:
#line 770 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4192 "src/parse/lexer.cc"
yy496:
	yych = *++cur;
	if (yych == '\'') goto yy494;
	goto yy495;
yy497:
	yych = *++cur;
	if (yych == '\'') goto yy494;
	if (yych <= '/') goto yy486;
	if (yych <= '7') goto yy503;
	goto yy486;
yy498:
	yych = *++cur;
	if (yych <= '/') goto yy486;
	if (yych <= '7') goto yy503;
	goto yy486;
yy499:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy504;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy504;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy504;
		goto yy486;
	}
yy500:
	yych = *++cur;
	if (yych == '{') goto yy505;
	goto yy486;
yy501:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy506;
		if (yych <= '@') goto yy486;
		goto yy506;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy486;
			goto yy506;
		} else {
			if (yych == '{') goto yy507;
			goto yy486;
		}
	}
yy502:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy508;
		if (yych <= '@') goto yy486;
		goto yy508;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy486;
			goto yy508;
		} else {
			if (yych == '{') goto yy507;
			goto yy486;
		}
	}
yy503:
	yych = *++cur;
	if (yych <= '/') goto yy486;
	if (yych <= '7') goto yy485;
	goto yy486;
yy504:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy509;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy509;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy509;
		goto yy486;
	}
yy505:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy510;
	}
	goto yy486;
yy506:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy511;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy511;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy511;
		goto yy486;
	}
yy507:
	yych = *++cur;
	if (yych == '}') goto yy486;
	goto yy513;
yy508:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy485;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy485;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy485;
		goto yy486;
	}
yy509:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy514;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy514;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy514;
		goto yy486;
	}
yy510:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy510;
	}
	if (yych == '}') goto yy485;
	goto yy486;
yy511:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy508;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy508;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy508;
		goto yy486;
	}
yy512:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy513:
	if (yybm[0+yych] & 128) {
		goto yy512;
	}
	if (yych == '}') goto yy485;
	goto yy486;
yy514:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych >= ':') goto yy486;
	} else {
		if (yych <= 'F') goto yy515;
		if (yych <= '`') goto yy486;
		if (yych >= 'g') goto yy486;
	}
yy515:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy486;
		if (yych <= '9') goto yy506;
		goto yy486;
	} else {
		if (yych <= 'F') goto yy506;
		if (yych <= '`') goto yy486;
		if (yych <= 'f') goto yy506;
		goto yy486;
	}
}
#line 772 "../src/parse/lexer.re"

}

Ret Input::lex_bqchar_or_standalone_in_code() {

#line 4379 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 11) if (!fill(11)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy518;
			goto yy520;
		} else {
			if (yych <= 0x7F) goto yy518;
			if (yych >= 0xC2) goto yy521;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy522;
			if (yych <= 0xEF) goto yy523;
			goto yy524;
		} else {
			if (yych <= 0xF3) goto yy525;
			if (yych <= 0xF4) goto yy526;
		}
	}
yy517:
#line 779 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4439 "src/parse/lexer.cc"
yy518:
	yych = *++cur;
	if (yych == '`') goto yy527;
yy519:
	cur = mar;
	goto yy517;
yy520:
	yych = *++cur;
	if (yych <= 'b') {
		if (yych <= '?') {
			if (yych <= '/') {
				if (yych == '\'') goto yy518;
				goto yy519;
			} else {
				if (yych <= '0') goto yy528;
				if (yych <= '7') goto yy529;
				if (yych <= '>') goto yy519;
				goto yy518;
			}
		} else {
			if (yych <= '[') {
				if (yych == 'U') goto yy530;
				goto yy519;
			} else {
				if (yych <= '\\') goto yy518;
				if (yych <= '_') goto yy519;
				if (yych <= '`') goto yy527;
				goto yy518;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy518;
				goto yy519;
			} else {
				if (yych <= 'n') goto yy518;
				if (yych <= 'o') goto yy531;
				if (yych <= 'q') goto yy519;
				goto yy518;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 's') goto yy519;
				if (yych <= 't') goto yy518;
				goto yy532;
			} else {
				if (yych <= 'v') goto yy518;
				if (yych == 'x') goto yy533;
				goto yy519;
			}
		}
	}
yy521:
	yych = *++cur;
	if (yych <= 0x7F) goto yy519;
	if (yych <= 0xBF) goto yy518;
	goto yy519;
yy522:
	yych = *++cur;
	if (yych <= 0x9F) goto yy519;
	if (yych <= 0xBF) goto yy521;
	goto yy519;
yy523:
	yych = *++cur;
	if (yych <= 0x7F) goto yy519;
	if (yych <= 0xBF) goto yy521;
	goto yy519;
yy524:
	yych = *++cur;
	if (yych <= 0x8F) goto yy519;
	if (yych <= 0xBF) goto yy523;
	goto yy519;
yy525:
	yych = *++cur;
	if (yych <= 0x7F) goto yy519;
	if (yych <= 0xBF) goto yy523;
	goto yy519;
yy526:
	yych = *++cur;
	if (yych <= 0x7F) goto yy519;
	if (yych <= 0x8F) goto yy523;
	goto yy519;
yy527:
	++cur;
#line 778 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4527 "src/parse/lexer.cc"
yy528:
	yych = *++cur;
	if (yych <= '/') goto yy519;
	if (yych <= '7') goto yy534;
	if (yych == '`') goto yy527;
	goto yy519;
yy529:
	yych = *++cur;
	if (yych <= '/') goto yy519;
	if (yych <= '7') goto yy534;
	goto yy519;
yy530:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy535;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy535;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy535;
		goto yy519;
	}
yy531:
	yych = *++cur;
	if (yych == '{') goto yy536;
	goto yy519;
yy532:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy537;
		if (yych <= '@') goto yy519;
		goto yy537;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy519;
			goto yy537;
		} else {
			if (yych == '{') goto yy538;
			goto yy519;
		}
	}
yy533:
	yych = *++cur;
	if (yych <= 'F') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy539;
		if (yych <= '@') goto yy519;
		goto yy539;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy519;
			goto yy539;
		} else {
			if (yych == '{') goto yy538;
			goto yy519;
		}
	}
yy534:
	yych = *++cur;
	if (yych <= '/') goto yy519;
	if (yych <= '7') goto yy518;
	goto yy519;
yy535:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy540;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy540;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy540;
		goto yy519;
	}
yy536:
	yych = *++cur;
	if (yybm[0+yych] & 64) {
		goto yy541;
	}
	goto yy519;
yy537:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy542;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy542;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy542;
		goto yy519;
	}
yy538:
	yych = *++cur;
	if (yych == '}') goto yy519;
	goto yy544;
yy539:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy518;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy518;
		goto yy519;
	}
yy540:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy545;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy545;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy545;
		goto yy519;
	}
yy541:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy541;
	}
	if (yych == '}') goto yy518;
	goto yy519;
yy542:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy539;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy539;
		goto yy519;
	}
yy543:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy544:
	if (yybm[0+yych] & 128) {
		goto yy543;
	}
	if (yych == '}') goto yy518;
	goto yy519;
yy545:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych >= ':') goto yy519;
	} else {
		if (yych <= 'F') goto yy546;
		if (yych <= '`') goto yy519;
		if (yych >= 'g') goto yy519;
	}
yy546:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy519;
		if (yych <= '9') goto yy537;
		goto yy519;
	} else {
		if (yych <= 'F') goto yy537;
		if (yych <= '`') goto yy519;
		if (yych <= 'f') goto yy537;
		goto yy519;
	}
}
#line 780 "../src/parse/lexer.re"

}

Ret Input::try_lex_literal_in_code(uint8_t quote) {
    // We need to lex string and char literals in code blocks because they may contain closing
    // brace or newline that would otherwise be erroneously lexed as block terminator symbols.
    switch (quote) {
    case '"':
        return lex_dqstring_in_code();
    case '\'':
        return globopts->single_quoted_strings
            ? lex_sqstring_in_code()
            : lex_sqchar_or_standalone_in_code();
    case '`':
        return globopts->backtick_quoted_strings
            ? lex_bqstring_in_code()
            : lex_bqchar_or_standalone_in_code();
    default:
        return Ret::FAIL;
    }
}

Ret Input::lex_c_comment() {
loop: 
#line 4729 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy549;
	} else {
		if (yych <= '\r') goto yy550;
		if (yych == '*') goto yy551;
	}
	++cur;
yy548:
#line 806 "../src/parse/lexer.re"
	{ goto loop; }
#line 4744 "src/parse/lexer.cc"
yy549:
	++cur;
#line 805 "../src/parse/lexer.re"
	{ next_line(); goto loop; }
#line 4749 "src/parse/lexer.cc"
yy550:
	yych = *++cur;
	if (yych == '\n') goto yy549;
	goto yy548;
yy551:
	yych = *++cur;
	if (yych != '/') goto yy548;
	++cur;
#line 804 "../src/parse/lexer.re"
	{ return Ret::OK; }
#line 4760 "src/parse/lexer.cc"
}
#line 807 "../src/parse/lexer.re"

}

Ret Input::lex_cpp_comment() {
loop: 
#line 4768 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy554;
	if (yych == '\r') goto yy555;
	++cur;
yy553:
#line 813 "../src/parse/lexer.re"
	{ goto loop; }
#line 4779 "src/parse/lexer.cc"
yy554:
	++cur;
#line 812 "../src/parse/lexer.re"
	{ next_line(); return Ret::OK; }
#line 4784 "src/parse/lexer.cc"
yy555:
	yych = *++cur;
	if (yych == '\n') goto yy554;
	goto yy553;
}
#line 814 "../src/parse/lexer.re"

}

Ret Input::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 4801 "src/parse/lexer.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy557;
#line 825 "../src/parse/lexer.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 4809 "src/parse/lexer.cc"
yy557:
	++cur;
#line 824 "../src/parse/lexer.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 4814 "src/parse/lexer.cc"
}
#line 826 "../src/parse/lexer.re"

snd: 
#line 4819 "src/parse/lexer.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy560;
yy559:
#line 828 "../src/parse/lexer.re"
	{ u = l; goto add; }
#line 4828 "src/parse/lexer.cc"
yy560:
	yych = *++cur;
	if (yych != ']') goto yy561;
	cur = mar;
	goto yy559;
yy561:
	++cur;
	cur -= 1;
#line 829 "../src/parse/lexer.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 4846 "src/parse/lexer.cc"
}
#line 837 "../src/parse/lexer.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Input::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 872 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4863 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy564;
	} else {
		if (yych <= '\r') goto yy565;
		if (yych == '\\') goto yy566;
	}
	++cur;
yy563:
#line 854 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 4879 "src/parse/lexer.cc"
yy564:
	++cur;
#line 848 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 4884 "src/parse/lexer.cc"
yy565:
	yych = *++cur;
	if (yych == '\n') goto yy564;
	goto yy563;
yy566:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy567;
				if (yych == '\n') goto yy564;
				goto yy568;
			} else {
				if (yych <= '\r') goto yy570;
				if (yych == '-') goto yy571;
				goto yy568;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy572;
				if (yych <= '7') goto yy574;
				if (yych <= 'T') goto yy568;
				goto yy575;
			} else {
				if (yych == 'X') goto yy577;
				if (yych <= '[') goto yy568;
				goto yy578;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy579;
				if (yych <= '`') goto yy568;
				if (yych <= 'a') goto yy580;
				goto yy581;
			} else {
				if (yych == 'f') goto yy582;
				if (yych <= 'm') goto yy568;
				goto yy583;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy584;
				if (yych <= 's') goto yy568;
				goto yy585;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy577;
					goto yy586;
				} else {
					if (yych == 'x') goto yy587;
					goto yy568;
				}
			}
		}
	}
yy567:
#line 851 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 4945 "src/parse/lexer.cc"
yy568:
	++cur;
yy569:
#line 867 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4955 "src/parse/lexer.cc"
yy570:
	yych = *++cur;
	if (yych == '\n') goto yy564;
	goto yy569;
yy571:
	++cur;
#line 865 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4964 "src/parse/lexer.cc"
yy572:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy573;
	if (yych <= '7') goto yy588;
yy573:
#line 850 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 4973 "src/parse/lexer.cc"
yy574:
	++cur;
	goto yy573;
yy575:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy576;
		if (yych <= '9') goto yy590;
	} else {
		if (yych <= 'F') goto yy590;
		if (yych <= '`') goto yy576;
		if (yych <= 'f') goto yy590;
	}
yy576:
#line 849 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 4991 "src/parse/lexer.cc"
yy577:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy576;
		if (yych <= '9') goto yy591;
		goto yy576;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy576;
		if (yych <= 'f') goto yy591;
		goto yy576;
	}
yy578:
	++cur;
#line 864 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5009 "src/parse/lexer.cc"
yy579:
	++cur;
#line 866 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5014 "src/parse/lexer.cc"
yy580:
	++cur;
#line 857 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5019 "src/parse/lexer.cc"
yy581:
	++cur;
#line 858 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5024 "src/parse/lexer.cc"
yy582:
	++cur;
#line 859 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5029 "src/parse/lexer.cc"
yy583:
	++cur;
#line 860 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5034 "src/parse/lexer.cc"
yy584:
	++cur;
#line 861 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5039 "src/parse/lexer.cc"
yy585:
	++cur;
#line 862 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5044 "src/parse/lexer.cc"
yy586:
	++cur;
#line 863 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5049 "src/parse/lexer.cc"
yy587:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy576;
		if (yych <= '9') goto yy592;
		goto yy576;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy576;
		if (yych <= 'f') goto yy592;
		goto yy576;
	}
yy588:
	yych = *++cur;
	if (yych <= '/') goto yy589;
	if (yych <= '7') goto yy593;
yy589:
	cur = mar;
	if (yyaccept == 0) {
		goto yy573;
	} else {
		goto yy576;
	}
yy590:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy594;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy594;
		goto yy589;
	}
yy591:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy595;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy595;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy595;
		goto yy589;
	}
yy592:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy596;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy596;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy596;
		goto yy589;
	}
yy593:
	++cur;
#line 856 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5114 "src/parse/lexer.cc"
yy594:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy597;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy597;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy597;
		goto yy589;
	}
yy595:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy592;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy592;
		goto yy589;
	}
yy596:
	++cur;
#line 855 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5143 "src/parse/lexer.cc"
yy597:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych >= ':') goto yy589;
	} else {
		if (yych <= 'F') goto yy598;
		if (yych <= '`') goto yy589;
		if (yych >= 'g') goto yy589;
	}
yy598:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy589;
		if (yych <= '9') goto yy591;
		goto yy589;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy589;
		if (yych <= 'f') goto yy591;
		goto yy589;
	}
}
#line 874 "../src/parse/lexer.re"

    } else {
        
#line 5171 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy602;
		} else {
			if (yych <= '\r') goto yy603;
			if (yych == '\\') goto yy604;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy606;
			if (yych <= 0xDF) goto yy608;
			if (yych <= 0xE0) goto yy609;
			goto yy610;
		} else {
			if (yych <= 0xF0) goto yy611;
			if (yych <= 0xF3) goto yy612;
			if (yych <= 0xF4) goto yy613;
			goto yy606;
		}
	}
yy600:
	++cur;
yy601:
#line 854 "../src/parse/lexer.re"
	{ c = decode(tok); return Ret::OK; }
#line 5202 "src/parse/lexer.cc"
yy602:
	++cur;
#line 848 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "newline in character class")); }
#line 5207 "src/parse/lexer.cc"
yy603:
	yych = *++cur;
	if (yych == '\n') goto yy602;
	goto yy601;
yy604:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy614;
				} else {
					if (yych <= '\n') goto yy602;
					if (yych <= '\f') goto yy614;
					goto yy616;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy614;
					goto yy617;
				} else {
					if (yych <= '/') goto yy614;
					if (yych <= '3') goto yy618;
					goto yy620;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy614;
					goto yy621;
				} else {
					if (yych == 'X') goto yy623;
					goto yy614;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy624;
					goto yy625;
				} else {
					if (yych <= '`') goto yy614;
					if (yych <= 'a') goto yy626;
					goto yy627;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy614;
					goto yy628;
				} else {
					if (yych == 'n') goto yy629;
					goto yy614;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy630;
					goto yy614;
				} else {
					if (yych <= 't') goto yy631;
					if (yych <= 'u') goto yy623;
					goto yy632;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy614;
					goto yy633;
				} else {
					if (yych <= 0x7F) goto yy614;
					if (yych >= 0xC2) goto yy634;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy636;
					if (yych <= 0xEF) goto yy637;
					goto yy638;
				} else {
					if (yych <= 0xF3) goto yy639;
					if (yych <= 0xF4) goto yy640;
				}
			}
		}
	}
yy605:
#line 851 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in escape sequence")); }
#line 5299 "src/parse/lexer.cc"
yy606:
	++cur;
yy607:
#line 852 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error")); }
#line 5305 "src/parse/lexer.cc"
yy608:
	yych = *++cur;
	if (yych <= 0x7F) goto yy607;
	if (yych <= 0xBF) goto yy600;
	goto yy607;
yy609:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy607;
	if (yych <= 0xBF) goto yy641;
	goto yy607;
yy610:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy607;
	if (yych <= 0xBF) goto yy641;
	goto yy607;
yy611:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy607;
	if (yych <= 0xBF) goto yy642;
	goto yy607;
yy612:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy607;
	if (yych <= 0xBF) goto yy642;
	goto yy607;
yy613:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy607;
	if (yych <= 0x8F) goto yy642;
	goto yy607;
yy614:
	++cur;
yy615:
#line 867 "../src/parse/lexer.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 5350 "src/parse/lexer.cc"
yy616:
	yych = *++cur;
	if (yych == '\n') goto yy602;
	goto yy615;
yy617:
	++cur;
#line 865 "../src/parse/lexer.re"
	{ c = '-'_u8; return Ret::OK; }
#line 5359 "src/parse/lexer.cc"
yy618:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy619;
	if (yych <= '7') goto yy643;
yy619:
#line 850 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in octal escape sequence")); }
#line 5368 "src/parse/lexer.cc"
yy620:
	++cur;
	goto yy619;
yy621:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy622;
		if (yych <= '9') goto yy644;
	} else {
		if (yych <= 'F') goto yy644;
		if (yych <= '`') goto yy622;
		if (yych <= 'f') goto yy644;
	}
yy622:
#line 849 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(loc, "syntax error in hexadecimal escape sequence")); }
#line 5386 "src/parse/lexer.cc"
yy623:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy622;
		if (yych <= '9') goto yy645;
		goto yy622;
	} else {
		if (yych <= 'F') goto yy645;
		if (yych <= '`') goto yy622;
		if (yych <= 'f') goto yy645;
		goto yy622;
	}
yy624:
	++cur;
#line 864 "../src/parse/lexer.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 5404 "src/parse/lexer.cc"
yy625:
	++cur;
#line 866 "../src/parse/lexer.re"
	{ c = ']'_u8; return Ret::OK; }
#line 5409 "src/parse/lexer.cc"
yy626:
	++cur;
#line 857 "../src/parse/lexer.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 5414 "src/parse/lexer.cc"
yy627:
	++cur;
#line 858 "../src/parse/lexer.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 5419 "src/parse/lexer.cc"
yy628:
	++cur;
#line 859 "../src/parse/lexer.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 5424 "src/parse/lexer.cc"
yy629:
	++cur;
#line 860 "../src/parse/lexer.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 5429 "src/parse/lexer.cc"
yy630:
	++cur;
#line 861 "../src/parse/lexer.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 5434 "src/parse/lexer.cc"
yy631:
	++cur;
#line 862 "../src/parse/lexer.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 5439 "src/parse/lexer.cc"
yy632:
	++cur;
#line 863 "../src/parse/lexer.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 5444 "src/parse/lexer.cc"
yy633:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy622;
		if (yych <= '9') goto yy646;
		goto yy622;
	} else {
		if (yych <= 'F') goto yy646;
		if (yych <= '`') goto yy622;
		if (yych <= 'f') goto yy646;
		goto yy622;
	}
yy634:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy614;
yy635:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy605;
		} else {
			goto yy607;
		}
	} else {
		if (yyaccept == 2) {
			goto yy619;
		} else {
			goto yy622;
		}
	}
yy636:
	yych = *++cur;
	if (yych <= 0x9F) goto yy635;
	if (yych <= 0xBF) goto yy634;
	goto yy635;
yy637:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy634;
	goto yy635;
yy638:
	yych = *++cur;
	if (yych <= 0x8F) goto yy635;
	if (yych <= 0xBF) goto yy637;
	goto yy635;
yy639:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy637;
	goto yy635;
yy640:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0x8F) goto yy637;
	goto yy635;
yy641:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy600;
	goto yy635;
yy642:
	yych = *++cur;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy641;
	goto yy635;
yy643:
	yych = *++cur;
	if (yych <= '/') goto yy635;
	if (yych <= '7') goto yy647;
	goto yy635;
yy644:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy648;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy648;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy648;
		goto yy635;
	}
yy645:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy649;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy649;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy649;
		goto yy635;
	}
yy646:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy650;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy650;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy650;
		goto yy635;
	}
yy647:
	++cur;
#line 856 "../src/parse/lexer.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 5557 "src/parse/lexer.cc"
yy648:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy651;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy651;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy651;
		goto yy635;
	}
yy649:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy646;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy646;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy646;
		goto yy635;
	}
yy650:
	++cur;
#line 855 "../src/parse/lexer.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 5586 "src/parse/lexer.cc"
yy651:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych >= ':') goto yy635;
	} else {
		if (yych <= 'F') goto yy652;
		if (yych <= '`') goto yy635;
		if (yych >= 'g') goto yy635;
	}
yy652:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy645;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy645;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy645;
		goto yy635;
	}
}
#line 876 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 907 "../src/parse/lexer.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 5623 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy655;
	} else {
		if (yych <= '\r') goto yy656;
		if (yych == '\\') goto yy657;
	}
	++cur;
yy654:
#line 891 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5639 "src/parse/lexer.cc"
yy655:
	++cur;
#line 885 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5644 "src/parse/lexer.cc"
yy656:
	yych = *++cur;
	if (yych == '\n') goto yy655;
	goto yy654;
yy657:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy658;
				if (yych <= '\t') goto yy659;
				goto yy655;
			} else {
				if (yych == '\r') goto yy661;
				if (yych <= '/') goto yy659;
				goto yy662;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy664;
				if (yych == 'U') goto yy665;
				goto yy659;
			} else {
				if (yych <= 'X') goto yy667;
				if (yych == '\\') goto yy668;
				goto yy659;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy669;
				if (yych <= 'b') goto yy670;
				goto yy659;
			} else {
				if (yych <= 'f') goto yy671;
				if (yych == 'n') goto yy672;
				goto yy659;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy673;
				if (yych <= 's') goto yy659;
				if (yych <= 't') goto yy674;
				goto yy667;
			} else {
				if (yych <= 'v') goto yy675;
				if (yych == 'x') goto yy676;
				goto yy659;
			}
		}
	}
yy658:
#line 888 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 5700 "src/parse/lexer.cc"
yy659:
	++cur;
yy660:
#line 902 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 5710 "src/parse/lexer.cc"
yy661:
	yych = *++cur;
	if (yych == '\n') goto yy655;
	goto yy660;
yy662:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy663;
	if (yych <= '7') goto yy677;
yy663:
#line 887 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 5723 "src/parse/lexer.cc"
yy664:
	++cur;
	goto yy663;
yy665:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy666;
		if (yych <= '9') goto yy679;
	} else {
		if (yych <= 'F') goto yy679;
		if (yych <= '`') goto yy666;
		if (yych <= 'f') goto yy679;
	}
yy666:
#line 886 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5741 "src/parse/lexer.cc"
yy667:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy666;
		if (yych <= '9') goto yy680;
		goto yy666;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy666;
		if (yych <= 'f') goto yy680;
		goto yy666;
	}
yy668:
	++cur;
#line 901 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5759 "src/parse/lexer.cc"
yy669:
	++cur;
#line 894 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5764 "src/parse/lexer.cc"
yy670:
	++cur;
#line 895 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5769 "src/parse/lexer.cc"
yy671:
	++cur;
#line 896 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5774 "src/parse/lexer.cc"
yy672:
	++cur;
#line 897 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5779 "src/parse/lexer.cc"
yy673:
	++cur;
#line 898 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5784 "src/parse/lexer.cc"
yy674:
	++cur;
#line 899 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5789 "src/parse/lexer.cc"
yy675:
	++cur;
#line 900 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5794 "src/parse/lexer.cc"
yy676:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy666;
		if (yych <= '9') goto yy681;
		goto yy666;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy666;
		if (yych <= 'f') goto yy681;
		goto yy666;
	}
yy677:
	yych = *++cur;
	if (yych <= '/') goto yy678;
	if (yych <= '7') goto yy682;
yy678:
	cur = mar;
	if (yyaccept == 0) {
		goto yy663;
	} else {
		goto yy666;
	}
yy679:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy683;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy683;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy683;
		goto yy678;
	}
yy680:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy684;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy684;
		goto yy678;
	}
yy681:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy685;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy685;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy685;
		goto yy678;
	}
yy682:
	++cur;
#line 893 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5859 "src/parse/lexer.cc"
yy683:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy686;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy686;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy686;
		goto yy678;
	}
yy684:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy681;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy681;
		goto yy678;
	}
yy685:
	++cur;
#line 892 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5888 "src/parse/lexer.cc"
yy686:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych >= ':') goto yy678;
	} else {
		if (yych <= 'F') goto yy687;
		if (yych <= '`') goto yy678;
		if (yych >= 'g') goto yy678;
	}
yy687:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy678;
		if (yych <= '9') goto yy680;
		goto yy678;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy678;
		if (yych <= 'f') goto yy680;
		goto yy678;
	}
}
#line 909 "../src/parse/lexer.re"

    } else {
        
#line 5916 "src/parse/lexer.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy691;
		} else {
			if (yych <= '\r') goto yy692;
			if (yych == '\\') goto yy693;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy695;
			if (yych <= 0xDF) goto yy697;
			if (yych <= 0xE0) goto yy698;
			goto yy699;
		} else {
			if (yych <= 0xF0) goto yy700;
			if (yych <= 0xF3) goto yy701;
			if (yych <= 0xF4) goto yy702;
			goto yy695;
		}
	}
yy689:
	++cur;
yy690:
#line 891 "../src/parse/lexer.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 5947 "src/parse/lexer.cc"
yy691:
	++cur;
#line 885 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "newline in character string")); }
#line 5952 "src/parse/lexer.cc"
yy692:
	yych = *++cur;
	if (yych == '\n') goto yy691;
	goto yy690;
yy693:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy694;
				if (yych == '\n') goto yy691;
				goto yy703;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy705;
					goto yy703;
				} else {
					if (yych <= '3') goto yy706;
					if (yych <= '7') goto yy708;
					goto yy703;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy709;
					goto yy703;
				} else {
					if (yych <= 'X') goto yy711;
					if (yych <= '[') goto yy703;
					goto yy712;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy703;
					goto yy713;
				} else {
					if (yych <= 'b') goto yy714;
					if (yych <= 'e') goto yy703;
					goto yy715;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy716;
				if (yych <= 'q') goto yy703;
				goto yy717;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy703;
					goto yy718;
				} else {
					if (yych <= 'u') goto yy711;
					if (yych <= 'v') goto yy719;
					goto yy703;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy720;
					goto yy703;
				} else {
					if (yych <= 0xC1) goto yy694;
					if (yych <= 0xDF) goto yy721;
					goto yy723;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy724;
					goto yy725;
				} else {
					if (yych <= 0xF3) goto yy726;
					if (yych <= 0xF4) goto yy727;
				}
			}
		}
	}
yy694:
#line 888 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in escape sequence")); }
#line 6037 "src/parse/lexer.cc"
yy695:
	++cur;
yy696:
#line 889 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error")); }
#line 6043 "src/parse/lexer.cc"
yy697:
	yych = *++cur;
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy689;
	goto yy696;
yy698:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy696;
	if (yych <= 0xBF) goto yy728;
	goto yy696;
yy699:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy728;
	goto yy696;
yy700:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy696;
	if (yych <= 0xBF) goto yy729;
	goto yy696;
yy701:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy729;
	goto yy696;
yy702:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0x8F) goto yy729;
	goto yy696;
yy703:
	++cur;
yy704:
#line 902 "../src/parse/lexer.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 6088 "src/parse/lexer.cc"
yy705:
	yych = *++cur;
	if (yych == '\n') goto yy691;
	goto yy704;
yy706:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy707;
	if (yych <= '7') goto yy730;
yy707:
#line 887 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in octal escape sequence")); }
#line 6101 "src/parse/lexer.cc"
yy708:
	++cur;
	goto yy707;
yy709:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy731;
	} else {
		if (yych <= 'F') goto yy731;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy731;
	}
yy710:
#line 886 "../src/parse/lexer.re"
	{ RET_FAIL(error_at(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 6119 "src/parse/lexer.cc"
yy711:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy732;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy732;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy732;
		goto yy710;
	}
yy712:
	++cur;
#line 901 "../src/parse/lexer.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 6137 "src/parse/lexer.cc"
yy713:
	++cur;
#line 894 "../src/parse/lexer.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 6142 "src/parse/lexer.cc"
yy714:
	++cur;
#line 895 "../src/parse/lexer.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 6147 "src/parse/lexer.cc"
yy715:
	++cur;
#line 896 "../src/parse/lexer.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 6152 "src/parse/lexer.cc"
yy716:
	++cur;
#line 897 "../src/parse/lexer.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 6157 "src/parse/lexer.cc"
yy717:
	++cur;
#line 898 "../src/parse/lexer.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 6162 "src/parse/lexer.cc"
yy718:
	++cur;
#line 899 "../src/parse/lexer.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 6167 "src/parse/lexer.cc"
yy719:
	++cur;
#line 900 "../src/parse/lexer.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 6172 "src/parse/lexer.cc"
yy720:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy733;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy733;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy733;
		goto yy710;
	}
yy721:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0xBF) goto yy703;
yy722:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy694;
		} else {
			goto yy696;
		}
	} else {
		if (yyaccept == 2) {
			goto yy707;
		} else {
			goto yy710;
		}
	}
yy723:
	yych = *++cur;
	if (yych <= 0x9F) goto yy722;
	if (yych <= 0xBF) goto yy721;
	goto yy722;
yy724:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0xBF) goto yy721;
	goto yy722;
yy725:
	yych = *++cur;
	if (yych <= 0x8F) goto yy722;
	if (yych <= 0xBF) goto yy724;
	goto yy722;
yy726:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0xBF) goto yy724;
	goto yy722;
yy727:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0x8F) goto yy724;
	goto yy722;
yy728:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0xBF) goto yy689;
	goto yy722;
yy729:
	yych = *++cur;
	if (yych <= 0x7F) goto yy722;
	if (yych <= 0xBF) goto yy728;
	goto yy722;
yy730:
	yych = *++cur;
	if (yych <= '/') goto yy722;
	if (yych <= '7') goto yy734;
	goto yy722;
yy731:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy735;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy735;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy735;
		goto yy722;
	}
yy732:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy736;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy736;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy736;
		goto yy722;
	}
yy733:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy737;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy737;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy737;
		goto yy722;
	}
yy734:
	++cur;
#line 893 "../src/parse/lexer.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 6285 "src/parse/lexer.cc"
yy735:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy738;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy738;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy738;
		goto yy722;
	}
yy736:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy733;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy733;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy733;
		goto yy722;
	}
yy737:
	++cur;
#line 892 "../src/parse/lexer.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 6314 "src/parse/lexer.cc"
yy738:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych >= ':') goto yy722;
	} else {
		if (yych <= 'F') goto yy739;
		if (yych <= '`') goto yy722;
		if (yych >= 'g') goto yy722;
	}
yy739:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy722;
		if (yych <= '9') goto yy732;
		goto yy722;
	} else {
		if (yych <= 'F') goto yy732;
		if (yych <= '`') goto yy722;
		if (yych <= 'f') goto yy732;
		goto yy722;
	}
}
#line 911 "../src/parse/lexer.re"

    }
}

Ret Input::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Input::set_sourceline() {
sourceline:
    tok = cur;

#line 6361 "src/parse/lexer.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy741;
		} else {
			if (yych <= '\n') goto yy743;
			if (yych <= '\f') goto yy741;
			goto yy744;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy741;
			goto yy745;
		} else {
			if (yych <= '0') goto yy741;
			if (yych <= '9') goto yy746;
			goto yy741;
		}
	}
	++cur;
#line 952 "../src/parse/lexer.re"
	{ --cur; return Ret::OK; }
#line 6421 "src/parse/lexer.cc"
yy741:
	++cur;
yy742:
#line 953 "../src/parse/lexer.re"
	{ goto sourceline; }
#line 6427 "src/parse/lexer.cc"
yy743:
	++cur;
#line 951 "../src/parse/lexer.re"
	{ pos = tok = cur; return Ret::OK; }
#line 6432 "src/parse/lexer.cc"
yy744:
	yych = *++cur;
	if (yych == '\n') goto yy743;
	goto yy742;
yy745:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy742;
	if (yych == '\n') goto yy742;
	goto yy748;
yy746:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy746;
	}
#line 933 "../src/parse/lexer.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(error_at_tok("line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 6458 "src/parse/lexer.cc"
yy747:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
yy748:
	if (yybm[0+yych] & 128) {
		goto yy747;
	}
	if (yych <= '\n') goto yy749;
	if (yych <= '"') goto yy750;
	goto yy751;
yy749:
	cur = mar;
	goto yy742;
yy750:
	++cur;
#line 942 "../src/parse/lexer.re"
	{
        InputFile &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 6484 "src/parse/lexer.cc"
yy751:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error_at_cur("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy749;
	if (yych == '\n') goto yy749;
	goto yy747;
}
#line 954 "../src/parse/lexer.re"

}

#undef YYFILL

} // end namespace re2c
