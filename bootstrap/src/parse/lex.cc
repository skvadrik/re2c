/* Generated by re2c 2.1.1 on Fri Jul 16 08:33:58 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 62 "../src/parse/lex.re"


#line 121 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 60 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 253 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 126 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 273 "../src/parse/lex.re"
	{ goto loop; }
#line 132 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 268 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 146 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy7;
			} else {
				goto yy5;
			}
		} else {
			goto yy161;
		}
	} else {
		if (yyaccept == 3) {
			goto yy163;
		} else {
			goto yy172;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 137 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 207 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'l':	goto yy25;
	case 'm':	goto yy26;
	case 'r':	goto yy27;
	case 's':	goto yy28;
	case 't':	goto yy29;
	case 'u':	goto yy30;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy31;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy33;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy41;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy42;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy43;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy44;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy45;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy47;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy48;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy49;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy50;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy52;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy53;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy54;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy55;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy58;
	if (yych <= '9') goto yy13;
	goto yy58;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy59;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy60;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy63;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy66;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy67;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy69;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy70;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy57:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy58:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy57;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy57;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy73;
		}
		goto yy13;
	}
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy75;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy77;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy78;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy79;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy80;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy81;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy82;
	goto yy13;
yy67:
	++YYCURSOR;
#line 143 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_GLOBAL;
    }
#line 436 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy84;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy85;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy73:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy73;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy87;
		if (yych <= '\n') goto yy89;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy91;
		if (yych == ' ') goto yy87;
		goto yy13;
	}
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy92;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy95;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy98;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy101;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy102;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy87:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy87;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy87;
		if (yych == '"') goto yy104;
		goto yy13;
	}
yy89:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 261 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 540 "src/parse/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy89;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy106;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy107;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy108;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy109;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy110;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy112;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy114;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy115;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy104:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy118;
	goto yy119;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy123;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy124;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy127;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy128;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy129;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy130;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy131;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy132;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy91;
	goto yy13;
yy119:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy104;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy134;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy135;
	goto yy13;
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy137;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy138;
	goto yy13;
yy125:
	++YYCURSOR;
#line 167 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXFILL, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 690 "src/parse/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy139;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy140;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy141;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy142;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy143;
	goto yy13;
yy132:
	++YYCURSOR;
#line 161 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 719 "src/parse/lex.cc"
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy144;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy145;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy146;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy147;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy139:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy150;
	goto yy13;
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy153;
	goto yy13;
yy142:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy155;
	goto yy13;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy157;
	goto yy13;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy159;
	goto yy13;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy160;
	goto yy13;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy164;
	goto yy13;
yy148:
	++YYCURSOR;
#line 149 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 784 "src/parse/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy165;
	goto yy13;
yy151:
	++YYCURSOR;
#line 183 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_MTAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 797 "src/parse/lex.cc"
yy153:
	++YYCURSOR;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 806 "src/parse/lex.cc"
yy155:
	++YYCURSOR;
#line 177 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_STAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 815 "src/parse/lex.cc"
yy157:
	++YYCURSOR;
#line 189 "../src/parse/lex.re"
	{
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_COND_ENUM, opts->topIndent, allow)) return INPUT_ERROR;
        goto next;
    }
#line 826 "src/parse/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy166;
	goto yy13;
yy160:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy167;
yy161:
#line 222 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 843 "src/parse/lex.cc"
yy162:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy163;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy168;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy168;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy168;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy170;
			}
		}
	}
yy163:
#line 247 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 877 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy171;
	goto yy13;
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy173;
	goto yy13;
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy174;
	goto yy13;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy176;
	goto yy13;
yy168:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 241 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_block_end(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 904 "src/parse/lex.cc"
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy168;
	goto yy13;
yy171:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy177;
	if (yych == ' ') goto yy177;
yy172:
#line 235 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 921 "src/parse/lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy179;
	goto yy13;
yy174:
	++YYCURSOR;
#line 197 "../src/parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        }
        if (!lex_block(out, CODE_STATE_GOTO, opts->topIndent, 0)) return INPUT_ERROR;
        goto next;
    }
#line 938 "src/parse/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy180;
	if (yych == 'n') goto yy181;
	goto yy13;
yy177:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy177;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy177;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy183;
		}
		goto yy13;
	}
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy185;
	goto yy13;
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy187;
	goto yy13;
yy181:
	++YYCURSOR;
#line 207 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 977 "src/parse/lex.cc"
yy183:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy183;
	} else {
		if (yych <= '"') goto yy189;
		if (yych == '\\') goto yy190;
		goto yy183;
	}
yy185:
	++YYCURSOR;
#line 172 "../src/parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXNMATCH, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 998 "src/parse/lex.cc"
yy187:
	++YYCURSOR;
#line 215 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1009 "src/parse/lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = YYCURSOR;
			goto yy191;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = YYCURSOR;
		goto yy191;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = YYCURSOR;
			goto yy191;
		} else {
			if (yych == '*') {
				yyt2 = YYCURSOR;
				goto yy193;
			}
			goto yy13;
		}
	}
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy183;
yy191:
	++YYCURSOR;
	x = yyt1;
	YYCURSOR = yyt2;
	y = yyt2;
#line 229 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_block_end(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1053 "src/parse/lex.cc"
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy191;
	goto yy13;
}
#line 274 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1067 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy199;
			}
		} else {
			if (yych == ':') goto yy201;
		}
	}
yy196:
#line 281 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1140 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 288 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1146 "src/parse/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy197;
yy200:
	YYCURSOR = YYMARKER;
	goto yy196;
yy201:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy200;
		if (yych >= '[') goto yy200;
	} else {
		if (yych == '`') goto yy200;
		if (yych >= '{') goto yy200;
	}
yy202:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy202;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy200;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy204;
		}
		if (yych <= '\f') goto yy200;
		yyt1 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy200;
			yyt1 = YYCURSOR;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy206;
			}
			goto yy200;
		}
	}
yy204:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 289 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1194 "src/parse/lex.cc"
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy204;
	goto yy200;
}
#line 290 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1210 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy212;
			}
		} else {
			if (yych == ':') goto yy214;
		}
	}
yy209:
#line 299 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1283 "src/parse/lex.cc"
yy210:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 306 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1292 "src/parse/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy210;
yy213:
	YYCURSOR = YYMARKER;
	goto yy209;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy213;
		if (yych >= '[') goto yy213;
	} else {
		if (yych == '`') goto yy213;
		if (yych >= '{') goto yy213;
	}
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy215;
	}
#line 311 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1333 "src/parse/lex.cc"
}
#line 328 "../src/parse/lex.re"

}

bool Scanner::lex_block_end(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1344 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy222;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy220;
		if (yych <= '\n') goto yy225;
	} else {
		if (yych <= '\r') goto yy227;
		if (yych == '*') goto yy228;
	}
yy220:
	++YYCURSOR;
yy221:
#line 336 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1403 "src/parse/lex.cc"
yy222:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy222;
	}
#line 346 "../src/parse/lex.re"
	{ goto loop; }
#line 1413 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
#line 347 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1418 "src/parse/lex.cc"
yy227:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy225;
	goto yy221;
yy228:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy221;
	++YYCURSOR;
#line 342 "../src/parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1432 "src/parse/lex.cc"
}
#line 348 "../src/parse/lex.re"

}

bool Scanner::lex_block(Output &out, CodeKind kind, uint32_t indent, uint32_t mask)
{
    code_alc_t &alc = out.allocator;
    const char *fmt = NULL, *sep = NULL;
    BlockNameList *blocks;

    out.wraw(tok, ptr, !globopts->iFlag);
    if (!lex_name_list(alc, &blocks)) return false;

loop:

#line 1449 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy235;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy238;
		} else {
			if (yych == '\r') goto yy240;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy241;
			if (yych >= 'f') goto yy242;
		} else {
			if (yych == 's') goto yy243;
		}
	}
	++YYCURSOR;
yy234:
#line 362 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed directive: expected optional "
            "configurations followed by the end of block `*" "/`");
        return false;
    }
#line 1513 "src/parse/lex.cc"
yy235:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy235;
	}
#line 386 "../src/parse/lex.re"
	{ goto loop; }
#line 1523 "src/parse/lex.cc"
yy238:
	++YYCURSOR;
#line 388 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1528 "src/parse/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy238;
	goto yy234;
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy244;
	goto yy234;
yy242:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy246;
	goto yy234;
yy243:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy248;
	goto yy234;
yy244:
	++YYCURSOR;
#line 390 "../src/parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return true;
    }
#line 1554 "src/parse/lex.cc"
yy246:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy249;
yy247:
	YYCURSOR = YYMARKER;
	goto yy234;
yy248:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy250;
	goto yy247;
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy251;
	goto yy247;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy252;
	goto yy247;
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy253;
	goto yy247;
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy254;
	goto yy247;
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy255;
	goto yy247;
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy257;
	goto yy247;
yy255:
	++YYCURSOR;
#line 368 "../src/parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'format'");
            return false;
        }
        fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1600 "src/parse/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy247;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy247;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy247;
	++YYCURSOR;
#line 377 "../src/parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'separator'");
            return false;
        }
        sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1618 "src/parse/lex.cc"
}
#line 396 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1631 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy266;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy264;
				if (yych <= '\n') goto yy269;
				if (yych >= '\r') goto yy271;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy272;
				} else {
					if (yych <= '"') goto yy273;
					if (yych <= '#') goto yy275;
					goto yy276;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy278;
				} else {
					if (yych <= '\'') goto yy279;
					if (yych <= ')') goto yy276;
					goto yy281;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy276;
				} else {
					if (yych <= '.') goto yy282;
					if (yych <= '/') goto yy284;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy285;
				if (yych <= ';') goto yy276;
				if (yych <= '<') goto yy286;
				goto yy288;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy276;
				} else {
					if (yych <= '@') goto yy275;
					if (yych <= 'Z') goto yy289;
					goto yy292;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy276;
				} else {
					if (yych != '`') goto yy289;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy294;
					goto yy289;
				} else {
					if (yych <= '{') goto yy295;
					if (yych <= '|') goto yy276;
				}
			}
		}
	}
yy264:
	++YYCURSOR;
yy265:
#line 548 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1749 "src/parse/lex.cc"
yy266:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy266;
	}
#line 530 "../src/parse/lex.re"
	{ goto scan; }
#line 1759 "src/parse/lex.cc"
yy269:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych == '#') goto yy300;
	}
yy270:
#line 537 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1781 "src/parse/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy269;
	goto yy265;
yy272:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy302;
	if (yych == 'u') goto yy303;
	goto yy265;
yy273:
	++YYCURSOR;
#line 422 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1796 "src/parse/lex.cc"
yy275:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy265;
		if (yych <= 'Z') goto yy304;
		goto yy265;
	} else {
		if (yych == '`') goto yy265;
		if (yych <= 'z') goto yy304;
		goto yy265;
	}
yy276:
	++YYCURSOR;
yy277:
#line 431 "../src/parse/lex.re"
	{ return *tok; }
#line 1813 "src/parse/lex.cc"
yy278:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy307;
	goto yy265;
yy279:
	++YYCURSOR;
#line 421 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1822 "src/parse/lex.cc"
yy281:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy307;
	goto yy277;
yy282:
	++YYCURSOR;
#line 525 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1834 "src/parse/lex.cc"
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy309;
	if (yych == '/') goto yy311;
	goto yy277;
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy313;
	goto yy265;
yy286:
	++YYCURSOR;
#line 414 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1848 "src/parse/lex.cc"
yy288:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy315;
	goto yy277;
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy290:
	if (yybm[0+yych] & 32) {
		goto yy289;
	}
#line 480 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1885 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy317;
#line 423 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1891 "src/parse/lex.cc"
yy294:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy319;
	goto yy290;
yy295:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy322;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy320;
		if (yych >= 'A') goto yy324;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy324;
		} else {
			if (yych <= '`') goto yy296;
			if (yych <= 'z') goto yy324;
		}
	}
yy296:
#line 406 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1916 "src/parse/lex.cc"
yy297:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy297;
	} else {
		if (yych <= ' ') goto yy297;
		if (yych == '#') goto yy300;
	}
yy299:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy270;
			} else {
				goto yy265;
			}
		} else {
			if (yyaccept == 2) {
				goto yy277;
			} else {
				goto yy296;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy314;
			} else {
				goto yy321;
			}
		} else {
			if (yyaccept == 6) {
				goto yy341;
			} else {
				goto yy367;
			}
		}
	}
yy300:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy300;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy300;
		if (yych == 'l') goto yy326;
		goto yy299;
	}
yy302:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy327;
	goto yy299;
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy328;
	goto yy299;
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy306;
		if (yych <= '9') goto yy304;
		if (yych >= 'A') goto yy304;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy304;
		} else {
			if (yych <= '`') goto yy306;
			if (yych <= 'z') goto yy304;
		}
	}
yy306:
#line 426 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2000 "src/parse/lex.cc"
yy307:
	++YYCURSOR;
#line 419 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2005 "src/parse/lex.cc"
yy309:
	++YYCURSOR;
#line 417 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2010 "src/parse/lex.cc"
yy311:
	++YYCURSOR;
#line 416 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2015 "src/parse/lex.cc"
yy313:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy315;
yy314:
#line 407 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2023 "src/parse/lex.cc"
yy315:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy299;
			goto yy315;
		} else {
			if (yych == ' ') goto yy315;
			goto yy299;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy329;
			}
			if (yych <= '^') goto yy299;
			yyt1 = YYCURSOR;
			goto yy329;
		} else {
			if (yych <= '`') goto yy299;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy329;
			}
			goto yy299;
		}
	}
yy317:
	++YYCURSOR;
#line 424 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2058 "src/parse/lex.cc"
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy332;
	goto yy290;
yy320:
	++YYCURSOR;
yy321:
#line 463 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2072 "src/parse/lex.cc"
yy322:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy322;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy333;
	}
	if (yych == '}') goto yy334;
	goto yy299;
yy324:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy299;
			goto yy324;
		} else {
			if (yych <= '@') goto yy299;
			if (yych <= 'Z') goto yy324;
			goto yy299;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy299;
			goto yy324;
		} else {
			if (yych == '}') goto yy336;
			goto yy299;
		}
	}
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy338;
	goto yy299;
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy339;
	goto yy299;
yy328:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy340;
	goto yy299;
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy331;
		if (yych <= '9') goto yy329;
		if (yych >= 'A') goto yy329;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy329;
		} else {
			if (yych <= '`') goto yy331;
			if (yych <= 'z') goto yy329;
		}
	}
yy331:
	p = yyt1;
#line 409 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2143 "src/parse/lex.cc"
yy332:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy342;
	goto yy290;
yy333:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy321;
	if (yych <= '9') goto yy343;
	if (yych == '}') goto yy345;
	goto yy321;
yy334:
	++YYCURSOR;
#line 433 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2166 "src/parse/lex.cc"
yy336:
	++YYCURSOR;
#line 469 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2178 "src/parse/lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy347;
	goto yy299;
yy339:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy348;
	goto yy299;
yy340:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy349;
yy341:
#line 518 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive: expected `!use`"
            " followed by a colon, a block name, optional spaces, a semicolon,"
            " and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2199 "src/parse/lex.cc"
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy350;
	goto yy290;
yy343:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy299;
	if (yych <= '9') goto yy343;
	if (yych == '}') goto yy352;
	goto yy299;
yy345:
	++YYCURSOR;
#line 454 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2223 "src/parse/lex.cc"
yy347:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy354;
	goto yy299;
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy355;
	goto yy299;
yy349:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy299;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy356;
		}
		goto yy299;
	} else {
		if (yych == '`') goto yy299;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy356;
		}
		goto yy299;
	}
yy350:
	++YYCURSOR;
#line 478 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2253 "src/parse/lex.cc"
yy352:
	++YYCURSOR;
	p = yyt1;
#line 442 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2269 "src/parse/lex.cc"
yy354:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy359;
	if (yych <= '9') goto yy299;
	goto yy359;
yy355:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy360;
	goto yy299;
yy356:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = YYCURSOR;
				goto yy361;
			}
			goto yy299;
		} else {
			if (yych <= ' ') {
				yyt2 = YYCURSOR;
				goto yy361;
			}
			if (yych <= '/') goto yy299;
			if (yych <= '9') goto yy356;
			goto yy299;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = YYCURSOR;
				goto yy363;
			}
			if (yych <= '@') goto yy299;
			if (yych <= 'Z') goto yy356;
			goto yy299;
		} else {
			if (yych == '`') goto yy299;
			if (yych <= 'z') goto yy356;
			goto yy299;
		}
	}
yy358:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy359:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy358;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy358;
		if (yych <= '0') goto yy299;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy364;
		}
		goto yy299;
	}
yy360:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy366;
	goto yy299;
yy361:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy361;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy361;
		if (yych != ';') goto yy299;
	}
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy299;
		if (yych <= '\n') {
			yyt3 = YYCURSOR;
			goto yy368;
		}
		if (yych <= '\f') goto yy299;
		yyt3 = YYCURSOR;
		goto yy368;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			yyt3 = YYCURSOR;
			goto yy368;
		} else {
			if (yych == '*') {
				yyt3 = YYCURSOR;
				goto yy370;
			}
			goto yy299;
		}
	}
yy364:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy299;
			goto yy371;
		} else {
			if (yych <= '\n') goto yy373;
			if (yych <= '\f') goto yy299;
			goto yy375;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			goto yy371;
		} else {
			if (yych <= '/') goto yy299;
			if (yych <= '9') goto yy364;
			goto yy299;
		}
	}
yy366:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy376;
	if (yych == ' ') goto yy376;
yy367:
#line 507 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive: expected `!include`"
            " followed by spaces, a double-quoted file path, optional spaces, a"
            " semicolon, and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2406 "src/parse/lex.cc"
yy368:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
	YYCURSOR = yyt3;
#line 514 "../src/parse/lex.re"
	{
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2417 "src/parse/lex.cc"
yy370:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy368;
	goto yy299;
yy371:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy371;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy371;
		if (yych == '"') goto yy378;
		goto yy299;
	}
yy373:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 532 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2442 "src/parse/lex.cc"
yy375:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy373;
	goto yy299;
yy376:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy376;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy376;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy380;
		}
		goto yy299;
	}
yy378:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy378;
	}
	if (yych <= '\n') goto yy299;
	if (yych <= '"') goto yy382;
	goto yy383;
yy380:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy299;
		if (yych == '\n') goto yy299;
		goto yy380;
	} else {
		if (yych <= '"') goto yy384;
		if (yych == '\\') goto yy385;
		goto yy380;
	}
yy382:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy373;
	if (yych == '\r') goto yy375;
	goto yy299;
yy383:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy299;
	if (yych == '\n') goto yy299;
	goto yy378;
yy384:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy386;
		}
		goto yy299;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy386;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy388;
		}
		goto yy299;
	}
yy385:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy299;
	if (yych == '\n') goto yy299;
	goto yy380;
yy386:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy386;
		goto yy299;
	} else {
		if (yych <= ' ') goto yy386;
		if (yych != ';') goto yy299;
	}
yy388:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy299;
		if (yych <= '\n') {
			yyt3 = YYCURSOR;
			goto yy389;
		}
		if (yych <= '\f') goto yy299;
		yyt3 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy299;
			yyt3 = YYCURSOR;
		} else {
			if (yych == '*') {
				yyt3 = YYCURSOR;
				goto yy391;
			}
			goto yy299;
		}
	}
yy389:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
	YYCURSOR = yyt3;
#line 503 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2566 "src/parse/lex.cc"
yy391:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy389;
	goto yy299;
}
#line 552 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2579 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy395;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy395;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy398;
		}
	}
yy394:
#line 559 "../src/parse/lex.re"
	{ return false; }
#line 2636 "src/parse/lex.cc"
yy395:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy395;
	}
	if (yych == '=') goto yy398;
yy397:
	YYCURSOR = YYMARKER;
	goto yy394;
yy398:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy397;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 558 "../src/parse/lex.re"
	{ return true; }
#line 2655 "src/parse/lex.cc"
}
#line 560 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2664 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy404;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy404;
	}
#line 568 "../src/parse/lex.re"
	{ return false; }
#line 2713 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy404;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy407;
	} else {
		if (yych <= '=') goto yy407;
		if (yych == '{') goto yy407;
	}
	YYCURSOR = yyt1;
#line 567 "../src/parse/lex.re"
	{ return true; }
#line 2730 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 566 "../src/parse/lex.re"
	{ return false; }
#line 2736 "src/parse/lex.cc"
}
#line 569 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2747 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy409;
yy410:
	++YYCURSOR;
yy409:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy410;
	}
	if (yych <= 0x1F) goto yy412;
	if (yych <= '!') goto yy413;
	if (yych == '>') goto yy416;
yy412:
#line 579 "../src/parse/lex.re"
	{ goto cond; }
#line 2799 "src/parse/lex.cc"
yy413:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy413;
	if (yych == ' ') goto yy413;
#line 577 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2808 "src/parse/lex.cc"
yy416:
	++YYCURSOR;
#line 578 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2813 "src/parse/lex.cc"
}
#line 580 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2820 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy422;
		if (yych >= 'A') goto yy424;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy424;
		} else {
			if (yych <= '`') goto yy420;
			if (yych <= 'z') goto yy424;
		}
	}
yy420:
	++YYCURSOR;
#line 586 "../src/parse/lex.re"
	{ goto error; }
#line 2874 "src/parse/lex.cc"
yy422:
	++YYCURSOR;
#line 585 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2879 "src/parse/lex.cc"
yy424:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy424;
	}
#line 584 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2889 "src/parse/lex.cc"
}
#line 587 "../src/parse/lex.re"

next:

#line 2895 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy431;
		if (yych >= ' ') goto yy431;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy432;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	++YYCURSOR;
yy430:
#line 592 "../src/parse/lex.re"
	{ goto error; }
#line 2948 "src/parse/lex.cc"
yy431:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy437;
		if (yych <= 0x1F) goto yy430;
		goto yy437;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy430;
		} else {
			if (yych == '>') goto yy435;
			goto yy430;
		}
	}
yy432:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy432;
	}
#line 590 "../src/parse/lex.re"
	{ goto cond; }
#line 2972 "src/parse/lex.cc"
yy435:
	++YYCURSOR;
#line 591 "../src/parse/lex.re"
	{ goto end; }
#line 2977 "src/parse/lex.cc"
yy437:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy437;
		if (yych >= ' ') goto yy437;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy432;
		} else {
			if (yych == '>') goto yy435;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy430;
}
#line 593 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3012 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy442;
			if (yych == '\n') goto yy446;
			goto yy444;
		} else {
			if (yych <= '\r') goto yy448;
			if (yych == '"') goto yy449;
			goto yy444;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy449;
			if (yych == '/') goto yy451;
			goto yy444;
		} else {
			if (yych == '|') goto yy444;
			if (yych <= '}') goto yy452;
			goto yy444;
		}
	}
yy442:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3042 "src/parse/lex.cc"
yy444:
	++YYCURSOR;
yy445:
#line 627 "../src/parse/lex.re"
	{ goto code; }
#line 3048 "src/parse/lex.cc"
yy446:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy447;
		if (yych <= '\n') goto yy454;
	} else {
		if (yych <= '\r') goto yy454;
		if (yych == ' ') goto yy454;
	}
yy447:
#line 610 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3068 "src/parse/lex.cc"
yy448:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy446;
	goto yy445;
yy449:
	++YYCURSOR;
#line 626 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3077 "src/parse/lex.cc"
yy451:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy456;
	if (yych == '/') goto yy458;
	goto yy445;
yy452:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 3090 "src/parse/lex.cc"
yy454:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 609 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3096 "src/parse/lex.cc"
yy456:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3101 "src/parse/lex.cc"
yy458:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3106 "src/parse/lex.cc"
}
#line 628 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3118 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy462;
			if (yych == '\n') goto yy466;
			goto yy464;
		} else {
			if (yych <= '\r') goto yy468;
			if (yych == '"') goto yy469;
			goto yy464;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy469;
			if (yych == '/') goto yy471;
			goto yy464;
		} else {
			if (yych <= '{') goto yy472;
			if (yych == '}') goto yy474;
			goto yy464;
		}
	}
yy462:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3182 "src/parse/lex.cc"
yy464:
	++YYCURSOR;
yy465:
#line 652 "../src/parse/lex.re"
	{ goto code; }
#line 3188 "src/parse/lex.cc"
yy466:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy476;
	}
	if (yych == '#') goto yy479;
yy467:
#line 647 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3198 "src/parse/lex.cc"
yy468:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy466;
	goto yy465;
yy469:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3207 "src/parse/lex.cc"
yy471:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy481;
	if (yych == '/') goto yy483;
	goto yy465;
yy472:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3217 "src/parse/lex.cc"
yy474:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3228 "src/parse/lex.cc"
yy476:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy476;
	}
	if (yych == '#') goto yy479;
yy478:
	YYCURSOR = YYMARKER;
	goto yy467;
yy479:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy479;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy479;
		if (yych == 'l') goto yy485;
		goto yy478;
	}
yy481:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3256 "src/parse/lex.cc"
yy483:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3261 "src/parse/lex.cc"
yy485:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy478;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy478;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy478;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy490;
	if (yych <= '9') goto yy478;
	goto yy490;
yy489:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy490:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy489;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy489;
		if (yych <= '0') goto yy478;
		if (yych >= ':') goto yy478;
		yyt1 = YYCURSOR;
	}
yy491:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy491;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy478;
		if (yych <= '\t') goto yy493;
		if (yych <= '\n') goto yy495;
		goto yy478;
	} else {
		if (yych <= '\r') goto yy497;
		if (yych != ' ') goto yy478;
	}
yy493:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy493;
		goto yy478;
	} else {
		if (yych <= ' ') goto yy493;
		if (yych == '"') goto yy498;
		goto yy478;
	}
yy495:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 646 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3320 "src/parse/lex.cc"
yy497:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy495;
	goto yy478;
yy498:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy498;
	}
	if (yych <= '\n') goto yy478;
	if (yych >= '#') goto yy501;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy495;
	if (yych == '\r') goto yy497;
	goto yy478;
yy501:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy478;
	if (yych == '\n') goto yy478;
	goto yy498;
}
#line 653 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3354 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy504;
			if (yych <= '\t') goto yy506;
			goto yy508;
		} else {
			if (yych == '\r') goto yy510;
			goto yy506;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy511;
			if (yych <= '&') goto yy506;
			goto yy511;
		} else {
			if (yych == '\\') goto yy513;
			goto yy506;
		}
	}
yy504:
	++YYCURSOR;
#line 663 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3382 "src/parse/lex.cc"
yy506:
	++YYCURSOR;
yy507:
#line 664 "../src/parse/lex.re"
	{ goto loop; }
#line 3388 "src/parse/lex.cc"
yy508:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3393 "src/parse/lex.cc"
yy510:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy508;
	goto yy507;
yy511:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3402 "src/parse/lex.cc"
yy513:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy507;
	} else {
		if (yych <= '\'') goto yy514;
		if (yych != '\\') goto yy507;
	}
yy514:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ goto loop; }
#line 3415 "src/parse/lex.cc"
}
#line 665 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3425 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy518;
		if (yych == '\n') goto yy522;
		goto yy520;
	} else {
		if (yych <= '\r') goto yy524;
		if (yych == '*') goto yy525;
		goto yy520;
	}
yy518:
	++YYCURSOR;
#line 674 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3443 "src/parse/lex.cc"
yy520:
	++YYCURSOR;
yy521:
#line 675 "../src/parse/lex.re"
	{ goto loop; }
#line 3449 "src/parse/lex.cc"
yy522:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3454 "src/parse/lex.cc"
yy524:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy522;
	goto yy521;
yy525:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy521;
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ return; }
#line 3465 "src/parse/lex.cc"
}
#line 676 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3475 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy530;
		if (yych <= '\t') goto yy532;
		goto yy534;
	} else {
		if (yych == '\r') goto yy536;
		goto yy532;
	}
yy530:
	++YYCURSOR;
#line 684 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3492 "src/parse/lex.cc"
yy532:
	++YYCURSOR;
yy533:
#line 685 "../src/parse/lex.re"
	{ goto loop; }
#line 3498 "src/parse/lex.cc"
yy534:
	++YYCURSOR;
#line 683 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3503 "src/parse/lex.cc"
yy536:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy533;
}
#line 686 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3522 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy540;
#line 699 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3530 "src/parse/lex.cc"
yy540:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3535 "src/parse/lex.cc"
}
#line 700 "../src/parse/lex.re"

snd:

#line 3541 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy545;
yy544:
#line 703 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3550 "src/parse/lex.cc"
yy545:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy547;
	YYCURSOR = YYMARKER;
	goto yy544;
yy547:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 704 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3568 "src/parse/lex.cc"
}
#line 712 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 749 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3586 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy551;
		if (yych == '\n') goto yy555;
		goto yy553;
	} else {
		if (yych <= '\r') goto yy557;
		if (yych == '\\') goto yy558;
		goto yy553;
	}
yy551:
	++YYCURSOR;
#line 730 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3605 "src/parse/lex.cc"
yy553:
	++YYCURSOR;
yy554:
#line 732 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3611 "src/parse/lex.cc"
yy555:
	++YYCURSOR;
#line 724 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3616 "src/parse/lex.cc"
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy555;
	goto yy554;
yy558:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy559;
				if (yych == '\n') goto yy555;
				goto yy560;
			} else {
				if (yych <= '\r') goto yy562;
				if (yych == '-') goto yy563;
				goto yy560;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy565;
				if (yych <= '7') goto yy567;
				if (yych <= 'T') goto yy560;
				goto yy568;
			} else {
				if (yych == 'X') goto yy570;
				if (yych <= '[') goto yy560;
				goto yy571;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy573;
				if (yych <= '`') goto yy560;
				if (yych <= 'a') goto yy575;
				goto yy577;
			} else {
				if (yych == 'f') goto yy579;
				if (yych <= 'm') goto yy560;
				goto yy581;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy583;
				if (yych <= 's') goto yy560;
				goto yy585;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy570;
					goto yy587;
				} else {
					if (yych == 'x') goto yy589;
					goto yy560;
				}
			}
		}
	}
yy559:
#line 727 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3677 "src/parse/lex.cc"
yy560:
	++YYCURSOR;
yy561:
#line 745 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3686 "src/parse/lex.cc"
yy562:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy555;
	goto yy561;
yy563:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3695 "src/parse/lex.cc"
yy565:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy566;
	if (yych <= '7') goto yy590;
yy566:
#line 726 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3704 "src/parse/lex.cc"
yy567:
	++YYCURSOR;
	goto yy566;
yy568:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy569;
		if (yych <= '9') goto yy592;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy569;
		if (yych <= 'f') goto yy592;
	}
yy569:
#line 725 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3722 "src/parse/lex.cc"
yy570:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy569;
		if (yych <= '9') goto yy593;
		goto yy569;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy569;
		if (yych <= 'f') goto yy593;
		goto yy569;
	}
yy571:
	++YYCURSOR;
#line 742 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3740 "src/parse/lex.cc"
yy573:
	++YYCURSOR;
#line 744 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3745 "src/parse/lex.cc"
yy575:
	++YYCURSOR;
#line 735 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3750 "src/parse/lex.cc"
yy577:
	++YYCURSOR;
#line 736 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3755 "src/parse/lex.cc"
yy579:
	++YYCURSOR;
#line 737 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3760 "src/parse/lex.cc"
yy581:
	++YYCURSOR;
#line 738 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3765 "src/parse/lex.cc"
yy583:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3770 "src/parse/lex.cc"
yy585:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3775 "src/parse/lex.cc"
yy587:
	++YYCURSOR;
#line 741 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3780 "src/parse/lex.cc"
yy589:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy569;
		if (yych <= '9') goto yy594;
		goto yy569;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy569;
		if (yych <= 'f') goto yy594;
		goto yy569;
	}
yy590:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy591;
	if (yych <= '7') goto yy595;
yy591:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy566;
	} else {
		goto yy569;
	}
yy592:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy597;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy597;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy597;
		goto yy591;
	}
yy593:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy598;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy598;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy598;
		goto yy591;
	}
yy594:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy599;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy599;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy599;
		goto yy591;
	}
yy595:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3845 "src/parse/lex.cc"
yy597:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy601;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy601;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy601;
		goto yy591;
	}
yy598:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy594;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy594;
		goto yy591;
	}
yy599:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3874 "src/parse/lex.cc"
yy601:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych >= ':') goto yy591;
	} else {
		if (yych <= 'F') goto yy602;
		if (yych <= '`') goto yy591;
		if (yych >= 'g') goto yy591;
	}
yy602:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy591;
		if (yych <= '9') goto yy593;
		goto yy591;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy591;
		if (yych <= 'f') goto yy593;
		goto yy591;
	}
}
#line 751 "../src/parse/lex.re"

    }
    else {
        
#line 3903 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy605;
			if (yych == '\n') goto yy609;
			goto yy607;
		} else {
			if (yych <= '\r') goto yy611;
			if (yych == '\\') goto yy612;
			goto yy607;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy614;
			if (yych <= 0xDF) goto yy616;
			if (yych <= 0xE0) goto yy617;
			goto yy618;
		} else {
			if (yych <= 0xF0) goto yy619;
			if (yych <= 0xF3) goto yy620;
			if (yych <= 0xF4) goto yy621;
			goto yy614;
		}
	}
yy605:
	++YYCURSOR;
#line 730 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3936 "src/parse/lex.cc"
yy607:
	++YYCURSOR;
yy608:
#line 732 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3942 "src/parse/lex.cc"
yy609:
	++YYCURSOR;
#line 724 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3947 "src/parse/lex.cc"
yy611:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy609;
	goto yy608;
yy612:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy622;
				} else {
					if (yych <= '\n') goto yy609;
					if (yych <= '\f') goto yy622;
					goto yy624;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy622;
					goto yy625;
				} else {
					if (yych <= '/') goto yy622;
					if (yych <= '3') goto yy627;
					goto yy629;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy622;
					goto yy630;
				} else {
					if (yych == 'X') goto yy632;
					goto yy622;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy633;
					goto yy635;
				} else {
					if (yych <= '`') goto yy622;
					if (yych <= 'a') goto yy637;
					goto yy639;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy622;
					goto yy641;
				} else {
					if (yych == 'n') goto yy643;
					goto yy622;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy645;
					goto yy622;
				} else {
					if (yych <= 't') goto yy647;
					if (yych <= 'u') goto yy632;
					goto yy649;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy622;
					goto yy651;
				} else {
					if (yych <= 0x7F) goto yy622;
					if (yych >= 0xC2) goto yy652;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy654;
					if (yych <= 0xEF) goto yy655;
					goto yy656;
				} else {
					if (yych <= 0xF3) goto yy657;
					if (yych <= 0xF4) goto yy658;
				}
			}
		}
	}
yy613:
#line 727 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4039 "src/parse/lex.cc"
yy614:
	++YYCURSOR;
yy615:
#line 728 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4045 "src/parse/lex.cc"
yy616:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy607;
	goto yy615;
yy617:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy615;
	if (yych <= 0xBF) goto yy659;
	goto yy615;
yy618:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy659;
	goto yy615;
yy619:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy615;
	if (yych <= 0xBF) goto yy660;
	goto yy615;
yy620:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0xBF) goto yy660;
	goto yy615;
yy621:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy615;
	if (yych <= 0x8F) goto yy660;
	goto yy615;
yy622:
	++YYCURSOR;
yy623:
#line 745 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4089 "src/parse/lex.cc"
yy624:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy609;
	goto yy623;
yy625:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4098 "src/parse/lex.cc"
yy627:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy628;
	if (yych <= '7') goto yy661;
yy628:
#line 726 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4107 "src/parse/lex.cc"
yy629:
	++YYCURSOR;
	goto yy628;
yy630:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy631;
		if (yych <= '9') goto yy662;
	} else {
		if (yych <= 'F') goto yy662;
		if (yych <= '`') goto yy631;
		if (yych <= 'f') goto yy662;
	}
yy631:
#line 725 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4125 "src/parse/lex.cc"
yy632:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy631;
		if (yych <= '9') goto yy663;
		goto yy631;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy631;
		if (yych <= 'f') goto yy663;
		goto yy631;
	}
yy633:
	++YYCURSOR;
#line 742 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4143 "src/parse/lex.cc"
yy635:
	++YYCURSOR;
#line 744 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4148 "src/parse/lex.cc"
yy637:
	++YYCURSOR;
#line 735 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4153 "src/parse/lex.cc"
yy639:
	++YYCURSOR;
#line 736 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4158 "src/parse/lex.cc"
yy641:
	++YYCURSOR;
#line 737 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4163 "src/parse/lex.cc"
yy643:
	++YYCURSOR;
#line 738 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4168 "src/parse/lex.cc"
yy645:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4173 "src/parse/lex.cc"
yy647:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4178 "src/parse/lex.cc"
yy649:
	++YYCURSOR;
#line 741 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4183 "src/parse/lex.cc"
yy651:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy631;
		if (yych <= '9') goto yy664;
		goto yy631;
	} else {
		if (yych <= 'F') goto yy664;
		if (yych <= '`') goto yy631;
		if (yych <= 'f') goto yy664;
		goto yy631;
	}
yy652:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0xBF) goto yy622;
yy653:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy613;
		} else {
			goto yy615;
		}
	} else {
		if (yyaccept == 2) {
			goto yy628;
		} else {
			goto yy631;
		}
	}
yy654:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy653;
	if (yych <= 0xBF) goto yy652;
	goto yy653;
yy655:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0xBF) goto yy652;
	goto yy653;
yy656:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy653;
	if (yych <= 0xBF) goto yy655;
	goto yy653;
yy657:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0xBF) goto yy655;
	goto yy653;
yy658:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0x8F) goto yy655;
	goto yy653;
yy659:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0xBF) goto yy607;
	goto yy653;
yy660:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy653;
	if (yych <= 0xBF) goto yy659;
	goto yy653;
yy661:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy653;
	if (yych <= '7') goto yy665;
	goto yy653;
yy662:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy667;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy667;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy667;
		goto yy653;
	}
yy663:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy668;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy668;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy668;
		goto yy653;
	}
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy669;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy669;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy669;
		goto yy653;
	}
yy665:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4296 "src/parse/lex.cc"
yy667:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy671;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy671;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy671;
		goto yy653;
	}
yy668:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy664;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy664;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy664;
		goto yy653;
	}
yy669:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4325 "src/parse/lex.cc"
yy671:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych >= ':') goto yy653;
	} else {
		if (yych <= 'F') goto yy672;
		if (yych <= '`') goto yy653;
		if (yych >= 'g') goto yy653;
	}
yy672:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy653;
		if (yych <= '9') goto yy663;
		goto yy653;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy653;
		if (yych <= 'f') goto yy663;
		goto yy653;
	}
}
#line 754 "../src/parse/lex.re"
 #line 754 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 788 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4364 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy675;
		if (yych == '\n') goto yy679;
		goto yy677;
	} else {
		if (yych <= '\r') goto yy681;
		if (yych == '\\') goto yy682;
		goto yy677;
	}
yy675:
	++YYCURSOR;
#line 770 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4383 "src/parse/lex.cc"
yy677:
	++YYCURSOR;
yy678:
#line 772 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4389 "src/parse/lex.cc"
yy679:
	++YYCURSOR;
#line 764 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4394 "src/parse/lex.cc"
yy681:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy679;
	goto yy678;
yy682:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy683;
				if (yych <= '\t') goto yy684;
				goto yy679;
			} else {
				if (yych == '\r') goto yy686;
				if (yych <= '/') goto yy684;
				goto yy687;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy689;
				if (yych == 'U') goto yy690;
				goto yy684;
			} else {
				if (yych <= 'X') goto yy692;
				if (yych == '\\') goto yy693;
				goto yy684;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy695;
				if (yych <= 'b') goto yy697;
				goto yy684;
			} else {
				if (yych <= 'f') goto yy699;
				if (yych == 'n') goto yy701;
				goto yy684;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy703;
				if (yych <= 's') goto yy684;
				if (yych <= 't') goto yy705;
				goto yy692;
			} else {
				if (yych <= 'v') goto yy707;
				if (yych == 'x') goto yy709;
				goto yy684;
			}
		}
	}
yy683:
#line 767 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4450 "src/parse/lex.cc"
yy684:
	++YYCURSOR;
yy685:
#line 783 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4460 "src/parse/lex.cc"
yy686:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy679;
	goto yy685;
yy687:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy688;
	if (yych <= '7') goto yy710;
yy688:
#line 766 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4473 "src/parse/lex.cc"
yy689:
	++YYCURSOR;
	goto yy688;
yy690:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy691;
		if (yych <= '9') goto yy712;
	} else {
		if (yych <= 'F') goto yy712;
		if (yych <= '`') goto yy691;
		if (yych <= 'f') goto yy712;
	}
yy691:
#line 765 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4491 "src/parse/lex.cc"
yy692:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy691;
		if (yych <= '9') goto yy713;
		goto yy691;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy691;
		if (yych <= 'f') goto yy713;
		goto yy691;
	}
yy693:
	++YYCURSOR;
#line 782 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4509 "src/parse/lex.cc"
yy695:
	++YYCURSOR;
#line 775 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4514 "src/parse/lex.cc"
yy697:
	++YYCURSOR;
#line 776 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4519 "src/parse/lex.cc"
yy699:
	++YYCURSOR;
#line 777 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4524 "src/parse/lex.cc"
yy701:
	++YYCURSOR;
#line 778 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4529 "src/parse/lex.cc"
yy703:
	++YYCURSOR;
#line 779 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4534 "src/parse/lex.cc"
yy705:
	++YYCURSOR;
#line 780 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4539 "src/parse/lex.cc"
yy707:
	++YYCURSOR;
#line 781 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4544 "src/parse/lex.cc"
yy709:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy691;
		if (yych <= '9') goto yy714;
		goto yy691;
	} else {
		if (yych <= 'F') goto yy714;
		if (yych <= '`') goto yy691;
		if (yych <= 'f') goto yy714;
		goto yy691;
	}
yy710:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy711;
	if (yych <= '7') goto yy715;
yy711:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy688;
	} else {
		goto yy691;
	}
yy712:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy717;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy717;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy717;
		goto yy711;
	}
yy713:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy718;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy718;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy718;
		goto yy711;
	}
yy714:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy719;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy719;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy719;
		goto yy711;
	}
yy715:
	++YYCURSOR;
#line 774 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4609 "src/parse/lex.cc"
yy717:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy721;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy721;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy721;
		goto yy711;
	}
yy718:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy714;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy714;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy714;
		goto yy711;
	}
yy719:
	++YYCURSOR;
#line 773 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4638 "src/parse/lex.cc"
yy721:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych >= ':') goto yy711;
	} else {
		if (yych <= 'F') goto yy722;
		if (yych <= '`') goto yy711;
		if (yych >= 'g') goto yy711;
	}
yy722:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy711;
		if (yych <= '9') goto yy713;
		goto yy711;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy711;
		if (yych <= 'f') goto yy713;
		goto yy711;
	}
}
#line 790 "../src/parse/lex.re"

    }
    else {
        
#line 4667 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy725;
			if (yych == '\n') goto yy729;
			goto yy727;
		} else {
			if (yych <= '\r') goto yy731;
			if (yych == '\\') goto yy732;
			goto yy727;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy734;
			if (yych <= 0xDF) goto yy736;
			if (yych <= 0xE0) goto yy737;
			goto yy738;
		} else {
			if (yych <= 0xF0) goto yy739;
			if (yych <= 0xF3) goto yy740;
			if (yych <= 0xF4) goto yy741;
			goto yy734;
		}
	}
yy725:
	++YYCURSOR;
#line 770 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4700 "src/parse/lex.cc"
yy727:
	++YYCURSOR;
yy728:
#line 772 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4706 "src/parse/lex.cc"
yy729:
	++YYCURSOR;
#line 764 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4711 "src/parse/lex.cc"
yy731:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy729;
	goto yy728;
yy732:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy733;
				if (yych == '\n') goto yy729;
				goto yy742;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy744;
					goto yy742;
				} else {
					if (yych <= '3') goto yy745;
					if (yych <= '7') goto yy747;
					goto yy742;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy748;
					goto yy742;
				} else {
					if (yych <= 'X') goto yy750;
					if (yych <= '[') goto yy742;
					goto yy751;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy742;
					goto yy753;
				} else {
					if (yych <= 'b') goto yy755;
					if (yych <= 'e') goto yy742;
					goto yy757;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy759;
				if (yych <= 'q') goto yy742;
				goto yy761;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy742;
					goto yy763;
				} else {
					if (yych <= 'u') goto yy750;
					if (yych <= 'v') goto yy765;
					goto yy742;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy767;
					goto yy742;
				} else {
					if (yych <= 0xC1) goto yy733;
					if (yych <= 0xDF) goto yy768;
					goto yy770;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy771;
					goto yy772;
				} else {
					if (yych <= 0xF3) goto yy773;
					if (yych <= 0xF4) goto yy774;
				}
			}
		}
	}
yy733:
#line 767 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4796 "src/parse/lex.cc"
yy734:
	++YYCURSOR;
yy735:
#line 768 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4802 "src/parse/lex.cc"
yy736:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy735;
	if (yych <= 0xBF) goto yy727;
	goto yy735;
yy737:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy735;
	if (yych <= 0xBF) goto yy775;
	goto yy735;
yy738:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy735;
	if (yych <= 0xBF) goto yy775;
	goto yy735;
yy739:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy735;
	if (yych <= 0xBF) goto yy776;
	goto yy735;
yy740:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy735;
	if (yych <= 0xBF) goto yy776;
	goto yy735;
yy741:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy735;
	if (yych <= 0x8F) goto yy776;
	goto yy735;
yy742:
	++YYCURSOR;
yy743:
#line 783 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4847 "src/parse/lex.cc"
yy744:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy729;
	goto yy743;
yy745:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy746;
	if (yych <= '7') goto yy777;
yy746:
#line 766 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4860 "src/parse/lex.cc"
yy747:
	++YYCURSOR;
	goto yy746;
yy748:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy749;
		if (yych <= '9') goto yy778;
	} else {
		if (yych <= 'F') goto yy778;
		if (yych <= '`') goto yy749;
		if (yych <= 'f') goto yy778;
	}
yy749:
#line 765 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4878 "src/parse/lex.cc"
yy750:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy749;
		if (yych <= '9') goto yy779;
		goto yy749;
	} else {
		if (yych <= 'F') goto yy779;
		if (yych <= '`') goto yy749;
		if (yych <= 'f') goto yy779;
		goto yy749;
	}
yy751:
	++YYCURSOR;
#line 782 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4896 "src/parse/lex.cc"
yy753:
	++YYCURSOR;
#line 775 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4901 "src/parse/lex.cc"
yy755:
	++YYCURSOR;
#line 776 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4906 "src/parse/lex.cc"
yy757:
	++YYCURSOR;
#line 777 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4911 "src/parse/lex.cc"
yy759:
	++YYCURSOR;
#line 778 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4916 "src/parse/lex.cc"
yy761:
	++YYCURSOR;
#line 779 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4921 "src/parse/lex.cc"
yy763:
	++YYCURSOR;
#line 780 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4926 "src/parse/lex.cc"
yy765:
	++YYCURSOR;
#line 781 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4931 "src/parse/lex.cc"
yy767:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy749;
		if (yych <= '9') goto yy780;
		goto yy749;
	} else {
		if (yych <= 'F') goto yy780;
		if (yych <= '`') goto yy749;
		if (yych <= 'f') goto yy780;
		goto yy749;
	}
yy768:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0xBF) goto yy742;
yy769:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy733;
		} else {
			goto yy735;
		}
	} else {
		if (yyaccept == 2) {
			goto yy746;
		} else {
			goto yy749;
		}
	}
yy770:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy769;
	if (yych <= 0xBF) goto yy768;
	goto yy769;
yy771:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0xBF) goto yy768;
	goto yy769;
yy772:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy769;
	if (yych <= 0xBF) goto yy771;
	goto yy769;
yy773:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0xBF) goto yy771;
	goto yy769;
yy774:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0x8F) goto yy771;
	goto yy769;
yy775:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0xBF) goto yy727;
	goto yy769;
yy776:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy769;
	if (yych <= 0xBF) goto yy775;
	goto yy769;
yy777:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy769;
	if (yych <= '7') goto yy781;
	goto yy769;
yy778:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy783;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy783;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy783;
		goto yy769;
	}
yy779:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy784;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy784;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy784;
		goto yy769;
	}
yy780:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy785;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy785;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy785;
		goto yy769;
	}
yy781:
	++YYCURSOR;
#line 774 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5044 "src/parse/lex.cc"
yy783:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy787;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy787;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy787;
		goto yy769;
	}
yy784:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy780;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy780;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy780;
		goto yy769;
	}
yy785:
	++YYCURSOR;
#line 773 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5073 "src/parse/lex.cc"
yy787:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych >= ':') goto yy769;
	} else {
		if (yych <= 'F') goto yy788;
		if (yych <= '`') goto yy769;
		if (yych >= 'g') goto yy769;
	}
yy788:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy769;
		if (yych <= '9') goto yy779;
		goto yy769;
	} else {
		if (yych <= 'F') goto yy779;
		if (yych <= '`') goto yy769;
		if (yych <= 'f') goto yy779;
		goto yy769;
	}
}
#line 793 "../src/parse/lex.re"
 #line 793 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5121 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy793;
		} else {
			if (yych <= '\n') goto yy795;
			if (yych <= '\f') goto yy793;
			goto yy797;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy793;
			goto yy798;
		} else {
			if (yych <= '0') goto yy793;
			if (yych <= '9') goto yy799;
			goto yy793;
		}
	}
	++YYCURSOR;
#line 835 "../src/parse/lex.re"
	{ --cur; return; }
#line 5181 "src/parse/lex.cc"
yy793:
	++YYCURSOR;
yy794:
#line 836 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5187 "src/parse/lex.cc"
yy795:
	++YYCURSOR;
#line 834 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5192 "src/parse/lex.cc"
yy797:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy795;
	goto yy794;
yy798:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy794;
	if (yych == '\n') goto yy794;
	goto yy803;
yy799:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy799;
	}
#line 815 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5219 "src/parse/lex.cc"
yy802:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy803:
	if (yybm[0+yych] & 128) {
		goto yy802;
	}
	if (yych <= '\n') goto yy804;
	if (yych <= '"') goto yy805;
	goto yy807;
yy804:
	YYCURSOR = YYMARKER;
	goto yy794;
yy805:
	++YYCURSOR;
#line 825 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5245 "src/parse/lex.cc"
yy807:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy804;
	if (yych == '\n') goto yy804;
	goto yy802;
}
#line 837 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
