/* Generated by re2c 3.0 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include <stdint.h>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/regexp/rule.h"
#include "src/util/check.h"
#include "src/util/string_utils.h"
#include "parser.h"

extern YYSTYPE yylval;

namespace re2c {

// Global re2c configurations and definitions.
#line 60 "../src/parse/lex.re"


#line 119 "../src/parse/lex.re"


#define RET_BLOCK(k) do { kind = k; return Ret::OK; } while(0)

Ret Scanner::echo(Output& out, std::string& block_name, InputBlock& kind) {
    const opt_t* opts = out.block().opts;
    OutAllocator& alc = out.allocator;
    const uint8_t* x, *y;

    if (is_eof()) RET_BLOCK(InputBlock::END);

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 53 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) if (!fill(18)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy1;
			if (yych <= 0x08) goto yy2;
			goto yy4;
		} else {
			if (yych <= '\n') goto yy5;
			if (yych <= '\f') goto yy2;
			goto yy7;
		}
	} else {
		if (yych <= '$') {
			if (yych == ' ') goto yy4;
			goto yy2;
		} else {
			if (yych <= '%') goto yy8;
			if (yych == '/') goto yy9;
			goto yy2;
		}
	}
yy1:
	++cur;
#line 265 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            RET_BLOCK(InputBlock::END);
        }
        goto loop;
    }
#line 123 "src/parse/lex.cc"
yy2:
	++cur;
yy3:
#line 285 "../src/parse/lex.re"
	{ goto loop; }
#line 129 "src/parse/lex.cc"
yy4:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
	goto yy3;
yy5:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych == '#') goto yy14;
	}
yy6:
#line 280 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 153 "src/parse/lex.cc"
yy7:
	yych = *++cur;
	if (yych == '\n') goto yy5;
	goto yy3;
yy8:
	yych = *++cur;
	if (yych == '{') goto yy15;
	goto yy3;
yy9:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych == '*') goto yy16;
	goto yy3;
yy10:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
yy11:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy3;
			} else {
				goto yy6;
			}
		} else {
			goto yy155;
		}
	} else {
		if (yyaccept == 3) {
			goto yy157;
		} else {
			goto yy165;
		}
	}
yy12:
	yych = *++cur;
	if (yych == '{') goto yy15;
	goto yy11;
yy13:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych != '#') goto yy11;
	}
yy14:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy17;
		goto yy11;
	}
yy15:
	++cur;
#line 136 "../src/parse/lex.re"
	{
        if (pos != ptr) {
            // re2c does not parse user-defined code outside of re2c blocks, therefore it can
            // confuse `%{` in the middle of a string or a comment with a block start. To avoid this
            // recognize `%{` as a block start only on a new line, possibly preceded by whitespaces.
            goto loop;
        }
        out.wraw(tok, ptr);
        block_name.clear();
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 235 "src/parse/lex.cc"
yy16:
	yych = *++cur;
	if (yych == '!') goto yy18;
	goto yy11;
yy17:
	yych = *++cur;
	if (yych == 'i') goto yy19;
	goto yy11;
yy18:
	yych = *++cur;
	switch (yych) {
		case 'c': goto yy20;
		case 'g': goto yy21;
		case 'h': goto yy22;
		case 'i': goto yy23;
		case 'l': goto yy24;
		case 'm': goto yy25;
		case 'r': goto yy26;
		case 's': goto yy27;
		case 't': goto yy28;
		case 'u': goto yy29;
		default: goto yy11;
	}
yy19:
	yych = *++cur;
	if (yych == 'n') goto yy30;
	goto yy11;
yy20:
	yych = *++cur;
	if (yych == 'o') goto yy31;
	goto yy11;
yy21:
	yych = *++cur;
	if (yych == 'e') goto yy32;
	goto yy11;
yy22:
	yych = *++cur;
	if (yych == 'e') goto yy33;
	goto yy11;
yy23:
	yych = *++cur;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy11;
yy24:
	yych = *++cur;
	if (yych == 'o') goto yy36;
	goto yy11;
yy25:
	yych = *++cur;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy11;
yy26:
	yych = *++cur;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy11;
yy27:
	yych = *++cur;
	if (yych == 't') goto yy41;
	goto yy11;
yy28:
	yych = *++cur;
	if (yych == 'y') goto yy42;
	goto yy11;
yy29:
	yych = *++cur;
	if (yych == 's') goto yy43;
	goto yy11;
yy30:
	yych = *++cur;
	if (yych == 'e') goto yy44;
	goto yy11;
yy31:
	yych = *++cur;
	if (yych == 'n') goto yy45;
	goto yy11;
yy32:
	yych = *++cur;
	if (yych == 't') goto yy46;
	goto yy11;
yy33:
	yych = *++cur;
	if (yych == 'a') goto yy47;
	goto yy11;
yy34:
	yych = *++cur;
	if (yych == 'n') goto yy48;
	goto yy11;
yy35:
	yych = *++cur;
	if (yych == 'c') goto yy49;
	goto yy11;
yy36:
	yych = *++cur;
	if (yych == 'c') goto yy50;
	goto yy11;
yy37:
	yych = *++cur;
	if (yych == 'x') goto yy51;
	goto yy11;
yy38:
	yych = *++cur;
	if (yych == 'a') goto yy52;
	goto yy11;
yy39:
	yych = *++cur;
	if (yych == '2') goto yy53;
	goto yy11;
yy40:
	yych = *++cur;
	if (yych == 'l') goto yy54;
	goto yy11;
yy41:
	yych = *++cur;
	if (yych == 'a') goto yy55;
	goto yy11;
yy42:
	yych = *++cur;
	if (yych == 'p') goto yy56;
	goto yy11;
yy43:
	yych = *++cur;
	if (yych == 'e') goto yy57;
	goto yy11;
yy44:
	yych = *++cur;
	if (yych <= '0') goto yy59;
	if (yych <= '9') goto yy11;
	goto yy59;
yy45:
	yych = *++cur;
	if (yych == 'd') goto yy60;
	goto yy11;
yy46:
	yych = *++cur;
	if (yych == 's') goto yy61;
	goto yy11;
yy47:
	yych = *++cur;
	if (yych == 'd') goto yy62;
	goto yy11;
yy48:
	yych = *++cur;
	if (yych == 'o') goto yy63;
	goto yy11;
yy49:
	yych = *++cur;
	if (yych == 'l') goto yy64;
	goto yy11;
yy50:
	yych = *++cur;
	if (yych == 'a') goto yy65;
	goto yy11;
yy51:
	yych = *++cur;
	if (yych == ':') goto yy66;
	if (yych == 'n') goto yy67;
	goto yy11;
yy52:
	yych = *++cur;
	if (yych == 'g') goto yy68;
	goto yy11;
yy53:
	yych = *++cur;
	if (yych == 'c') goto yy69;
	goto yy11;
yy54:
	yych = *++cur;
	if (yych == 'e') goto yy70;
	goto yy11;
yy55:
	yych = *++cur;
	if (yych == 'g') goto yy71;
	goto yy11;
yy56:
	yych = *++cur;
	if (yych == 'e') goto yy72;
	goto yy11;
yy57:
	yych = *++cur;
	if (yych == ':') goto yy73;
	goto yy11;
yy58:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy59:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy58;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy58;
		if (yych <= '0') goto yy11;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy74;
		}
		goto yy11;
	}
yy60:
	yych = *++cur;
	if (yych == 'i') goto yy75;
	goto yy11;
yy61:
	yych = *++cur;
	if (yych == 't') goto yy76;
	goto yy11;
yy62:
	yych = *++cur;
	if (yych == 'e') goto yy77;
	goto yy11;
yy63:
	yych = *++cur;
	if (yych == 'r') goto yy78;
	goto yy11;
yy64:
	yych = *++cur;
	if (yych == 'u') goto yy79;
	goto yy11;
yy65:
	yych = *++cur;
	if (yych == 'l') goto yy80;
	goto yy11;
yy66:
	yych = *++cur;
	if (yych == 'r') goto yy81;
	goto yy11;
yy67:
	yych = *++cur;
	if (yych == 'm') goto yy82;
	goto yy11;
yy68:
	yych = *++cur;
	if (yych == 's') goto yy83;
	goto yy11;
yy69:
	++cur;
#line 148 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        if (block_name == "local") {
            RET_FAIL(msg.error(cur_loc(), "ill-formed local block, expected `local:re2c`"));
        }
        RET_BLOCK(InputBlock::GLOBAL);
    }
#line 484 "src/parse/lex.cc"
yy70:
	yych = *++cur;
	if (yych == 's') goto yy84;
	goto yy11;
yy71:
	yych = *++cur;
	if (yych == 's') goto yy85;
	goto yy11;
yy72:
	yych = *++cur;
	if (yych == 's') goto yy86;
	goto yy11;
yy73:
	yych = *++cur;
	if (yych == 'r') goto yy87;
	goto yy11;
yy74:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy74;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\t') goto yy88;
		if (yych <= '\n') goto yy89;
		goto yy11;
	} else {
		if (yych <= '\r') goto yy90;
		if (yych == ' ') goto yy88;
		goto yy11;
	}
yy75:
	yych = *++cur;
	if (yych == 't') goto yy91;
	goto yy11;
yy76:
	yych = *++cur;
	if (yych == 'a') goto yy92;
	goto yy11;
yy77:
	yych = *++cur;
	if (yych == 'r') goto yy93;
	goto yy11;
yy78:
	yych = *++cur;
	if (yych == 'e') goto yy94;
	goto yy11;
yy79:
	yych = *++cur;
	if (yych == 'd') goto yy95;
	goto yy11;
yy80:
	yych = *++cur;
	if (yych == ':') goto yy96;
	goto yy11;
yy81:
	yych = *++cur;
	if (yych == 'e') goto yy97;
	goto yy11;
yy82:
	yych = *++cur;
	if (yych == 'a') goto yy98;
	goto yy11;
yy83:
	yych = *++cur;
	if (yych == ':') goto yy99;
	goto yy11;
yy84:
	yych = *++cur;
	if (yych == ':') goto yy100;
	goto yy11;
yy85:
	yych = *++cur;
	if (yych == ':') goto yy101;
	goto yy11;
yy86:
	yych = *++cur;
	if (yych == ':') goto yy102;
	goto yy11;
yy87:
	yych = *++cur;
	if (yych == 'e') goto yy103;
	goto yy11;
yy88:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy88;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy88;
		if (yych == '"') goto yy104;
		goto yy11;
	}
yy89:
	++cur;
	cur = yyt1;
#line 273 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        CHECK_RET(set_sourceline());
        goto next;
    }
#line 592 "src/parse/lex.cc"
yy90:
	yych = *++cur;
	if (yych == '\n') goto yy89;
	goto yy11;
yy91:
	yych = *++cur;
	if (yych == 'i') goto yy105;
	goto yy11;
yy92:
	yych = *++cur;
	if (yych == 't') goto yy106;
	goto yy11;
yy93:
	yych = *++cur;
	if (yych == ':') goto yy107;
	goto yy11;
yy94:
	yych = *++cur;
	if (yych == ':') goto yy108;
	goto yy11;
yy95:
	yych = *++cur;
	if (yych == 'e') goto yy109;
	goto yy11;
yy96:
	yych = *++cur;
	if (yych == 'r') goto yy110;
	goto yy11;
yy97:
	yych = *++cur;
	if (yych == '2') goto yy111;
	goto yy11;
yy98:
	yych = *++cur;
	if (yych == 't') goto yy112;
	goto yy11;
yy99:
	yych = *++cur;
	if (yych == 'r') goto yy113;
	goto yy11;
yy100:
	yych = *++cur;
	if (yych == 'r') goto yy114;
	goto yy11;
yy101:
	yych = *++cur;
	if (yych == 'r') goto yy115;
	goto yy11;
yy102:
	yych = *++cur;
	if (yych == 'r') goto yy116;
	goto yy11;
yy103:
	yych = *++cur;
	if (yych == '2') goto yy117;
	goto yy11;
yy104:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy11;
	if (yych <= '"') goto yy118;
	goto yy119;
yy105:
	yych = *++cur;
	if (yych == 'o') goto yy120;
	goto yy11;
yy106:
	yych = *++cur;
	if (yych == 'e') goto yy121;
	goto yy11;
yy107:
	yych = *++cur;
	if (yych == 'r') goto yy122;
	goto yy11;
yy108:
	yych = *++cur;
	if (yych == 'r') goto yy123;
	goto yy11;
yy109:
	yych = *++cur;
	if (yych == ':') goto yy124;
	goto yy11;
yy110:
	yych = *++cur;
	if (yych == 'e') goto yy125;
	goto yy11;
yy111:
	yych = *++cur;
	if (yych == 'c') goto yy126;
	goto yy11;
yy112:
	yych = *++cur;
	if (yych == 'c') goto yy127;
	goto yy11;
yy113:
	yych = *++cur;
	if (yych == 'e') goto yy128;
	goto yy11;
yy114:
	yych = *++cur;
	if (yych == 'e') goto yy129;
	goto yy11;
yy115:
	yych = *++cur;
	if (yych == 'e') goto yy130;
	goto yy11;
yy116:
	yych = *++cur;
	if (yych == 'e') goto yy131;
	goto yy11;
yy117:
	yych = *++cur;
	if (yych == 'c') goto yy132;
	goto yy11;
yy118:
	yych = *++cur;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy90;
	goto yy11;
yy119:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy104;
yy120:
	yych = *++cur;
	if (yych == 'n') goto yy72;
	goto yy11;
yy121:
	yych = *++cur;
	if (yych == ':') goto yy133;
	goto yy11;
yy122:
	yych = *++cur;
	if (yych == 'e') goto yy134;
	goto yy11;
yy123:
	yych = *++cur;
	if (yych == 'e') goto yy135;
	goto yy11;
yy124:
	yych = *++cur;
	if (yych == 'r') goto yy136;
	goto yy11;
yy125:
	yych = *++cur;
	if (yych == '2') goto yy137;
	goto yy11;
yy126:
	++cur;
#line 175 "../src/parse/lex.re"
	{
        CHECK_RET(lex_block(out, CodeKind::MAXFILL, 0, DCONF_FORMAT));
        goto next;
    }
#line 754 "src/parse/lex.cc"
yy127:
	yych = *++cur;
	if (yych == 'h') goto yy138;
	goto yy11;
yy128:
	yych = *++cur;
	if (yych == '2') goto yy139;
	goto yy11;
yy129:
	yych = *++cur;
	if (yych == '2') goto yy140;
	goto yy11;
yy130:
	yych = *++cur;
	if (yych == '2') goto yy141;
	goto yy11;
yy131:
	yych = *++cur;
	if (yych == '2') goto yy142;
	goto yy11;
yy132:
	++cur;
#line 169 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::USE);
    }
#line 783 "src/parse/lex.cc"
yy133:
	yych = *++cur;
	if (yych == 'r') goto yy143;
	goto yy11;
yy134:
	yych = *++cur;
	if (yych == '2') goto yy144;
	goto yy11;
yy135:
	yych = *++cur;
	if (yych == '2') goto yy145;
	goto yy11;
yy136:
	yych = *++cur;
	if (yych == 'e') goto yy146;
	goto yy11;
yy137:
	yych = *++cur;
	if (yych == 'c') goto yy147;
	goto yy11;
yy138:
	yych = *++cur;
	if (yych == ':') goto yy148;
	goto yy11;
yy139:
	yych = *++cur;
	if (yych == 'c') goto yy149;
	goto yy11;
yy140:
	yych = *++cur;
	if (yych == 'c') goto yy150;
	goto yy11;
yy141:
	yych = *++cur;
	if (yych == 'c') goto yy151;
	goto yy11;
yy142:
	yych = *++cur;
	if (yych == 'c') goto yy152;
	goto yy11;
yy143:
	yych = *++cur;
	if (yych == 'e') goto yy153;
	goto yy11;
yy144:
	yych = *++cur;
	if (yych == 'c') goto yy154;
	goto yy11;
yy145:
	yych = *++cur;
	if (yych == 'c') goto yy156;
	goto yy11;
yy146:
	yych = *++cur;
	if (yych == '2') goto yy158;
	goto yy11;
yy147:
	++cur;
#line 157 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::LOCAL);
    }
#line 848 "src/parse/lex.cc"
yy148:
	yych = *++cur;
	if (yych == 'r') goto yy159;
	goto yy11;
yy149:
	++cur;
#line 191 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_block(out, CodeKind::MTAGS, 0, allow));
        goto next;
    }
#line 861 "src/parse/lex.cc"
yy150:
	++cur;
#line 163 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        CHECK_RET(lex_opt_name(block_name));
        RET_BLOCK(InputBlock::RULES);
    }
#line 870 "src/parse/lex.cc"
yy151:
	++cur;
#line 185 "../src/parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_block(out, CodeKind::STAGS, 0, allow));
        goto next;
    }
#line 879 "src/parse/lex.cc"
yy152:
	++cur;
#line 197 "../src/parse/lex.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        CHECK_RET(lex_block(out, CodeKind::COND_ENUM, opts->topIndent, allow));
        goto next;
    }
#line 890 "src/parse/lex.cc"
yy153:
	yych = *++cur;
	if (yych == '2') goto yy160;
	goto yy11;
yy154:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy161;
yy155:
#line 234 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed header directive: expected `/*!header:re2c:<on|off>` "
                           "followed by a space, a newline or the end of block `*" "/`"));
    }
#line 906 "src/parse/lex.cc"
yy156:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy157;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy162;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy162;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy162;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy163;
			}
		}
	}
yy157:
#line 259 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed start of `ignore:re2c` block: expected a space, a newline, "
                           "or the end of block `*" "/`"));
    }
#line 940 "src/parse/lex.cc"
yy158:
	yych = *++cur;
	if (yych == 'c') goto yy164;
	goto yy11;
yy159:
	yych = *++cur;
	if (yych == 'e') goto yy166;
	goto yy11;
yy160:
	yych = *++cur;
	if (yych == 'c') goto yy167;
	goto yy11;
yy161:
	yych = *++cur;
	if (yych == 'o') goto yy168;
	goto yy11;
yy162:
	++cur;
	cur = yyt1;
#line 253 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        CHECK_RET(lex_block_end(out, true));
        goto next;
    }
#line 967 "src/parse/lex.cc"
yy163:
	yych = *++cur;
	if (yych == '/') goto yy162;
	goto yy11;
yy164:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy169;
	if (yych == ' ') goto yy169;
yy165:
#line 247 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed include directive: expected `/*!include:re2c \"<file>\" *"
                           "/`"));
    }
#line 984 "src/parse/lex.cc"
yy166:
	yych = *++cur;
	if (yych == '2') goto yy170;
	goto yy11;
yy167:
	++cur;
#line 205 "../src/parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            RET_FAIL(msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option"));
        } else if (opts->loop_switch) {
            RET_FAIL(msg.error(cur_loc(),
                               "`getstate:re2c` is incompatible with the --loop-switch option, as "
                               "it requires cross-block transitions that are unsupported without "
                               "the `goto` statement"));
        }
        CHECK_RET(lex_block(out, CodeKind::STATE_GOTO, opts->topIndent, 0));
        goto next;
    }
#line 1005 "src/parse/lex.cc"
yy168:
	yych = *++cur;
	if (yych == 'f') goto yy171;
	if (yych == 'n') goto yy172;
	goto yy11;
yy169:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy169;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy169;
		if (yych == '"') {
			yyt1 = cur;
			goto yy173;
		}
		goto yy11;
	}
yy170:
	yych = *++cur;
	if (yych == 'c') goto yy174;
	goto yy11;
yy171:
	yych = *++cur;
	if (yych == 'f') goto yy175;
	goto yy11;
yy172:
	++cur;
#line 219 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1044 "src/parse/lex.cc"
yy173:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy11;
		if (yych == '\n') goto yy11;
		goto yy173;
	} else {
		if (yych <= '"') goto yy176;
		if (yych == '\\') goto yy177;
		goto yy173;
	}
yy174:
	++cur;
#line 180 "../src/parse/lex.re"
	{
        CHECK_RET(lex_block(out, CodeKind::MAXNMATCH, 0, DCONF_FORMAT));
        goto next;
    }
#line 1065 "src/parse/lex.cc"
yy175:
	++cur;
#line 227 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        CHECK_RET(lex_block_end(out));
        goto next;
    }
#line 1076 "src/parse/lex.cc"
yy176:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy178;
		}
		if (yych <= '\f') goto yy11;
		yyt2 = cur;
		goto yy178;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy11;
			yyt2 = cur;
			goto yy178;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy179;
			}
			goto yy11;
		}
	}
yy177:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy173;
yy178:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 240 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        CHECK_RET(lex_block_end(out));
        CHECK_RET(include(getstr(x + 1, y - 1), ptr));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1121 "src/parse/lex.cc"
yy179:
	yych = *++cur;
	if (yych == '/') goto yy178;
	goto yy11;
}
#line 286 "../src/parse/lex.re"

}

#undef RET_BLOCK

Ret Scanner::lex_opt_name(std::string& name) {
    tok = cur;

#line 1136 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy182;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy182;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy182;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy183;
			}
		} else {
			if (yych == ':') goto yy185;
		}
	}
yy181:
#line 294 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed start of a block: expected a space, a newline, a colon "
                           "followed by a block name, or the end of block `*" "/`"));
    }
#line 1208 "src/parse/lex.cc"
yy182:
	++cur;
	cur = yyt1;
#line 300 "../src/parse/lex.re"
	{ name.clear();              return Ret::OK; }
#line 1214 "src/parse/lex.cc"
yy183:
	yych = *++cur;
	if (yych == '/') goto yy182;
yy184:
	cur = mar;
	goto yy181;
yy185:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych >= '[') goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych >= '{') goto yy184;
	}
yy186:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy186;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy184;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy187;
		}
		if (yych <= '\f') goto yy184;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy184;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy188;
			}
			goto yy184;
		}
	}
yy187:
	++cur;
	cur = yyt1;
#line 301 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return Ret::OK; }
#line 1262 "src/parse/lex.cc"
yy188:
	yych = *++cur;
	if (yych == '/') goto yy187;
	goto yy184;
}
#line 302 "../src/parse/lex.re"

}

Ret Scanner::lex_name_list(OutAllocator& alc, BlockNameList** ptail) {
    BlockNameList** phead = ptail;
loop:
    tok = cur;

#line 1277 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy191;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy191;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy191;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy192;
			}
		} else {
			if (yych == ':') goto yy194;
		}
	}
yy190:
#line 310 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed start of a block: expected a space, a newline, a colon "
                           "followed by a list of colon-separated block names, or the end of block "
                           "`*" "/`"));
    }
#line 1350 "src/parse/lex.cc"
yy191:
	++cur;
	cur = yyt1;
#line 317 "../src/parse/lex.re"
	{ *ptail = nullptr; return Ret::OK; }
#line 1356 "src/parse/lex.cc"
yy192:
	yych = *++cur;
	if (yych == '/') goto yy191;
yy193:
	cur = mar;
	goto yy190;
yy194:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy193;
		if (yych >= '[') goto yy193;
	} else {
		if (yych == '`') goto yy193;
		if (yych >= '{') goto yy193;
	}
yy195:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy195;
	}
#line 319 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = nullptr;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                RET_FAIL(msg.error(cur_loc(), "duplicate block '%s' on the list", p->name));
            }
        }

        goto loop;
    }
#line 1396 "src/parse/lex.cc"
}
#line 335 "../src/parse/lex.re"

}

Ret Scanner::lex_block_end(Output& out, bool allow_garbage) {
    bool multiline = false;
loop: 
#line 1405 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy197;
		if (yych <= '\n') goto yy200;
	} else {
		if (yych <= '\r') goto yy201;
		if (yych == '*') goto yy202;
	}
yy197:
	++cur;
yy198:
#line 341 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed end of block: expected optional whitespaces followed by `*"
                           "/`"));
    }
#line 1464 "src/parse/lex.cc"
yy199:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
#line 353 "../src/parse/lex.re"
	{ goto loop; }
#line 1474 "src/parse/lex.cc"
yy200:
	++cur;
#line 354 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1479 "src/parse/lex.cc"
yy201:
	yych = *++cur;
	if (yych == '\n') goto yy200;
	goto yy198;
yy202:
	yych = *++cur;
	if (yych != '/') goto yy198;
	++cur;
#line 347 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return Ret::OK;
    }
#line 1495 "src/parse/lex.cc"
}
#line 355 "../src/parse/lex.re"

}

Ret Scanner::lex_block(Output& out, CodeKind kind, uint32_t indent, uint32_t mask) {
    OutAllocator& alc = out.allocator;
    const char* fmt = nullptr, *sep = nullptr;
    BlockNameList* blocks;
    std::string s;

    out.wraw(tok, ptr, !globopts->iFlag);
    CHECK_RET(lex_name_list(alc, &blocks));

loop: 
#line 1511 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy206;
		} else {
			if (yych == '\r') goto yy207;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy208;
			if (yych >= 'f') goto yy209;
		} else {
			if (yych == 's') goto yy210;
		}
	}
	++cur;
yy204:
#line 368 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(cur_loc(),
                           "ill-formed directive: expected optional configurations followed by the "
                           "end of block `*" "/`"));
    }
#line 1575 "src/parse/lex.cc"
yy205:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
#line 392 "../src/parse/lex.re"
	{ goto loop; }
#line 1585 "src/parse/lex.cc"
yy206:
	++cur;
#line 394 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1590 "src/parse/lex.cc"
yy207:
	yych = *++cur;
	if (yych == '\n') goto yy206;
	goto yy204;
yy208:
	yych = *++cur;
	if (yych == '/') goto yy211;
	goto yy204;
yy209:
	yych = *(mar = ++cur);
	if (yych == 'o') goto yy212;
	goto yy204;
yy210:
	yych = *(mar = ++cur);
	if (yych == 'e') goto yy214;
	goto yy204;
yy211:
	++cur;
#line 396 "../src/parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return Ret::OK;
    }
#line 1616 "src/parse/lex.cc"
yy212:
	yych = *++cur;
	if (yych == 'r') goto yy215;
yy213:
	cur = mar;
	goto yy204;
yy214:
	yych = *++cur;
	if (yych == 'p') goto yy216;
	goto yy213;
yy215:
	yych = *++cur;
	if (yych == 'm') goto yy217;
	goto yy213;
yy216:
	yych = *++cur;
	if (yych == 'a') goto yy218;
	goto yy213;
yy217:
	yych = *++cur;
	if (yych == 'a') goto yy219;
	goto yy213;
yy218:
	yych = *++cur;
	if (yych == 'r') goto yy220;
	goto yy213;
yy219:
	yych = *++cur;
	if (yych == 't') goto yy221;
	goto yy213;
yy220:
	yych = *++cur;
	if (yych == 'a') goto yy222;
	goto yy213;
yy221:
	++cur;
#line 374 "../src/parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            RET_FAIL(msg.error(cur_loc(), "unexpected configuration 'format'"));
        }
        CHECK_RET(lex_conf_string(s));
        fmt = copystr(s, alc);
        goto loop;
    }
#line 1662 "src/parse/lex.cc"
yy222:
	yych = *++cur;
	if (yych != 't') goto yy213;
	yych = *++cur;
	if (yych != 'o') goto yy213;
	yych = *++cur;
	if (yych != 'r') goto yy213;
	++cur;
#line 383 "../src/parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            RET_FAIL(msg.error(cur_loc(), "unexpected configuration 'separator'"));
        }
        CHECK_RET(lex_conf_string(s));
        sep = copystr(s, alc);
        goto loop;
    }
#line 1680 "src/parse/lex.cc"
}
#line 402 "../src/parse/lex.re"

}

#define RET_TOK(t) do { token = t; return Ret::OK; } while(0)

Ret Scanner::scan(Ast& ast, int& token) {
    const uint8_t* p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1694 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) if (!fill(9)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy224;
				if (yych <= '\n') goto yy227;
				if (yych >= '\r') goto yy229;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy230;
				} else {
					if (yych <= '"') goto yy231;
					if (yych <= '#') goto yy232;
					goto yy233;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy235;
				} else {
					if (yych <= '\'') goto yy236;
					if (yych <= ')') goto yy233;
					goto yy237;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy233;
				} else {
					if (yych <= '.') goto yy238;
					if (yych <= '/') goto yy239;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy240;
				if (yych <= ';') goto yy233;
				if (yych <= '<') goto yy241;
				goto yy242;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy233;
				} else {
					if (yych <= '@') goto yy232;
					if (yych <= 'Z') goto yy243;
					goto yy245;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy233;
				} else {
					if (yych != '`') goto yy243;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy246;
					goto yy243;
				} else {
					if (yych <= '{') goto yy247;
					if (yych <= '|') goto yy233;
				}
			}
		}
	}
yy224:
	++cur;
yy225:
#line 544 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(tok_loc(), "unexpected character: '%c'", *tok)); }
#line 1809 "src/parse/lex.cc"
yy226:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
#line 531 "../src/parse/lex.re"
	{ goto scan; }
#line 1819 "src/parse/lex.cc"
yy227:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy228:
#line 535 "../src/parse/lex.re"
	{
        next_line();
        if (mode == LexMode::FLEX_NAME) {
            mode = LexMode::NORMAL;
            RET_TOK(TOKEN_FID_END);
        }
        goto scan;
    }
#line 1839 "src/parse/lex.cc"
yy229:
	yych = *++cur;
	if (yych == '\n') goto yy227;
	goto yy225;
yy230:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych == 'i') goto yy252;
	if (yych == 'u') goto yy253;
	goto yy225;
yy231:
	++cur;
#line 430 "../src/parse/lex.re"
	{ CHECK_RET(lex_str(ast, '"',   yylval.regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1854 "src/parse/lex.cc"
yy232:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy225;
		if (yych <= 'Z') goto yy254;
		goto yy225;
	} else {
		if (yych == '`') goto yy225;
		if (yych <= 'z') goto yy254;
		goto yy225;
	}
yy233:
	++cur;
yy234:
#line 439 "../src/parse/lex.re"
	{ RET_TOK(*tok); }
#line 1871 "src/parse/lex.cc"
yy235:
	yych = *++cur;
	if (yych == '}') goto yy256;
	goto yy225;
yy236:
	++cur;
#line 429 "../src/parse/lex.re"
	{ CHECK_RET(lex_str(ast, '\'',  yylval.regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1880 "src/parse/lex.cc"
yy237:
	yych = *++cur;
	if (yych == '/') goto yy256;
	goto yy234;
yy238:
	++cur;
#line 529 "../src/parse/lex.re"
	{ yylval.regexp = ast.dot(tok_loc()); RET_TOK(TOKEN_REGEXP); }
#line 1889 "src/parse/lex.cc"
yy239:
	yych = *++cur;
	if (yych == '*') goto yy257;
	if (yych == '/') goto yy258;
	goto yy234;
yy240:
	yych = *++cur;
	if (yych == '=') goto yy259;
	goto yy225;
yy241:
	++cur;
#line 422 "../src/parse/lex.re"
	{ return lex_clist(ast, token); }
#line 1903 "src/parse/lex.cc"
yy242:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy261;
	goto yy234;
yy243:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy244:
	if (yybm[0+yych] & 32) {
		goto yy243;
	}
#line 484 "../src/parse/lex.re"
	{
        bool yes;
        CHECK_RET(lex_namedef_context_re2c(yes));
        if (!globopts->FFlag || yes) {
            yylval.cstr = ast.cstr(tok, cur);
            RET_TOK(TOKEN_ID);
        }
        CHECK_RET(lex_namedef_context_flex(yes));
        if (yes) {
            yylval.cstr = ast.cstr(tok, cur);
            mode = LexMode::FLEX_NAME;
            RET_TOK(TOKEN_FID);
        }
        // consume one character, otherwise we risk breaking operator precedence in cases like
        // `ab*`: it should be `a(b)*`, not `(ab)*`
        cur = tok + 1;
        ast.temp_chars.push_back({tok[0], tok_loc()});
        yylval.regexp = ast.str(tok_loc(), false);
        RET_TOK(TOKEN_REGEXP);
    }
#line 1938 "src/parse/lex.cc"
yy245:
	yych = *++cur;
	if (yych == '^') goto yy262;
#line 431 "../src/parse/lex.re"
	{ CHECK_RET(lex_cls(ast, false, yylval.regexp)); RET_TOK(TOKEN_REGEXP); }
#line 1944 "src/parse/lex.cc"
yy246:
	yych = *++cur;
	if (yych == 'e') goto yy263;
	goto yy244;
yy247:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy264;
		if (yych >= 'A') goto yy267;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy267;
		} else {
			if (yych <= '`') goto yy248;
			if (yych <= 'z') goto yy267;
		}
	}
yy248:
#line 414 "../src/parse/lex.re"
	{ CHECK_RET(lex_code_in_braces(ast)); RET_TOK(TOKEN_CODE); }
#line 1969 "src/parse/lex.cc"
yy249:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy250:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy228;
			} else {
				goto yy225;
			}
		} else {
			if (yyaccept == 2) {
				goto yy234;
			} else {
				goto yy248;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy260;
			} else {
				goto yy265;
			}
		} else {
			if (yyaccept == 6) {
				goto yy280;
			} else {
				goto yy299;
			}
		}
	}
yy251:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy251;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy251;
		if (yych == 'l') goto yy268;
		goto yy250;
	}
yy252:
	yych = *++cur;
	if (yych == 'n') goto yy269;
	goto yy250;
yy253:
	yych = *++cur;
	if (yych == 's') goto yy270;
	goto yy250;
yy254:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy255;
		if (yych <= '9') goto yy254;
		if (yych >= 'A') goto yy254;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy254;
		} else {
			if (yych <= '`') goto yy255;
			if (yych <= 'z') goto yy254;
		}
	}
yy255:
#line 434 "../src/parse/lex.re"
	{
        yylval.regexp = ast.tag(tok_loc(), ast.cstr(tok + 1, cur), tok[0] == '#');
        RET_TOK(TOKEN_REGEXP);
    }
#line 2053 "src/parse/lex.cc"
yy256:
	++cur;
#line 427 "../src/parse/lex.re"
	{ tok = cur; RET_TOK(0); }
#line 2058 "src/parse/lex.cc"
yy257:
	++cur;
#line 425 "../src/parse/lex.re"
	{ CHECK_RET(lex_c_comment());   goto scan; }
#line 2063 "src/parse/lex.cc"
yy258:
	++cur;
#line 424 "../src/parse/lex.re"
	{ CHECK_RET(lex_cpp_comment()); goto scan; }
#line 2068 "src/parse/lex.cc"
yy259:
	yyaccept = 4;
	yych = *(mar = ++cur);
	if (yych == '>') goto yy261;
yy260:
#line 415 "../src/parse/lex.re"
	{ CHECK_RET(lex_code_indented(ast));  RET_TOK(TOKEN_CODE); }
#line 2076 "src/parse/lex.cc"
yy261:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy261;
		} else {
			if (yych == ' ') goto yy261;
			goto yy250;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy271;
			}
			if (yych <= '^') goto yy250;
			yyt1 = cur;
			goto yy271;
		} else {
			if (yych <= '`') goto yy250;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy271;
			}
			goto yy250;
		}
	}
yy262:
	++cur;
#line 432 "../src/parse/lex.re"
	{ CHECK_RET(lex_cls(ast, true,  yylval.regexp)); RET_TOK(TOKEN_REGEXP); }
#line 2111 "src/parse/lex.cc"
yy263:
	yych = *++cur;
	if (yych == '2') goto yy273;
	goto yy244;
yy264:
	++cur;
yy265:
#line 468 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(tok_loc(),
                           "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are "
                           "numbers"));
    }
#line 2125 "src/parse/lex.cc"
yy266:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy274;
	}
	if (yych == '}') goto yy275;
	goto yy250;
yy267:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy250;
			goto yy267;
		} else {
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy267;
			goto yy250;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy250;
			goto yy267;
		} else {
			if (yych == '}') goto yy276;
			goto yy250;
		}
	}
yy268:
	yych = *++cur;
	if (yych == 'i') goto yy277;
	goto yy250;
yy269:
	yych = *++cur;
	if (yych == 'c') goto yy278;
	goto yy250;
yy270:
	yych = *++cur;
	if (yych == 'e') goto yy279;
	goto yy250;
yy271:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy272;
		if (yych <= '9') goto yy271;
		if (yych >= 'A') goto yy271;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy271;
		} else {
			if (yych <= '`') goto yy272;
			if (yych <= 'z') goto yy271;
		}
	}
yy272:
	p = yyt1;
#line 417 "../src/parse/lex.re"
	{
        yylval.cstr = ast.cstr(p, cur);
        RET_TOK(tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT);
    }
#line 2196 "src/parse/lex.cc"
yy273:
	yych = *++cur;
	if (yych == 'c') goto yy281;
	goto yy244;
yy274:
	yyaccept = 5;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy265;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy283;
	goto yy265;
yy275:
	++cur;
#line 441 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            RET_FAIL(msg.error(tok_loc(), "repetition count overflow"));
        }
        yylval.bounds.max = yylval.bounds.min;
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2218 "src/parse/lex.cc"
yy276:
	++cur;
#line 474 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            RET_FAIL(msg.error(tok_loc(), "curly braces for names only allowed with -F switch"));
        }
        yylval.cstr = ast.cstr(tok + 1, cur - 1);
        RET_TOK(TOKEN_ID);
    }
#line 2229 "src/parse/lex.cc"
yy277:
	yych = *++cur;
	if (yych == 'n') goto yy284;
	goto yy250;
yy278:
	yych = *++cur;
	if (yych == 'l') goto yy285;
	goto yy250;
yy279:
	yyaccept = 6;
	yych = *(mar = ++cur);
	if (yych == ':') goto yy286;
yy280:
#line 522 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(tok_loc(),
                           "ill-formed use directive: expected `!use` followed by a colon, a block "
                           "name, optional spaces, a semicolon, and finally a space, a newline, or "
                           "the end of block"));
    }
#line 2250 "src/parse/lex.cc"
yy281:
	yych = *++cur;
	if (yych == ':') goto yy287;
	goto yy244;
yy282:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '/') goto yy250;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy288;
	goto yy250;
yy283:
	++cur;
#line 460 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            RET_FAIL(msg.error(tok_loc(), "repetition lower bound overflow"));
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2273 "src/parse/lex.cc"
yy284:
	yych = *++cur;
	if (yych == 'e') goto yy289;
	goto yy250;
yy285:
	yych = *++cur;
	if (yych == 'u') goto yy290;
	goto yy250;
yy286:
	yych = *++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy250;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	} else {
		if (yych == '`') goto yy250;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	}
yy287:
	++cur;
#line 482 "../src/parse/lex.re"
	{ RET_TOK(TOKEN_CONF); }
#line 2303 "src/parse/lex.cc"
yy288:
	++cur;
	p = yyt1;
#line 449 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval.bounds.min)) {
            RET_FAIL(msg.error(tok_loc(), "repetition lower bound overflow"));
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval.bounds.max)) {
            RET_FAIL(msg.error(tok_loc(), "repetition upper bound overflow"));
        } else if (yylval.bounds.min > yylval.bounds.max) {
            RET_FAIL(msg.error(tok_loc(), "repetition lower bound exceeds upper bound"));
        }
        RET_TOK(TOKEN_CLOSESIZE);
    }
#line 2318 "src/parse/lex.cc"
yy289:
	yych = *++cur;
	if (yych <= '0') goto yy293;
	if (yych <= '9') goto yy250;
	goto yy293;
yy290:
	yych = *++cur;
	if (yych == 'd') goto yy294;
	goto yy250;
yy291:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy295;
			}
			goto yy250;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy295;
			}
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy291;
			goto yy250;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy296;
			}
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy291;
			goto yy250;
		} else {
			if (yych == '`') goto yy250;
			if (yych <= 'z') goto yy291;
			goto yy250;
		}
	}
yy292:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy293:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy292;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy292;
		if (yych <= '0') goto yy250;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy297;
		}
		goto yy250;
	}
yy294:
	yych = *++cur;
	if (yych == 'e') goto yy298;
	goto yy250;
yy295:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy295;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy295;
		if (yych != ';') goto yy250;
	}
yy296:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy300;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
		goto yy300;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
			goto yy300;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy301;
			}
			goto yy250;
		}
	}
yy297:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy302;
		} else {
			if (yych <= '\n') goto yy303;
			if (yych <= '\f') goto yy250;
			goto yy304;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			goto yy302;
		} else {
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy297;
			goto yy250;
		}
	}
yy298:
	yyaccept = 7;
	yych = *(mar = ++cur);
	if (yych == '\t') goto yy305;
	if (yych == ' ') goto yy305;
yy299:
#line 509 "../src/parse/lex.re"
	{
        RET_FAIL(msg.error(tok_loc(),
                           "ill-formed include directive: expected `!include` followed by spaces, "
                           "a double-quoted file path, optional spaces, a semicolon, and finally "
                           "a space, a newline, or the end of block"));
    }
#line 2455 "src/parse/lex.cc"
yy300:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 516 "../src/parse/lex.re"
	{
        // Save the name of the used block in a temporary buffer (ensure it is empty).
        CHECK(ast.temp_blockname.empty());
        ast.temp_blockname.assign(x, y);
        RET_TOK(TOKEN_BLOCK);
    }
#line 2468 "src/parse/lex.cc"
yy301:
	yych = *++cur;
	if (yych == '/') goto yy300;
	goto yy250;
yy302:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '"') goto yy306;
		goto yy250;
	}
yy303:
	++cur;
	cur = yyt1;
#line 533 "../src/parse/lex.re"
	{ CHECK_RET(set_sourceline()); RET_TOK(TOKEN_LINE_INFO); }
#line 2490 "src/parse/lex.cc"
yy304:
	yych = *++cur;
	if (yych == '\n') goto yy303;
	goto yy250;
yy305:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy305;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy305;
		if (yych == '"') {
			yyt1 = cur;
			goto yy307;
		}
		goto yy250;
	}
yy306:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy306;
	}
	if (yych <= '\n') goto yy250;
	if (yych <= '"') goto yy308;
	goto yy309;
yy307:
	++cur;
	if ((lim - cur) < 4) if (!fill(4)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy250;
		if (yych == '\n') goto yy250;
		goto yy307;
	} else {
		if (yych <= '"') goto yy310;
		if (yych == '\\') goto yy311;
		goto yy307;
	}
yy308:
	yych = *++cur;
	if (yych == '\n') goto yy303;
	if (yych == '\r') goto yy304;
	goto yy250;
yy309:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy306;
yy310:
	yych = *++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy312;
		}
		goto yy250;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy312;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy313;
		}
		goto yy250;
	}
yy311:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy307;
yy312:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych != ';') goto yy250;
	}
yy313:
	yych = *++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy314;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy315;
			}
			goto yy250;
		}
	}
yy314:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 505 "../src/parse/lex.re"
	{
        CHECK_RET(include(getstr(x + 1, y - 1), tok));
        goto scan;
    }
#line 2614 "src/parse/lex.cc"
yy315:
	yych = *++cur;
	if (yych == '/') goto yy314;
	goto yy250;
}
#line 545 "../src/parse/lex.re"

}

#undef RET_TOK

Ret Scanner::lex_namedef_context_re2c(bool& yes) {

#line 2628 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy318;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy318;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy320;
		}
	}
yy317:
#line 553 "../src/parse/lex.re"
	{ yes = false; return Ret::OK; }
#line 2685 "src/parse/lex.cc"
yy318:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy318;
	}
	if (yych == '=') goto yy320;
yy319:
	cur = mar;
	goto yy317;
yy320:
	yych = *++cur;
	if (yych == '>') goto yy319;
	++cur;
	cur = yyt1;
#line 552 "../src/parse/lex.re"
	{ yes = true;  return Ret::OK; }
#line 2704 "src/parse/lex.cc"
}
#line 554 "../src/parse/lex.re"

}

Ret Scanner::lex_namedef_context_flex(bool& yes) {

#line 2712 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy322;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy322;
	}
#line 561 "../src/parse/lex.re"
	{ yes = false; return Ret::OK; }
#line 2761 "src/parse/lex.cc"
yy322:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy322;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy323;
	} else {
		if (yych <= '=') goto yy323;
		if (yych == '{') goto yy323;
	}
	cur = yyt1;
#line 560 "../src/parse/lex.re"
	{ yes = true;  return Ret::OK; }
#line 2778 "src/parse/lex.cc"
yy323:
	++cur;
	cur = yyt1;
#line 559 "../src/parse/lex.re"
	{ yes = false; return Ret::OK; }
#line 2784 "src/parse/lex.cc"
}
#line 562 "../src/parse/lex.re"

}

Ret Scanner::lex_clist(Ast& ast, int& token) {
    token = TOKEN_CLIST;
    std::set<std::string>& cl = ast.temp_condlist;
    // Due to the re2c grammar parser must reduce each condition list before shifing a new one.
    CHECK(cl.empty());

#line 2796 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy324;
yy325:
	++cur;
yy324:
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy325;
	}
	if (yych <= 0x1F) goto yy326;
	if (yych <= '!') goto yy327;
	if (yych == '>') goto yy328;
yy326:
#line 573 "../src/parse/lex.re"
	{ goto cond; }
#line 2848 "src/parse/lex.cc"
yy327:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych == '\t') goto yy327;
	if (yych == ' ') goto yy327;
#line 571 "../src/parse/lex.re"
	{ token = TOKEN_CSETUP; goto cond; }
#line 2857 "src/parse/lex.cc"
yy328:
	++cur;
#line 572 "../src/parse/lex.re"
	{ token = TOKEN_CZERO;  goto end; }
#line 2862 "src/parse/lex.cc"
}
#line 574 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2869 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy331;
		if (yych >= 'A') goto yy332;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy332;
		} else {
			if (yych <= '`') goto yy330;
			if (yych <= 'z') goto yy332;
		}
	}
yy330:
	++cur;
#line 580 "../src/parse/lex.re"
	{ goto error; }
#line 2923 "src/parse/lex.cc"
yy331:
	++cur;
#line 579 "../src/parse/lex.re"
	{ if (!cl.empty()) goto error; cl.insert("*"); goto next; }
#line 2928 "src/parse/lex.cc"
yy332:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy332;
	}
#line 578 "../src/parse/lex.re"
	{ cl.insert(getstr(tok, cur)); goto next; }
#line 2938 "src/parse/lex.cc"
}
#line 581 "../src/parse/lex.re"

next: 
#line 2943 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy335;
		if (yych >= ' ') goto yy335;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	++cur;
yy334:
#line 585 "../src/parse/lex.re"
	{ goto error; }
#line 2996 "src/parse/lex.cc"
yy335:
	yych = *(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych <= 0x1F) goto yy334;
		goto yy338;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy334;
		} else {
			if (yych == '>') goto yy337;
			goto yy334;
		}
	}
yy336:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
#line 583 "../src/parse/lex.re"
	{ goto cond; }
#line 3020 "src/parse/lex.cc"
yy337:
	++cur;
#line 584 "../src/parse/lex.re"
	{ goto end; }
#line 3025 "src/parse/lex.cc"
yy338:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych >= ' ') goto yy338;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	cur = mar;
	goto yy334;
}
#line 586 "../src/parse/lex.re"

end:
    // semantic value `yylval` is implicitly passed in temporary condition list
    return Ret::OK;
error:
    cl.clear();
    RET_FAIL(msg.error(cur_loc(), "syntax error in condition list"));
}

Ret Scanner::lex_code_indented(Ast& ast) {
    const loc_t& loc = tok_loc();
    tok = cur;
code: 
#line 3057 "src/parse/lex.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych == '\n') goto yy342;
		} else {
			if (yych <= '\r') goto yy343;
			if (yych == '"') goto yy344;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy344;
			if (yych == '/') goto yy345;
		} else {
			if (yych == '|') goto yy340;
			if (yych <= '}') goto yy346;
		}
	}
yy340:
	++cur;
yy341:
#line 604 "../src/parse/lex.re"
	{ goto code; }
#line 3083 "src/parse/lex.cc"
yy342:
	++cur;
#line 599 "../src/parse/lex.re"
	{ next_line(); goto indent; }
#line 3088 "src/parse/lex.cc"
yy343:
	yych = *++cur;
	if (yych == '\n') goto yy342;
	goto yy341;
yy344:
	++cur;
#line 602 "../src/parse/lex.re"
	{ CHECK_RET(try_lex_string_in_code(cur[-1])); goto code; }
#line 3097 "src/parse/lex.cc"
yy345:
	yych = *++cur;
	if (yych == '*') goto yy347;
	if (yych == '/') goto yy348;
	goto yy341;
yy346:
	++cur;
#line 603 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(cur_loc(), "Curly braces are not allowed after ':='")); }
#line 3107 "src/parse/lex.cc"
yy347:
	++cur;
#line 601 "../src/parse/lex.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3112 "src/parse/lex.cc"
yy348:
	++cur;
#line 600 "../src/parse/lex.re"
	{ CHECK_RET(lex_cpp_comment()); goto indent; }
#line 3117 "src/parse/lex.cc"
}
#line 605 "../src/parse/lex.re"

indent: 
#line 3122 "src/parse/lex.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy350;
		if (yych <= '\n') goto yy351;
	} else {
		if (yych <= '\r') goto yy351;
		if (yych == ' ') goto yy351;
	}
yy350:
#line 608 "../src/parse/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        uint8_t* p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = ast.sem_act(loc, ast.cstr(tok, p), nullptr, false);
        return Ret::OK;
    }
#line 3143 "src/parse/lex.cc"
yy351:
	++cur;
	cur -= 1;
#line 607 "../src/parse/lex.re"
	{ goto code; }
#line 3149 "src/parse/lex.cc"
}
#line 615 "../src/parse/lex.re"

}

Ret Scanner::lex_code_in_braces(Ast& ast) {
    const loc_t& loc = tok_loc();
    uint32_t depth = 1;
code: 
#line 3159 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych == '\n') goto yy354;
		} else {
			if (yych <= '\r') goto yy356;
			if (yych == '"') goto yy357;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy357;
			if (yych == '/') goto yy358;
		} else {
			if (yych <= '{') goto yy359;
			if (yych == '}') goto yy360;
		}
	}
	++cur;
yy353:
#line 636 "../src/parse/lex.re"
	{ goto code; }
#line 3218 "src/parse/lex.cc"
yy354:
	yych = *(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy361;
	}
	if (yych == '#') goto yy363;
yy355:
#line 632 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3228 "src/parse/lex.cc"
yy356:
	yych = *++cur;
	if (yych == '\n') goto yy354;
	goto yy353;
yy357:
	++cur;
#line 635 "../src/parse/lex.re"
	{ CHECK_RET(try_lex_string_in_code(cur[-1])); goto code; }
#line 3237 "src/parse/lex.cc"
yy358:
	yych = *++cur;
	if (yych == '*') goto yy364;
	if (yych == '/') goto yy365;
	goto yy353;
yy359:
	++cur;
#line 630 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3247 "src/parse/lex.cc"
yy360:
	++cur;
#line 622 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = ast.sem_act(loc, ast.cstr(tok, cur), nullptr, false);
            return Ret::OK;
        }
        goto code;
    }
#line 3258 "src/parse/lex.cc"
yy361:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 32) {
		goto yy361;
	}
	if (yych == '#') goto yy363;
yy362:
	cur = mar;
	goto yy355;
yy363:
	++cur;
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy363;
		goto yy362;
	} else {
		if (yych <= ' ') goto yy363;
		if (yych == 'l') goto yy366;
		goto yy362;
	}
yy364:
	++cur;
#line 633 "../src/parse/lex.re"
	{ CHECK_RET(lex_c_comment()); goto code; }
#line 3286 "src/parse/lex.cc"
yy365:
	++cur;
#line 634 "../src/parse/lex.re"
	{ CHECK_RET(lex_cpp_comment()); goto code; }
#line 3291 "src/parse/lex.cc"
yy366:
	yych = *++cur;
	if (yych != 'i') goto yy362;
	yych = *++cur;
	if (yych != 'n') goto yy362;
	yych = *++cur;
	if (yych != 'e') goto yy362;
	yych = *++cur;
	if (yych <= '0') goto yy368;
	if (yych <= '9') goto yy362;
	goto yy368;
yy367:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy368:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy367;
		goto yy362;
	} else {
		if (yych <= ' ') goto yy367;
		if (yych <= '0') goto yy362;
		if (yych >= ':') goto yy362;
		yyt1 = cur;
	}
yy369:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy369;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy362;
		if (yych <= '\t') goto yy370;
		if (yych <= '\n') goto yy371;
		goto yy362;
	} else {
		if (yych <= '\r') goto yy372;
		if (yych != ' ') goto yy362;
	}
yy370:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy370;
		goto yy362;
	} else {
		if (yych <= ' ') goto yy370;
		if (yych == '"') goto yy373;
		goto yy362;
	}
yy371:
	++cur;
	cur = yyt1;
#line 631 "../src/parse/lex.re"
	{ CHECK_RET(set_sourceline()); goto code; }
#line 3350 "src/parse/lex.cc"
yy372:
	yych = *++cur;
	if (yych == '\n') goto yy371;
	goto yy362;
yy373:
	++cur;
	if ((lim - cur) < 3) if (!fill(3)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 128) {
		goto yy373;
	}
	if (yych <= '\n') goto yy362;
	if (yych >= '#') goto yy374;
	yych = *++cur;
	if (yych == '\n') goto yy371;
	if (yych == '\r') goto yy372;
	goto yy362;
yy374:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy362;
	if (yych == '\n') goto yy362;
	goto yy373;
}
#line 637 "../src/parse/lex.re"

}

Ret Scanner::try_lex_string_in_code(uint8_t quote) {
    // We need to lex string literals in code blocks because they may contain closing brace symbol
    // that would otherwise be erroneously lexed as a real closing brace.
    //
    // However, single quote in Rust may be either the beginning of a char literal as in `\u{1F600}`
    // or a standalone one as in `'label`. In the latter case trying to lex a generic string literal
    // will consume a fragment of the file until the next single quote (if any) and result in either
    // a spurios parse error, or incorrect generated code. Therefore in Rust we try to lex a char
    // literal, or else consume the quote.

    if (globopts->lang != Lang::RUST || quote != '\'') {
        return lex_string(quote);
    }

    // Rust spec (literals): https://doc.rust-lang.org/reference/tokens.html#literals
    // Rust spec (input encoding): https://doc.rust-lang.org/reference/input-format.html

#line 3397 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 5) if (!fill(5)) RET_FAIL(error("unexpected end of input"));
	yych = *(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy377;
			goto yy379;
		} else {
			if (yych <= 0x7F) goto yy377;
			if (yych >= 0xC2) goto yy380;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy381;
			if (yych <= 0xEF) goto yy382;
			goto yy383;
		} else {
			if (yych <= 0xF3) goto yy384;
			if (yych <= 0xF4) goto yy385;
		}
	}
yy376:
#line 663 "../src/parse/lex.re"
	{ return Ret::OK; }
#line 3457 "src/parse/lex.cc"
yy377:
	yych = *++cur;
	if (yych == '\'') goto yy386;
yy378:
	cur = mar;
	goto yy376;
yy379:
	yych = *++cur;
	if (yych <= 'm') {
		if (yych <= '\'') {
			if (yych == '"') goto yy377;
			if (yych <= '&') goto yy378;
			goto yy387;
		} else {
			if (yych <= '0') {
				if (yych <= '/') goto yy378;
				goto yy377;
			} else {
				if (yych == '\\') goto yy377;
				goto yy378;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') goto yy377;
			if (yych == 'r') goto yy377;
			goto yy378;
		} else {
			if (yych <= 'u') {
				if (yych <= 't') goto yy377;
				goto yy388;
			} else {
				if (yych == 'x') goto yy389;
				goto yy378;
			}
		}
	}
yy380:
	yych = *++cur;
	if (yych <= 0x7F) goto yy378;
	if (yych <= 0xBF) goto yy377;
	goto yy378;
yy381:
	yych = *++cur;
	if (yych <= 0x9F) goto yy378;
	if (yych <= 0xBF) goto yy380;
	goto yy378;
yy382:
	yych = *++cur;
	if (yych <= 0x7F) goto yy378;
	if (yych <= 0xBF) goto yy380;
	goto yy378;
yy383:
	yych = *++cur;
	if (yych <= 0x8F) goto yy378;
	if (yych <= 0xBF) goto yy382;
	goto yy378;
yy384:
	yych = *++cur;
	if (yych <= 0x7F) goto yy378;
	if (yych <= 0xBF) goto yy382;
	goto yy378;
yy385:
	yych = *++cur;
	if (yych <= 0x7F) goto yy378;
	if (yych <= 0x8F) goto yy382;
	goto yy378;
yy386:
	++cur;
	goto yy376;
yy387:
	yych = *++cur;
	if (yych == '\'') goto yy386;
	goto yy376;
yy388:
	yych = *++cur;
	if (yych == '{') goto yy390;
	goto yy378;
yy389:
	yych = *++cur;
	if (yych == '\'') goto yy378;
	goto yy392;
yy390:
	yych = *++cur;
	if (yych == '}') goto yy378;
	goto yy394;
yy391:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy392:
	if (yybm[0+yych] & 128) {
		goto yy391;
	}
	if (yych == '\'') goto yy386;
	goto yy378;
yy393:
	++cur;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy394:
	if (yych <= 'F') {
		if (yych <= '/') goto yy378;
		if (yych <= '9') goto yy393;
		if (yych <= '@') goto yy378;
		goto yy393;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy378;
			goto yy393;
		} else {
			if (yych == '}') goto yy377;
			goto yy378;
		}
	}
}
#line 664 "../src/parse/lex.re"

}

Ret Scanner::lex_string(uint8_t delim) {
loop: 
#line 3580 "src/parse/lex.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych >= '\n') goto yy397;
		} else {
			if (yych == '\r') goto yy398;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy399;
			if (yych >= '\'') goto yy399;
		} else {
			if (yych == '\\') goto yy400;
		}
	}
	++cur;
yy396:
#line 672 "../src/parse/lex.re"
	{ goto loop; }
#line 3603 "src/parse/lex.cc"
yy397:
	++cur;
#line 671 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3608 "src/parse/lex.cc"
yy398:
	yych = *++cur;
	if (yych == '\n') goto yy397;
	goto yy396;
yy399:
	++cur;
#line 669 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return Ret::OK; else goto loop; }
#line 3617 "src/parse/lex.cc"
yy400:
	yych = *++cur;
	if (yych <= '&') {
		if (yych != '"') goto yy396;
	} else {
		if (yych <= '\'') goto yy401;
		if (yych != '\\') goto yy396;
	}
yy401:
	++cur;
#line 670 "../src/parse/lex.re"
	{ goto loop; }
#line 3630 "src/parse/lex.cc"
}
#line 673 "../src/parse/lex.re"

}

Ret Scanner::lex_c_comment() {
loop: 
#line 3638 "src/parse/lex.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy404;
	} else {
		if (yych <= '\r') goto yy405;
		if (yych == '*') goto yy406;
	}
	++cur;
yy403:
#line 680 "../src/parse/lex.re"
	{ goto loop; }
#line 3653 "src/parse/lex.cc"
yy404:
	++cur;
#line 679 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3658 "src/parse/lex.cc"
yy405:
	yych = *++cur;
	if (yych == '\n') goto yy404;
	goto yy403;
yy406:
	yych = *++cur;
	if (yych != '/') goto yy403;
	++cur;
#line 678 "../src/parse/lex.re"
	{ return Ret::OK; }
#line 3669 "src/parse/lex.cc"
}
#line 681 "../src/parse/lex.re"

}

Ret Scanner::lex_cpp_comment() {
loop: 
#line 3677 "src/parse/lex.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych == '\n') goto yy409;
	if (yych == '\r') goto yy410;
	++cur;
yy408:
#line 687 "../src/parse/lex.re"
	{ goto loop; }
#line 3688 "src/parse/lex.cc"
yy409:
	++cur;
#line 686 "../src/parse/lex.re"
	{ next_line(); return Ret::OK; }
#line 3693 "src/parse/lex.cc"
yy410:
	yych = *++cur;
	if (yych == '\n') goto yy409;
	goto yy408;
}
#line 688 "../src/parse/lex.re"

}

Ret Scanner::lex_cls(Ast& ast, bool neg, const AstNode*& a) {
    uint32_t u, l;
    const loc_t& loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3710 "src/parse/lex.cc"
{
	uint8_t yych;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych == ']') goto yy412;
#line 699 "../src/parse/lex.re"
	{ CHECK_RET(lex_cls_chr(l)); goto snd; }
#line 3718 "src/parse/lex.cc"
yy412:
	++cur;
#line 698 "../src/parse/lex.re"
	{ a = ast.cls(loc0, neg); return Ret::OK; }
#line 3723 "src/parse/lex.cc"
}
#line 700 "../src/parse/lex.re"

snd: 
#line 3728 "src/parse/lex.cc"
{
	uint8_t yych;
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *(mar = cur);
	if (yych == '-') goto yy415;
yy414:
#line 702 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3737 "src/parse/lex.cc"
yy415:
	yych = *++cur;
	if (yych != ']') goto yy416;
	cur = mar;
	goto yy414;
yy416:
	++cur;
	cur -= 1;
#line 703 "../src/parse/lex.re"
	{
        CHECK_RET(lex_cls_chr(u));
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3755 "src/parse/lex.cc"
}
#line 711 "../src/parse/lex.re"

add:
    ast.temp_ranges.push_back(AstRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

Ret Scanner::lex_cls_chr(uint32_t& c) {
    tok = cur;
    const loc_t& loc = cur_loc();
#line 746 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 3772 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy419;
	} else {
		if (yych <= '\r') goto yy420;
		if (yych == '\\') goto yy421;
	}
	++cur;
yy418:
#line 728 "../src/parse/lex.re"
	{ c = decode(tok); return Ret::OK; }
#line 3788 "src/parse/lex.cc"
yy419:
	++cur;
#line 722 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "newline in character class")); }
#line 3793 "src/parse/lex.cc"
yy420:
	yych = *++cur;
	if (yych == '\n') goto yy419;
	goto yy418;
yy421:
	yych = *++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy422;
				if (yych == '\n') goto yy419;
				goto yy423;
			} else {
				if (yych <= '\r') goto yy425;
				if (yych == '-') goto yy426;
				goto yy423;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy427;
				if (yych <= '7') goto yy429;
				if (yych <= 'T') goto yy423;
				goto yy430;
			} else {
				if (yych == 'X') goto yy432;
				if (yych <= '[') goto yy423;
				goto yy433;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy434;
				if (yych <= '`') goto yy423;
				if (yych <= 'a') goto yy435;
				goto yy436;
			} else {
				if (yych == 'f') goto yy437;
				if (yych <= 'm') goto yy423;
				goto yy438;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy439;
				if (yych <= 's') goto yy423;
				goto yy440;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy432;
					goto yy441;
				} else {
					if (yych == 'x') goto yy442;
					goto yy423;
				}
			}
		}
	}
yy422:
#line 725 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in escape sequence")); }
#line 3854 "src/parse/lex.cc"
yy423:
	++cur;
yy424:
#line 741 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 3864 "src/parse/lex.cc"
yy425:
	yych = *++cur;
	if (yych == '\n') goto yy419;
	goto yy424;
yy426:
	++cur;
#line 739 "../src/parse/lex.re"
	{ c = '-'_u8; return Ret::OK; }
#line 3873 "src/parse/lex.cc"
yy427:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy428;
	if (yych <= '7') goto yy443;
yy428:
#line 724 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in octal escape sequence")); }
#line 3882 "src/parse/lex.cc"
yy429:
	++cur;
	goto yy428;
yy430:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy445;
	} else {
		if (yych <= 'F') goto yy445;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy445;
	}
yy431:
#line 723 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in hexadecimal escape sequence")); }
#line 3900 "src/parse/lex.cc"
yy432:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy446;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy446;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy446;
		goto yy431;
	}
yy433:
	++cur;
#line 738 "../src/parse/lex.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 3918 "src/parse/lex.cc"
yy434:
	++cur;
#line 740 "../src/parse/lex.re"
	{ c = ']'_u8; return Ret::OK; }
#line 3923 "src/parse/lex.cc"
yy435:
	++cur;
#line 731 "../src/parse/lex.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 3928 "src/parse/lex.cc"
yy436:
	++cur;
#line 732 "../src/parse/lex.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 3933 "src/parse/lex.cc"
yy437:
	++cur;
#line 733 "../src/parse/lex.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 3938 "src/parse/lex.cc"
yy438:
	++cur;
#line 734 "../src/parse/lex.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 3943 "src/parse/lex.cc"
yy439:
	++cur;
#line 735 "../src/parse/lex.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 3948 "src/parse/lex.cc"
yy440:
	++cur;
#line 736 "../src/parse/lex.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 3953 "src/parse/lex.cc"
yy441:
	++cur;
#line 737 "../src/parse/lex.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 3958 "src/parse/lex.cc"
yy442:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy431;
		if (yych <= '9') goto yy447;
		goto yy431;
	} else {
		if (yych <= 'F') goto yy447;
		if (yych <= '`') goto yy431;
		if (yych <= 'f') goto yy447;
		goto yy431;
	}
yy443:
	yych = *++cur;
	if (yych <= '/') goto yy444;
	if (yych <= '7') goto yy448;
yy444:
	cur = mar;
	if (yyaccept == 0) {
		goto yy428;
	} else {
		goto yy431;
	}
yy445:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy449;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy449;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy449;
		goto yy444;
	}
yy446:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy450;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy450;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy450;
		goto yy444;
	}
yy447:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy451;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy451;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy451;
		goto yy444;
	}
yy448:
	++cur;
#line 730 "../src/parse/lex.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4023 "src/parse/lex.cc"
yy449:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy452;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy452;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy452;
		goto yy444;
	}
yy450:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy447;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy447;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy447;
		goto yy444;
	}
yy451:
	++cur;
#line 729 "../src/parse/lex.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 4052 "src/parse/lex.cc"
yy452:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych >= ':') goto yy444;
	} else {
		if (yych <= 'F') goto yy453;
		if (yych <= '`') goto yy444;
		if (yych >= 'g') goto yy444;
	}
yy453:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy444;
		if (yych <= '9') goto yy446;
		goto yy444;
	} else {
		if (yych <= 'F') goto yy446;
		if (yych <= '`') goto yy444;
		if (yych <= 'f') goto yy446;
		goto yy444;
	}
}
#line 748 "../src/parse/lex.re"

    } else {
        
#line 4080 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy457;
		} else {
			if (yych <= '\r') goto yy458;
			if (yych == '\\') goto yy459;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy461;
			if (yych <= 0xDF) goto yy463;
			if (yych <= 0xE0) goto yy464;
			goto yy465;
		} else {
			if (yych <= 0xF0) goto yy466;
			if (yych <= 0xF3) goto yy467;
			if (yych <= 0xF4) goto yy468;
			goto yy461;
		}
	}
yy455:
	++cur;
yy456:
#line 728 "../src/parse/lex.re"
	{ c = decode(tok); return Ret::OK; }
#line 4111 "src/parse/lex.cc"
yy457:
	++cur;
#line 722 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "newline in character class")); }
#line 4116 "src/parse/lex.cc"
yy458:
	yych = *++cur;
	if (yych == '\n') goto yy457;
	goto yy456;
yy459:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy469;
				} else {
					if (yych <= '\n') goto yy457;
					if (yych <= '\f') goto yy469;
					goto yy471;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy469;
					goto yy472;
				} else {
					if (yych <= '/') goto yy469;
					if (yych <= '3') goto yy473;
					goto yy475;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy469;
					goto yy476;
				} else {
					if (yych == 'X') goto yy478;
					goto yy469;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy479;
					goto yy480;
				} else {
					if (yych <= '`') goto yy469;
					if (yych <= 'a') goto yy481;
					goto yy482;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy469;
					goto yy483;
				} else {
					if (yych == 'n') goto yy484;
					goto yy469;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy485;
					goto yy469;
				} else {
					if (yych <= 't') goto yy486;
					if (yych <= 'u') goto yy478;
					goto yy487;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy469;
					goto yy488;
				} else {
					if (yych <= 0x7F) goto yy469;
					if (yych >= 0xC2) goto yy489;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy491;
					if (yych <= 0xEF) goto yy492;
					goto yy493;
				} else {
					if (yych <= 0xF3) goto yy494;
					if (yych <= 0xF4) goto yy495;
				}
			}
		}
	}
yy460:
#line 725 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in escape sequence")); }
#line 4208 "src/parse/lex.cc"
yy461:
	++cur;
yy462:
#line 726 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error")); }
#line 4214 "src/parse/lex.cc"
yy463:
	yych = *++cur;
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy455;
	goto yy462;
yy464:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy462;
	if (yych <= 0xBF) goto yy496;
	goto yy462;
yy465:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy496;
	goto yy462;
yy466:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy462;
	if (yych <= 0xBF) goto yy497;
	goto yy462;
yy467:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0xBF) goto yy497;
	goto yy462;
yy468:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy462;
	if (yych <= 0x8F) goto yy497;
	goto yy462;
yy469:
	++cur;
yy470:
#line 741 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        c = decode(tok + 1);
        return Ret::OK;
    }
#line 4259 "src/parse/lex.cc"
yy471:
	yych = *++cur;
	if (yych == '\n') goto yy457;
	goto yy470;
yy472:
	++cur;
#line 739 "../src/parse/lex.re"
	{ c = '-'_u8; return Ret::OK; }
#line 4268 "src/parse/lex.cc"
yy473:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy474;
	if (yych <= '7') goto yy498;
yy474:
#line 724 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in octal escape sequence")); }
#line 4277 "src/parse/lex.cc"
yy475:
	++cur;
	goto yy474;
yy476:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy477;
		if (yych <= '9') goto yy499;
	} else {
		if (yych <= 'F') goto yy499;
		if (yych <= '`') goto yy477;
		if (yych <= 'f') goto yy499;
	}
yy477:
#line 723 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(loc, "syntax error in hexadecimal escape sequence")); }
#line 4295 "src/parse/lex.cc"
yy478:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy477;
		if (yych <= '9') goto yy500;
		goto yy477;
	} else {
		if (yych <= 'F') goto yy500;
		if (yych <= '`') goto yy477;
		if (yych <= 'f') goto yy500;
		goto yy477;
	}
yy479:
	++cur;
#line 738 "../src/parse/lex.re"
	{ c = '\\'_u8; return Ret::OK; }
#line 4313 "src/parse/lex.cc"
yy480:
	++cur;
#line 740 "../src/parse/lex.re"
	{ c = ']'_u8; return Ret::OK; }
#line 4318 "src/parse/lex.cc"
yy481:
	++cur;
#line 731 "../src/parse/lex.re"
	{ c = '\a'_u8; return Ret::OK; }
#line 4323 "src/parse/lex.cc"
yy482:
	++cur;
#line 732 "../src/parse/lex.re"
	{ c = '\b'_u8; return Ret::OK; }
#line 4328 "src/parse/lex.cc"
yy483:
	++cur;
#line 733 "../src/parse/lex.re"
	{ c = '\f'_u8; return Ret::OK; }
#line 4333 "src/parse/lex.cc"
yy484:
	++cur;
#line 734 "../src/parse/lex.re"
	{ c = '\n'_u8; return Ret::OK; }
#line 4338 "src/parse/lex.cc"
yy485:
	++cur;
#line 735 "../src/parse/lex.re"
	{ c = '\r'_u8; return Ret::OK; }
#line 4343 "src/parse/lex.cc"
yy486:
	++cur;
#line 736 "../src/parse/lex.re"
	{ c = '\t'_u8; return Ret::OK; }
#line 4348 "src/parse/lex.cc"
yy487:
	++cur;
#line 737 "../src/parse/lex.re"
	{ c = '\v'_u8; return Ret::OK; }
#line 4353 "src/parse/lex.cc"
yy488:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy477;
		if (yych <= '9') goto yy501;
		goto yy477;
	} else {
		if (yych <= 'F') goto yy501;
		if (yych <= '`') goto yy477;
		if (yych <= 'f') goto yy501;
		goto yy477;
	}
yy489:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0xBF) goto yy469;
yy490:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy460;
		} else {
			goto yy462;
		}
	} else {
		if (yyaccept == 2) {
			goto yy474;
		} else {
			goto yy477;
		}
	}
yy491:
	yych = *++cur;
	if (yych <= 0x9F) goto yy490;
	if (yych <= 0xBF) goto yy489;
	goto yy490;
yy492:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0xBF) goto yy489;
	goto yy490;
yy493:
	yych = *++cur;
	if (yych <= 0x8F) goto yy490;
	if (yych <= 0xBF) goto yy492;
	goto yy490;
yy494:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0xBF) goto yy492;
	goto yy490;
yy495:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0x8F) goto yy492;
	goto yy490;
yy496:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0xBF) goto yy455;
	goto yy490;
yy497:
	yych = *++cur;
	if (yych <= 0x7F) goto yy490;
	if (yych <= 0xBF) goto yy496;
	goto yy490;
yy498:
	yych = *++cur;
	if (yych <= '/') goto yy490;
	if (yych <= '7') goto yy502;
	goto yy490;
yy499:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy503;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy503;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy503;
		goto yy490;
	}
yy500:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy504;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy504;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy504;
		goto yy490;
	}
yy501:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy505;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy505;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy505;
		goto yy490;
	}
yy502:
	++cur;
#line 730 "../src/parse/lex.re"
	{ c = unesc_oct(tok, cur); return Ret::OK; }
#line 4466 "src/parse/lex.cc"
yy503:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy506;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy506;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy506;
		goto yy490;
	}
yy504:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy501;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy501;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy501;
		goto yy490;
	}
yy505:
	++cur;
#line 729 "../src/parse/lex.re"
	{ c = unesc_hex(tok, cur); return Ret::OK; }
#line 4495 "src/parse/lex.cc"
yy506:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych >= ':') goto yy490;
	} else {
		if (yych <= 'F') goto yy507;
		if (yych <= '`') goto yy490;
		if (yych >= 'g') goto yy490;
	}
yy507:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy490;
		if (yych <= '9') goto yy500;
		goto yy490;
	} else {
		if (yych <= 'F') goto yy500;
		if (yych <= '`') goto yy490;
		if (yych <= 'f') goto yy500;
		goto yy490;
	}
}
#line 750 "../src/parse/lex.re"

    }
}

Ret Scanner::lex_str_chr(uint8_t quote, AstChar& ast, bool& stop) {
    tok = cur;
    stop = false;
    ast.loc = cur_loc();
#line 781 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::Type::ASCII) {
        
#line 4532 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\f') {
		if (yych == '\n') goto yy510;
	} else {
		if (yych <= '\r') goto yy511;
		if (yych == '\\') goto yy512;
	}
	++cur;
yy509:
#line 765 "../src/parse/lex.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 4548 "src/parse/lex.cc"
yy510:
	++cur;
#line 759 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "newline in character string")); }
#line 4553 "src/parse/lex.cc"
yy511:
	yych = *++cur;
	if (yych == '\n') goto yy510;
	goto yy509;
yy512:
	yych = *++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy513;
				if (yych <= '\t') goto yy514;
				goto yy510;
			} else {
				if (yych == '\r') goto yy516;
				if (yych <= '/') goto yy514;
				goto yy517;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy519;
				if (yych == 'U') goto yy520;
				goto yy514;
			} else {
				if (yych <= 'X') goto yy522;
				if (yych == '\\') goto yy523;
				goto yy514;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy524;
				if (yych <= 'b') goto yy525;
				goto yy514;
			} else {
				if (yych <= 'f') goto yy526;
				if (yych == 'n') goto yy527;
				goto yy514;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy528;
				if (yych <= 's') goto yy514;
				if (yych <= 't') goto yy529;
				goto yy522;
			} else {
				if (yych <= 'v') goto yy530;
				if (yych == 'x') goto yy531;
				goto yy514;
			}
		}
	}
yy513:
#line 762 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in escape sequence")); }
#line 4609 "src/parse/lex.cc"
yy514:
	++cur;
yy515:
#line 776 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 4619 "src/parse/lex.cc"
yy516:
	yych = *++cur;
	if (yych == '\n') goto yy510;
	goto yy515;
yy517:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy518;
	if (yych <= '7') goto yy532;
yy518:
#line 761 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in octal escape sequence")); }
#line 4632 "src/parse/lex.cc"
yy519:
	++cur;
	goto yy518;
yy520:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy534;
	} else {
		if (yych <= 'F') goto yy534;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy534;
	}
yy521:
#line 760 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 4650 "src/parse/lex.cc"
yy522:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy535;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy535;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy535;
		goto yy521;
	}
yy523:
	++cur;
#line 775 "../src/parse/lex.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 4668 "src/parse/lex.cc"
yy524:
	++cur;
#line 768 "../src/parse/lex.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 4673 "src/parse/lex.cc"
yy525:
	++cur;
#line 769 "../src/parse/lex.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 4678 "src/parse/lex.cc"
yy526:
	++cur;
#line 770 "../src/parse/lex.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 4683 "src/parse/lex.cc"
yy527:
	++cur;
#line 771 "../src/parse/lex.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 4688 "src/parse/lex.cc"
yy528:
	++cur;
#line 772 "../src/parse/lex.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 4693 "src/parse/lex.cc"
yy529:
	++cur;
#line 773 "../src/parse/lex.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 4698 "src/parse/lex.cc"
yy530:
	++cur;
#line 774 "../src/parse/lex.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 4703 "src/parse/lex.cc"
yy531:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy536;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy536;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy536;
		goto yy521;
	}
yy532:
	yych = *++cur;
	if (yych <= '/') goto yy533;
	if (yych <= '7') goto yy537;
yy533:
	cur = mar;
	if (yyaccept == 0) {
		goto yy518;
	} else {
		goto yy521;
	}
yy534:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy538;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy538;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy538;
		goto yy533;
	}
yy535:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy539;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy539;
		goto yy533;
	}
yy536:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy540;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy540;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy540;
		goto yy533;
	}
yy537:
	++cur;
#line 767 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 4768 "src/parse/lex.cc"
yy538:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy541;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy541;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy541;
		goto yy533;
	}
yy539:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy536;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy536;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy536;
		goto yy533;
	}
yy540:
	++cur;
#line 766 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 4797 "src/parse/lex.cc"
yy541:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych >= ':') goto yy533;
	} else {
		if (yych <= 'F') goto yy542;
		if (yych <= '`') goto yy533;
		if (yych >= 'g') goto yy533;
	}
yy542:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy533;
		if (yych <= '9') goto yy535;
		goto yy533;
	} else {
		if (yych <= 'F') goto yy535;
		if (yych <= '`') goto yy533;
		if (yych <= 'f') goto yy535;
		goto yy533;
	}
}
#line 783 "../src/parse/lex.re"

    } else {
        
#line 4825 "src/parse/lex.cc"
{
	uint8_t yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) if (!fill(10)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych == '\n') goto yy546;
		} else {
			if (yych <= '\r') goto yy547;
			if (yych == '\\') goto yy548;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy550;
			if (yych <= 0xDF) goto yy552;
			if (yych <= 0xE0) goto yy553;
			goto yy554;
		} else {
			if (yych <= 0xF0) goto yy555;
			if (yych <= 0xF3) goto yy556;
			if (yych <= 0xF4) goto yy557;
			goto yy550;
		}
	}
yy544:
	++cur;
yy545:
#line 765 "../src/parse/lex.re"
	{ ast.chr = decode(tok); stop = (tok[0] == quote); return Ret::OK; }
#line 4856 "src/parse/lex.cc"
yy546:
	++cur;
#line 759 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "newline in character string")); }
#line 4861 "src/parse/lex.cc"
yy547:
	yych = *++cur;
	if (yych == '\n') goto yy546;
	goto yy545;
yy548:
	yyaccept = 0;
	yych = *(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy549;
				if (yych == '\n') goto yy546;
				goto yy558;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy560;
					goto yy558;
				} else {
					if (yych <= '3') goto yy561;
					if (yych <= '7') goto yy563;
					goto yy558;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy564;
					goto yy558;
				} else {
					if (yych <= 'X') goto yy566;
					if (yych <= '[') goto yy558;
					goto yy567;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy558;
					goto yy568;
				} else {
					if (yych <= 'b') goto yy569;
					if (yych <= 'e') goto yy558;
					goto yy570;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy571;
				if (yych <= 'q') goto yy558;
				goto yy572;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy558;
					goto yy573;
				} else {
					if (yych <= 'u') goto yy566;
					if (yych <= 'v') goto yy574;
					goto yy558;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy575;
					goto yy558;
				} else {
					if (yych <= 0xC1) goto yy549;
					if (yych <= 0xDF) goto yy576;
					goto yy578;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy579;
					goto yy580;
				} else {
					if (yych <= 0xF3) goto yy581;
					if (yych <= 0xF4) goto yy582;
				}
			}
		}
	}
yy549:
#line 762 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in escape sequence")); }
#line 4946 "src/parse/lex.cc"
yy550:
	++cur;
yy551:
#line 763 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error")); }
#line 4952 "src/parse/lex.cc"
yy552:
	yych = *++cur;
	if (yych <= 0x7F) goto yy551;
	if (yych <= 0xBF) goto yy544;
	goto yy551;
yy553:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x9F) goto yy551;
	if (yych <= 0xBF) goto yy583;
	goto yy551;
yy554:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy551;
	if (yych <= 0xBF) goto yy583;
	goto yy551;
yy555:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x8F) goto yy551;
	if (yych <= 0xBF) goto yy584;
	goto yy551;
yy556:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy551;
	if (yych <= 0xBF) goto yy584;
	goto yy551;
yy557:
	yyaccept = 1;
	yych = *(mar = ++cur);
	if (yych <= 0x7F) goto yy551;
	if (yych <= 0x8F) goto yy584;
	goto yy551;
yy558:
	++cur;
yy559:
#line 776 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return Ret::OK;
    }
#line 4997 "src/parse/lex.cc"
yy560:
	yych = *++cur;
	if (yych == '\n') goto yy546;
	goto yy559;
yy561:
	yyaccept = 2;
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy562;
	if (yych <= '7') goto yy585;
yy562:
#line 761 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in octal escape sequence")); }
#line 5010 "src/parse/lex.cc"
yy563:
	++cur;
	goto yy562;
yy564:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy586;
	} else {
		if (yych <= 'F') goto yy586;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy586;
	}
yy565:
#line 760 "../src/parse/lex.re"
	{ RET_FAIL(msg.error(ast.loc, "syntax error in hexadecimal escape sequence")); }
#line 5028 "src/parse/lex.cc"
yy566:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy587;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy587;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy587;
		goto yy565;
	}
yy567:
	++cur;
#line 775 "../src/parse/lex.re"
	{ ast.chr = '\\'_u8; return Ret::OK; }
#line 5046 "src/parse/lex.cc"
yy568:
	++cur;
#line 768 "../src/parse/lex.re"
	{ ast.chr = '\a'_u8; return Ret::OK; }
#line 5051 "src/parse/lex.cc"
yy569:
	++cur;
#line 769 "../src/parse/lex.re"
	{ ast.chr = '\b'_u8; return Ret::OK; }
#line 5056 "src/parse/lex.cc"
yy570:
	++cur;
#line 770 "../src/parse/lex.re"
	{ ast.chr = '\f'_u8; return Ret::OK; }
#line 5061 "src/parse/lex.cc"
yy571:
	++cur;
#line 771 "../src/parse/lex.re"
	{ ast.chr = '\n'_u8; return Ret::OK; }
#line 5066 "src/parse/lex.cc"
yy572:
	++cur;
#line 772 "../src/parse/lex.re"
	{ ast.chr = '\r'_u8; return Ret::OK; }
#line 5071 "src/parse/lex.cc"
yy573:
	++cur;
#line 773 "../src/parse/lex.re"
	{ ast.chr = '\t'_u8; return Ret::OK; }
#line 5076 "src/parse/lex.cc"
yy574:
	++cur;
#line 774 "../src/parse/lex.re"
	{ ast.chr = '\v'_u8; return Ret::OK; }
#line 5081 "src/parse/lex.cc"
yy575:
	yyaccept = 3;
	yych = *(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy565;
		if (yych <= '9') goto yy588;
		goto yy565;
	} else {
		if (yych <= 'F') goto yy588;
		if (yych <= '`') goto yy565;
		if (yych <= 'f') goto yy588;
		goto yy565;
	}
yy576:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0xBF) goto yy558;
yy577:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy549;
		} else {
			goto yy551;
		}
	} else {
		if (yyaccept == 2) {
			goto yy562;
		} else {
			goto yy565;
		}
	}
yy578:
	yych = *++cur;
	if (yych <= 0x9F) goto yy577;
	if (yych <= 0xBF) goto yy576;
	goto yy577;
yy579:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0xBF) goto yy576;
	goto yy577;
yy580:
	yych = *++cur;
	if (yych <= 0x8F) goto yy577;
	if (yych <= 0xBF) goto yy579;
	goto yy577;
yy581:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0xBF) goto yy579;
	goto yy577;
yy582:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0x8F) goto yy579;
	goto yy577;
yy583:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0xBF) goto yy544;
	goto yy577;
yy584:
	yych = *++cur;
	if (yych <= 0x7F) goto yy577;
	if (yych <= 0xBF) goto yy583;
	goto yy577;
yy585:
	yych = *++cur;
	if (yych <= '/') goto yy577;
	if (yych <= '7') goto yy589;
	goto yy577;
yy586:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy590;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy590;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy590;
		goto yy577;
	}
yy587:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy591;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy591;
		goto yy577;
	}
yy588:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy592;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy592;
		goto yy577;
	}
yy589:
	++cur;
#line 767 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return Ret::OK; }
#line 5194 "src/parse/lex.cc"
yy590:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy593;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy593;
		goto yy577;
	}
yy591:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy588;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy588;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy588;
		goto yy577;
	}
yy592:
	++cur;
#line 766 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return Ret::OK; }
#line 5223 "src/parse/lex.cc"
yy593:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych >= ':') goto yy577;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy577;
		if (yych >= 'g') goto yy577;
	}
yy594:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy587;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy587;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy587;
		goto yy577;
	}
}
#line 785 "../src/parse/lex.re"

    }
}

Ret Scanner::lex_str(Ast& ast, uint8_t quote, const AstNode*& a) {
    const loc_t& loc = tok_loc();
    AstChar c;
    bool stop;
    for (;;) {
        CHECK_RET(lex_str_chr(quote, c, stop));
        if (stop) {
            a = ast.str(loc, quote == '\'');
            return Ret::OK;
        }
        ast.temp_chars.push_back(c);
    }
}

Ret Scanner::set_sourceline() {
sourceline:
    tok = cur;

#line 5270 "src/parse/lex.cc"
{
	uint8_t yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) if (!fill(2)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy596;
		} else {
			if (yych <= '\n') goto yy598;
			if (yych <= '\f') goto yy596;
			goto yy599;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy596;
			goto yy600;
		} else {
			if (yych <= '0') goto yy596;
			if (yych <= '9') goto yy601;
			goto yy596;
		}
	}
	++cur;
#line 826 "../src/parse/lex.re"
	{ --cur; return Ret::OK; }
#line 5330 "src/parse/lex.cc"
yy596:
	++cur;
yy597:
#line 827 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5336 "src/parse/lex.cc"
yy598:
	++cur;
#line 825 "../src/parse/lex.re"
	{ pos = tok = cur; return Ret::OK; }
#line 5341 "src/parse/lex.cc"
yy599:
	yych = *++cur;
	if (yych == '\n') goto yy598;
	goto yy597;
yy600:
	yych = *(mar = ++cur);
	if (yych <= 0x00) goto yy597;
	if (yych == '\n') goto yy597;
	goto yy603;
yy601:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yybm[0+yych] & 64) {
		goto yy601;
	}
#line 807 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            RET_FAIL(msg.error(tok_loc(), "line number overflow"));
        }
        set_line(l);
        goto sourceline;
    }
#line 5367 "src/parse/lex.cc"
yy602:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
yy603:
	if (yybm[0+yych] & 128) {
		goto yy602;
	}
	if (yych <= '\n') goto yy604;
	if (yych <= '"') goto yy605;
	goto yy606;
yy604:
	cur = mar;
	goto yy597;
yy605:
	++cur;
#line 816 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5393 "src/parse/lex.cc"
yy606:
	++cur;
	if (lim <= cur) if (!fill(1)) RET_FAIL(error("unexpected end of input"));
	yych = *cur;
	if (yych <= 0x00) goto yy604;
	if (yych == '\n') goto yy604;
	goto yy602;
}
#line 828 "../src/parse/lex.re"

}

#undef YYFILL

} // end namespace re2c
