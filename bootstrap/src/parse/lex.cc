/* Generated by re2c 2.1.1 on Tue Jun 29 23:42:09 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 62 "../src/parse/lex.re"


#line 121 "../src/parse/lex.re"


static inline void save_string(std::string &str, const char *s, const char *e)
{
    if (s == NULL) {
        str.clear();
    } else {
        str.assign(s, e);
    }
}

void Scanner::error_block_start(const char *block) const
{
    msg.error(cur_loc(), "ill-formed start of a block: expected `/*!%s`"
        " followed by a space, a newline or the end of block `*/`", block);
}

void Scanner::error_named_block_start(const char *block) const
{
    msg.error(cur_loc(), "ill-formed start of a block: expected `/*!%s`"
        ", optionally followed by a name of the form `:[a-zA-Z_][a-zA-Z0-9_]*`"
        ", followed by a space, a newline or the end of block `*/`", block);
}

void Scanner::error_include_directive() const
{
    msg.error(cur_loc(), "ill-formed include directive: expected `/*"
        // split string to prevent re2c from lexing this as a real directive
        "!include:re2c \"<file>\" */`");
}

void Scanner::error_header_directive() const
{
    msg.error(cur_loc(), "ill-formed header directive: expected `/*"
        // split string to prevent re2c from lexing this as a real directive
        "!header:re2c:<on|off>`"
        " followed by a space, a newline or the end of block `*/`");
}

Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 96 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  80,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 80,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  64,  64,  64,  64,  64,  64, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,   0,  64,  64, 192, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};
	if ((YYLIMIT - YYCURSOR) < 20) YYFILL(20);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 291 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 162 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 311 "../src/parse/lex.re"
	{ goto loop; }
#line 168 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 306 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 182 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 6) {
		if (yyaccept <= 3) {
			if (yyaccept <= 1) {
				if (yyaccept == 0) {
					goto yy7;
				} else {
					goto yy5;
				}
			} else {
				if (yyaccept == 2) {
					goto yy68;
				} else {
					goto yy129;
				}
			}
		} else {
			if (yyaccept <= 5) {
				if (yyaccept == 4) {
					goto yy136;
				} else {
					goto yy161;
				}
			} else {
				goto yy163;
			}
		}
	} else {
		if (yyaccept <= 10) {
			if (yyaccept <= 8) {
				if (yyaccept == 7) {
					goto yy165;
				} else {
					goto yy167;
				}
			} else {
				if (yyaccept == 9) {
					goto yy172;
				} else {
					goto yy174;
				}
			}
		} else {
			if (yyaccept <= 12) {
				if (yyaccept == 11) {
					goto yy199;
				} else {
					goto yy204;
				}
			} else {
				goto yy217;
			}
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 173 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Global;
    }
#line 278 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'l':	goto yy25;
	case 'm':	goto yy26;
	case 'r':	goto yy27;
	case 's':	goto yy28;
	case 't':	goto yy29;
	case 'u':	goto yy30;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy31;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy33;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy41;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy42;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy43;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy44;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy45;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy47;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy48;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy49;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy50;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy52;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy53;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy54;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy55;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy58;
	if (yych <= '9') goto yy13;
	goto yy58;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy59;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy60;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy63;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy66;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy67;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy69;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy70;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy57:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy58:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy57;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy57;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy73;
		}
		goto yy13;
	}
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy75;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy77;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy78;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy79;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy80;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy81;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy82;
	goto yy13;
yy67:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy68;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy83;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy83;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy83;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy85;
			}
		}
	}
yy68:
#line 278 "../src/parse/lex.re"
	{ error_block_start("re2c");             exit(1); }
#line 528 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy86;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy87;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy88;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy89;
	goto yy13;
yy73:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy73;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy90;
		if (yych <= '\n') goto yy92;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy94;
		if (yych == ' ') goto yy90;
		goto yy13;
	}
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy95;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy96;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy98;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy100;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy101;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy102;
	goto yy13;
yy83:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 178 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Global;
    }
#line 602 "src/parse/lex.cc"
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy83;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy103;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy104;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy105;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy90:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy90;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy90;
		if (yych == '"') goto yy107;
		goto yy13;
	}
yy92:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 299 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 645 "src/parse/lex.cc"
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy92;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy109;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy110;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy111;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy112;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy115;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy120;
	goto yy13;
yy107:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy107;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy121;
	goto yy122;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy123;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy124;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy125;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy126;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy127;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy128;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy130;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy131;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy132;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy133;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy134;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy135;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy92;
	if (yych == '\r') goto yy94;
	goto yy13;
yy122:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy107;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy137;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy138;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy139;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy140;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy141;
	goto yy13;
yy128:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy129;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy142;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy142;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy142;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy144;
			}
		}
	}
yy129:
#line 280 "../src/parse/lex.re"
	{ error_block_start("max:re2c");         exit(1); }
#line 817 "src/parse/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy145;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy146;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy147;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy148;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy149;
	goto yy13;
yy135:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy150;
			}
		} else {
			if (yych == '\r') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy150;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy150;
			}
			if (yych >= '*') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy152;
			}
		} else {
			if (yych == ':') goto yy153;
		}
	}
yy136:
#line 287 "../src/parse/lex.re"
	{ error_named_block_start("use:re2c");   exit(1); }
#line 874 "src/parse/lex.cc"
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy154;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy155;
	goto yy13;
yy139:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy156;
	goto yy13;
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy157;
	goto yy13;
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy158;
	goto yy13;
yy142:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 207 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        // historically allows garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 906 "src/parse/lex.cc"
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy142;
	goto yy13;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy159;
	goto yy13;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy160;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy164;
	goto yy13;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy166;
	goto yy13;
yy150:
	++YYCURSOR;
	x = yyt3;
	y = yyt1;
	YYCURSOR = yyt2;
#line 194 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Reuse;
    }
#line 942 "src/parse/lex.cc"
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy150;
	goto yy13;
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt3 = YYCURSOR;
			goto yy168;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt3 = YYCURSOR;
			goto yy168;
		}
		goto yy13;
	}
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy170;
	goto yy13;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy171;
	goto yy13;
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy173;
	goto yy13;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy175;
	goto yy13;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy176;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = YYCURSOR;
		goto yy176;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = YYCURSOR;
			goto yy176;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy178;
			}
			goto yy13;
		}
	}
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy179;
	goto yy13;
yy160:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy161;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy180;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy180;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy180;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy182;
			}
		}
	}
yy161:
#line 285 "../src/parse/lex.re"
	{ error_block_start("mtags:re2c");       exit(1); }
#line 1037 "src/parse/lex.cc"
yy162:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy183;
			}
		} else {
			if (yych == '\r') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy183;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy183;
			}
			if (yych >= '*') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy185;
			}
		} else {
			if (yych == ':') goto yy186;
		}
	}
yy163:
#line 286 "../src/parse/lex.re"
	{ error_named_block_start("rules:re2c"); exit(1); }
#line 1074 "src/parse/lex.cc"
yy164:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy165;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy187;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy187;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy187;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy189;
			}
		}
	}
yy165:
#line 284 "../src/parse/lex.re"
	{ error_block_start("stags:re2c");       exit(1); }
#line 1104 "src/parse/lex.cc"
yy166:
	yyaccept = 8;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy167;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy190;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy190;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy190;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy192;
			}
		}
	}
yy167:
#line 283 "../src/parse/lex.re"
	{ error_block_start("types:re2c");       exit(1); }
#line 1134 "src/parse/lex.cc"
yy168:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy168;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = yyt2 = YYCURSOR;
			goto yy150;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = yyt2 = YYCURSOR;
		goto yy150;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy150;
		} else {
			if (yych == '*') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy152;
			}
			goto yy13;
		}
	}
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy193;
	goto yy13;
yy171:
	yyaccept = 9;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy194;
yy172:
#line 289 "../src/parse/lex.re"
	{ error_header_directive();              exit(1); }
#line 1175 "src/parse/lex.cc"
yy173:
	yyaccept = 10;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy174;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy195;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy195;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy195;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
		}
	}
yy174:
#line 279 "../src/parse/lex.re"
	{ error_block_start("ignore:re2c");      exit(1); }
#line 1205 "src/parse/lex.cc"
yy175:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy198;
	goto yy13;
yy176:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 183 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Local;
    }
#line 1218 "src/parse/lex.cc"
yy178:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy176;
	goto yy13;
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy200;
	goto yy13;
yy180:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 249 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 1236 "src/parse/lex.cc"
yy182:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy180;
	goto yy13;
yy183:
	++YYCURSOR;
	x = yyt3;
	y = yyt1;
	YYCURSOR = yyt2;
#line 188 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Rules;
    }
#line 1252 "src/parse/lex.cc"
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy183;
	goto yy13;
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt3 = YYCURSOR;
			goto yy201;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt3 = YYCURSOR;
			goto yy201;
		}
		goto yy13;
	}
yy187:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 243 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 1283 "src/parse/lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy187;
	goto yy13;
yy190:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 232 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 1302 "src/parse/lex.cc"
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy190;
	goto yy13;
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy203;
	goto yy13;
yy194:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy205;
	goto yy13;
yy195:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 200 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 1325 "src/parse/lex.cc"
yy197:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy195;
	goto yy13;
yy198:
	yyaccept = 11;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy206;
	if (yych == ' ') goto yy206;
yy199:
#line 288 "../src/parse/lex.re"
	{ error_include_directive();             exit(1); }
#line 1338 "src/parse/lex.cc"
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy208;
	goto yy13;
yy201:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '*') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy13;
			if (yych <= '\n') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy183;
			}
			if (yych <= '\f') goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy183;
		} else {
			if (yych == ' ') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy183;
			}
			if (yych <= ')') goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy185;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '/') goto yy13;
			if (yych <= '9') goto yy201;
			if (yych <= '@') goto yy13;
			goto yy201;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy13;
				goto yy201;
			} else {
				if (yych <= '`') goto yy13;
				if (yych <= 'z') goto yy201;
				goto yy13;
			}
		}
	}
yy203:
	yyaccept = 12;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy204;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy209;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy209;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy209;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy211;
			}
		}
	}
yy204:
#line 282 "../src/parse/lex.re"
	{ error_block_start("getstate:re2c");    exit(1); }
#line 1412 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy212;
	if (yych == 'n') goto yy213;
	goto yy13;
yy206:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy206;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy206;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy214;
		}
		goto yy13;
	}
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy216;
	goto yy13;
yy209:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 222 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 1450 "src/parse/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy209;
	goto yy13;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy218;
	goto yy13;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy219;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = YYCURSOR;
		goto yy219;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = YYCURSOR;
			goto yy219;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy221;
			}
			goto yy13;
		}
	}
yy214:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy214;
	} else {
		if (yych <= '"') goto yy222;
		if (yych == '\\') goto yy223;
		goto yy214;
	}
yy216:
	yyaccept = 13;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy217;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy224;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy224;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy224;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy226;
			}
		}
	}
yy217:
#line 281 "../src/parse/lex.re"
	{ error_block_start("maxnmatch:re2c");   exit(1); }
#line 1525 "src/parse/lex.cc"
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy227;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = YYCURSOR;
		goto yy227;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = YYCURSOR;
			goto yy227;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy229;
			}
			goto yy13;
		}
	}
yy219:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 255 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 1561 "src/parse/lex.cc"
yy221:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy219;
	goto yy13;
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = YYCURSOR;
			goto yy230;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = YYCURSOR;
		goto yy230;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = YYCURSOR;
			goto yy230;
		} else {
			if (yych == '*') {
				yyt2 = YYCURSOR;
				goto yy232;
			}
			goto yy13;
		}
	}
yy223:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy214;
yy224:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 215 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 1607 "src/parse/lex.cc"
yy226:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy224;
	goto yy13;
yy227:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 263 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 1623 "src/parse/lex.cc"
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy227;
	goto yy13;
yy230:
	++YYCURSOR;
	x = yyt1;
	YYCURSOR = yyt2;
	y = yyt2;
#line 271 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1640 "src/parse/lex.cc"
yy232:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy230;
	goto yy13;
}
#line 312 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1655 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy237;
		} else {
			if (yych <= '\n') goto yy239;
			if (yych >= '\r') goto yy241;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy237;
		} else {
			if (yych == '*') goto yy242;
		}
	}
	++YYCURSOR;
yy236:
#line 320 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 1682 "src/parse/lex.cc"
yy237:
	++YYCURSOR;
#line 325 "../src/parse/lex.re"
	{ goto loop; }
#line 1687 "src/parse/lex.cc"
yy239:
	++YYCURSOR;
#line 326 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 1696 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy239;
	goto yy236;
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy236;
	++YYCURSOR;
#line 331 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1712 "src/parse/lex.cc"
}
#line 337 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1724 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy249;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy252;
		} else {
			if (yych == '\r') goto yy254;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy255;
			if (yych >= 'f') goto yy256;
		} else {
			if (yych == 's') goto yy257;
		}
	}
	++YYCURSOR;
yy248:
#line 346 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1787 "src/parse/lex.cc"
yy249:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy249;
	}
#line 358 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1799 "src/parse/lex.cc"
yy252:
	++YYCURSOR;
#line 361 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1807 "src/parse/lex.cc"
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy252;
	goto yy248;
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy258;
	goto yy248;
yy256:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy260;
	goto yy248;
yy257:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy262;
	goto yy248;
yy258:
	++YYCURSOR;
#line 365 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1833 "src/parse/lex.cc"
yy260:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy263;
yy261:
	YYCURSOR = YYMARKER;
	goto yy248;
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy264;
	goto yy261;
yy263:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy265;
	goto yy261;
yy264:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy266;
	goto yy261;
yy265:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy267;
	goto yy261;
yy266:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy268;
	goto yy261;
yy267:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy269;
	goto yy261;
yy268:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy271;
	goto yy261;
yy269:
	++YYCURSOR;
#line 350 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1875 "src/parse/lex.cc"
yy271:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy261;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy261;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy261;
	++YYCURSOR;
#line 354 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1889 "src/parse/lex.cc"
}
#line 371 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1902 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy280;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy278;
				if (yych <= '\n') goto yy283;
				if (yych >= '\r') goto yy285;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy286;
				} else {
					if (yych <= '"') goto yy287;
					if (yych <= '#') goto yy289;
					goto yy290;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy292;
				} else {
					if (yych <= '\'') goto yy293;
					if (yych <= ')') goto yy290;
					goto yy295;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy290;
				} else {
					if (yych <= '.') goto yy296;
					if (yych <= '/') goto yy298;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy299;
				if (yych <= ';') goto yy290;
				if (yych <= '<') goto yy300;
				goto yy302;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy290;
				} else {
					if (yych <= '@') goto yy289;
					if (yych <= 'Z') goto yy303;
					goto yy306;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy290;
				} else {
					if (yych != '`') goto yy303;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy308;
					goto yy303;
				} else {
					if (yych <= '{') goto yy309;
					if (yych <= '|') goto yy290;
				}
			}
		}
	}
yy278:
	++YYCURSOR;
yy279:
#line 523 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 2020 "src/parse/lex.cc"
yy280:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy280;
	}
#line 505 "../src/parse/lex.re"
	{ goto scan; }
#line 2030 "src/parse/lex.cc"
yy283:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych == '#') goto yy314;
	}
yy284:
#line 512 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 2052 "src/parse/lex.cc"
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy283;
	goto yy279;
yy286:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy316;
	if (yych == 'u') goto yy317;
	goto yy279;
yy287:
	++YYCURSOR;
#line 397 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 2067 "src/parse/lex.cc"
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy279;
		if (yych <= 'Z') goto yy318;
		goto yy279;
	} else {
		if (yych == '`') goto yy279;
		if (yych <= 'z') goto yy318;
		goto yy279;
	}
yy290:
	++YYCURSOR;
yy291:
#line 406 "../src/parse/lex.re"
	{ return *tok; }
#line 2084 "src/parse/lex.cc"
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy321;
	goto yy279;
yy293:
	++YYCURSOR;
#line 396 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 2093 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy321;
	goto yy291;
yy296:
	++YYCURSOR;
#line 500 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 2105 "src/parse/lex.cc"
yy298:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy323;
	if (yych == '/') goto yy325;
	goto yy291;
yy299:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy327;
	goto yy279;
yy300:
	++YYCURSOR;
#line 389 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 2119 "src/parse/lex.cc"
yy302:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy329;
	goto yy291;
yy303:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy304:
	if (yybm[0+yych] & 32) {
		goto yy303;
	}
#line 455 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 2156 "src/parse/lex.cc"
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy331;
#line 398 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 2162 "src/parse/lex.cc"
yy308:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy333;
	goto yy304;
yy309:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy336;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy334;
		if (yych >= 'A') goto yy338;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy338;
		} else {
			if (yych <= '`') goto yy310;
			if (yych <= 'z') goto yy338;
		}
	}
yy310:
#line 381 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 2187 "src/parse/lex.cc"
yy311:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych == '#') goto yy314;
	}
yy313:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy284;
			} else {
				goto yy279;
			}
		} else {
			if (yyaccept == 2) {
				goto yy291;
			} else {
				goto yy310;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy328;
			} else {
				goto yy335;
			}
		} else {
			if (yyaccept == 6) {
				goto yy355;
			} else {
				goto yy379;
			}
		}
	}
yy314:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy314;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy314;
		if (yych == 'l') goto yy340;
		goto yy313;
	}
yy316:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy341;
	goto yy313;
yy317:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy342;
	goto yy313;
yy318:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy320;
		if (yych <= '9') goto yy318;
		if (yych >= 'A') goto yy318;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy318;
		} else {
			if (yych <= '`') goto yy320;
			if (yych <= 'z') goto yy318;
		}
	}
yy320:
#line 401 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2271 "src/parse/lex.cc"
yy321:
	++YYCURSOR;
#line 394 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2276 "src/parse/lex.cc"
yy323:
	++YYCURSOR;
#line 392 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2281 "src/parse/lex.cc"
yy325:
	++YYCURSOR;
#line 391 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2286 "src/parse/lex.cc"
yy327:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy329;
yy328:
#line 382 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2294 "src/parse/lex.cc"
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy313;
			goto yy329;
		} else {
			if (yych == ' ') goto yy329;
			goto yy313;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy343;
			}
			if (yych <= '^') goto yy313;
			yyt1 = YYCURSOR;
			goto yy343;
		} else {
			if (yych <= '`') goto yy313;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy343;
			}
			goto yy313;
		}
	}
yy331:
	++YYCURSOR;
#line 399 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2329 "src/parse/lex.cc"
yy333:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy346;
	goto yy304;
yy334:
	++YYCURSOR;
yy335:
#line 438 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2343 "src/parse/lex.cc"
yy336:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy336;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy347;
	}
	if (yych == '}') goto yy348;
	goto yy313;
yy338:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy313;
			goto yy338;
		} else {
			if (yych <= '@') goto yy313;
			if (yych <= 'Z') goto yy338;
			goto yy313;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy313;
			goto yy338;
		} else {
			if (yych == '}') goto yy350;
			goto yy313;
		}
	}
yy340:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy352;
	goto yy313;
yy341:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy353;
	goto yy313;
yy342:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy354;
	goto yy313;
yy343:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy345;
		if (yych <= '9') goto yy343;
		if (yych >= 'A') goto yy343;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy343;
		} else {
			if (yych <= '`') goto yy345;
			if (yych <= 'z') goto yy343;
		}
	}
yy345:
	p = yyt1;
#line 384 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2414 "src/parse/lex.cc"
yy346:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy356;
	goto yy304;
yy347:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy335;
	if (yych <= '9') goto yy357;
	if (yych == '}') goto yy359;
	goto yy335;
yy348:
	++YYCURSOR;
#line 408 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2437 "src/parse/lex.cc"
yy350:
	++YYCURSOR;
#line 444 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2449 "src/parse/lex.cc"
yy352:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy361;
	goto yy313;
yy353:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy362;
	goto yy313;
yy354:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy363;
yy355:
#line 494 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 2469 "src/parse/lex.cc"
yy356:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy364;
	goto yy304;
yy357:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy313;
	if (yych <= '9') goto yy357;
	if (yych == '}') goto yy366;
	goto yy313;
yy359:
	++YYCURSOR;
#line 429 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2493 "src/parse/lex.cc"
yy361:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy368;
	goto yy313;
yy362:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy369;
	goto yy313;
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy313;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy370;
		}
		goto yy313;
	} else {
		if (yych == '`') goto yy313;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy370;
		}
		goto yy313;
	}
yy364:
	++YYCURSOR;
#line 453 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2523 "src/parse/lex.cc"
yy366:
	++YYCURSOR;
	p = yyt1;
#line 417 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2539 "src/parse/lex.cc"
yy368:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy373;
	if (yych <= '9') goto yy313;
	goto yy373;
yy369:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy374;
	goto yy313;
yy370:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy313;
			goto yy370;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy375;
			}
			goto yy313;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy370;
			if (yych <= '^') goto yy313;
			goto yy370;
		} else {
			if (yych <= '`') goto yy313;
			if (yych <= 'z') goto yy370;
			goto yy313;
		}
	}
yy372:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy373:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy372;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy372;
		if (yych <= '0') goto yy313;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy376;
		}
		goto yy313;
	}
yy374:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy378;
	goto yy313;
yy375:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy380;
	if (yych == '\r') goto yy382;
	goto yy313;
yy376:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy313;
			goto yy383;
		} else {
			if (yych <= '\n') goto yy385;
			if (yych <= '\f') goto yy313;
			goto yy387;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy313;
			goto yy383;
		} else {
			if (yych <= '/') goto yy313;
			if (yych <= '9') goto yy376;
			goto yy313;
		}
	}
yy378:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy388;
	if (yych == ' ') goto yy388;
yy379:
#line 483 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2636 "src/parse/lex.cc"
yy380:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 489 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2647 "src/parse/lex.cc"
yy382:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy380;
	goto yy313;
yy383:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy383;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy383;
		if (yych == '"') goto yy390;
		goto yy313;
	}
yy385:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 507 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2672 "src/parse/lex.cc"
yy387:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy385;
	goto yy313;
yy388:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy388;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy388;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy392;
		}
		goto yy313;
	}
yy390:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy390;
	}
	if (yych <= '\n') goto yy313;
	if (yych <= '"') goto yy394;
	goto yy395;
yy392:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy313;
		if (yych == '\n') goto yy313;
		goto yy392;
	} else {
		if (yych <= '"') goto yy396;
		if (yych == '\\') goto yy397;
		goto yy392;
	}
yy394:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy385;
	if (yych == '\r') goto yy387;
	goto yy313;
yy395:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy313;
	if (yych == '\n') goto yy313;
	goto yy390;
yy396:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy398;
		}
		goto yy313;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy398;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy400;
		}
		goto yy313;
	}
yy397:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy313;
	if (yych == '\n') goto yy313;
	goto yy392;
yy398:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy398;
		goto yy313;
	} else {
		if (yych <= ' ') goto yy398;
		if (yych != ';') goto yy313;
	}
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy401;
	if (yych == '\r') goto yy403;
	goto yy313;
yy401:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 478 "../src/parse/lex.re"
	{
        next_line();
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2779 "src/parse/lex.cc"
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy401;
	goto yy313;
}
#line 527 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2792 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy407;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy407;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy410;
		}
	}
yy406:
#line 534 "../src/parse/lex.re"
	{ return false; }
#line 2849 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy407;
	}
	if (yych == '=') goto yy410;
yy409:
	YYCURSOR = YYMARKER;
	goto yy406;
yy410:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy409;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 533 "../src/parse/lex.re"
	{ return true; }
#line 2868 "src/parse/lex.cc"
}
#line 535 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2877 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy416;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy416;
	}
#line 543 "../src/parse/lex.re"
	{ return false; }
#line 2926 "src/parse/lex.cc"
yy416:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy416;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy419;
	} else {
		if (yych <= '=') goto yy419;
		if (yych == '{') goto yy419;
	}
	YYCURSOR = yyt1;
#line 542 "../src/parse/lex.re"
	{ return true; }
#line 2943 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 541 "../src/parse/lex.re"
	{ return false; }
#line 2949 "src/parse/lex.cc"
}
#line 544 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2960 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy421;
yy422:
	++YYCURSOR;
yy421:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy422;
	}
	if (yych <= 0x1F) goto yy424;
	if (yych <= '!') goto yy425;
	if (yych == '>') goto yy428;
yy424:
#line 554 "../src/parse/lex.re"
	{ goto cond; }
#line 3012 "src/parse/lex.cc"
yy425:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy425;
	if (yych == ' ') goto yy425;
#line 552 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 3021 "src/parse/lex.cc"
yy428:
	++YYCURSOR;
#line 553 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 3026 "src/parse/lex.cc"
}
#line 555 "../src/parse/lex.re"

cond:
    tok = cur;

#line 3033 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy434;
		if (yych >= 'A') goto yy436;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy436;
		} else {
			if (yych <= '`') goto yy432;
			if (yych <= 'z') goto yy436;
		}
	}
yy432:
	++YYCURSOR;
#line 561 "../src/parse/lex.re"
	{ goto error; }
#line 3087 "src/parse/lex.cc"
yy434:
	++YYCURSOR;
#line 560 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 3092 "src/parse/lex.cc"
yy436:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy436;
	}
#line 559 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 3102 "src/parse/lex.cc"
}
#line 562 "../src/parse/lex.re"

next:

#line 3108 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy443;
		if (yych >= ' ') goto yy443;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy444;
		} else {
			if (yych == '>') goto yy447;
		}
	}
	++YYCURSOR;
yy442:
#line 567 "../src/parse/lex.re"
	{ goto error; }
#line 3161 "src/parse/lex.cc"
yy443:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy449;
		if (yych <= 0x1F) goto yy442;
		goto yy449;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy442;
		} else {
			if (yych == '>') goto yy447;
			goto yy442;
		}
	}
yy444:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy444;
	}
#line 565 "../src/parse/lex.re"
	{ goto cond; }
#line 3185 "src/parse/lex.cc"
yy447:
	++YYCURSOR;
#line 566 "../src/parse/lex.re"
	{ goto end; }
#line 3190 "src/parse/lex.cc"
yy449:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy449;
		if (yych >= ' ') goto yy449;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy444;
		} else {
			if (yych == '>') goto yy447;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy442;
}
#line 568 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3225 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy454;
			if (yych == '\n') goto yy458;
			goto yy456;
		} else {
			if (yych <= '\r') goto yy460;
			if (yych == '"') goto yy461;
			goto yy456;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy461;
			if (yych == '/') goto yy463;
			goto yy456;
		} else {
			if (yych == '|') goto yy456;
			if (yych <= '}') goto yy464;
			goto yy456;
		}
	}
yy454:
	++YYCURSOR;
#line 594 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3255 "src/parse/lex.cc"
yy456:
	++YYCURSOR;
yy457:
#line 602 "../src/parse/lex.re"
	{ goto code; }
#line 3261 "src/parse/lex.cc"
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy459;
		if (yych <= '\n') goto yy466;
	} else {
		if (yych <= '\r') goto yy466;
		if (yych == ' ') goto yy466;
	}
yy459:
#line 585 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3281 "src/parse/lex.cc"
yy460:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy458;
	goto yy457;
yy461:
	++YYCURSOR;
#line 601 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3290 "src/parse/lex.cc"
yy463:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy468;
	if (yych == '/') goto yy470;
	goto yy457;
yy464:
	++YYCURSOR;
#line 595 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 3303 "src/parse/lex.cc"
yy466:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 584 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3309 "src/parse/lex.cc"
yy468:
	++YYCURSOR;
#line 599 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3314 "src/parse/lex.cc"
yy470:
	++YYCURSOR;
#line 600 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3319 "src/parse/lex.cc"
}
#line 603 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3331 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy474;
			if (yych == '\n') goto yy478;
			goto yy476;
		} else {
			if (yych <= '\r') goto yy480;
			if (yych == '"') goto yy481;
			goto yy476;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy481;
			if (yych == '/') goto yy483;
			goto yy476;
		} else {
			if (yych <= '{') goto yy484;
			if (yych == '}') goto yy486;
			goto yy476;
		}
	}
yy474:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3395 "src/parse/lex.cc"
yy476:
	++YYCURSOR;
yy477:
#line 627 "../src/parse/lex.re"
	{ goto code; }
#line 3401 "src/parse/lex.cc"
yy478:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy488;
	}
	if (yych == '#') goto yy491;
yy479:
#line 622 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3411 "src/parse/lex.cc"
yy480:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy478;
	goto yy477;
yy481:
	++YYCURSOR;
#line 626 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3420 "src/parse/lex.cc"
yy483:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy493;
	if (yych == '/') goto yy495;
	goto yy477;
yy484:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3430 "src/parse/lex.cc"
yy486:
	++YYCURSOR;
#line 612 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3441 "src/parse/lex.cc"
yy488:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy488;
	}
	if (yych == '#') goto yy491;
yy490:
	YYCURSOR = YYMARKER;
	goto yy479;
yy491:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy491;
		goto yy490;
	} else {
		if (yych <= ' ') goto yy491;
		if (yych == 'l') goto yy497;
		goto yy490;
	}
yy493:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3469 "src/parse/lex.cc"
yy495:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3474 "src/parse/lex.cc"
yy497:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy490;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy490;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy490;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy502;
	if (yych <= '9') goto yy490;
	goto yy502;
yy501:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy502:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy501;
		goto yy490;
	} else {
		if (yych <= ' ') goto yy501;
		if (yych <= '0') goto yy490;
		if (yych >= ':') goto yy490;
		yyt1 = YYCURSOR;
	}
yy503:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy503;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy490;
		if (yych <= '\t') goto yy505;
		if (yych <= '\n') goto yy507;
		goto yy490;
	} else {
		if (yych <= '\r') goto yy509;
		if (yych != ' ') goto yy490;
	}
yy505:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy505;
		goto yy490;
	} else {
		if (yych <= ' ') goto yy505;
		if (yych == '"') goto yy510;
		goto yy490;
	}
yy507:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 621 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3533 "src/parse/lex.cc"
yy509:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy507;
	goto yy490;
yy510:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy510;
	}
	if (yych <= '\n') goto yy490;
	if (yych >= '#') goto yy513;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy507;
	if (yych == '\r') goto yy509;
	goto yy490;
yy513:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy490;
	if (yych == '\n') goto yy490;
	goto yy510;
}
#line 628 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3567 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy516;
			if (yych <= '\t') goto yy518;
			goto yy520;
		} else {
			if (yych == '\r') goto yy522;
			goto yy518;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy523;
			if (yych <= '&') goto yy518;
			goto yy523;
		} else {
			if (yych == '\\') goto yy525;
			goto yy518;
		}
	}
yy516:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3595 "src/parse/lex.cc"
yy518:
	++YYCURSOR;
yy519:
#line 639 "../src/parse/lex.re"
	{ goto loop; }
#line 3601 "src/parse/lex.cc"
yy520:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3606 "src/parse/lex.cc"
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy520;
	goto yy519;
yy523:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3615 "src/parse/lex.cc"
yy525:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy519;
	} else {
		if (yych <= '\'') goto yy526;
		if (yych != '\\') goto yy519;
	}
yy526:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ goto loop; }
#line 3628 "src/parse/lex.cc"
}
#line 640 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3638 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy530;
		if (yych == '\n') goto yy534;
		goto yy532;
	} else {
		if (yych <= '\r') goto yy536;
		if (yych == '*') goto yy537;
		goto yy532;
	}
yy530:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3656 "src/parse/lex.cc"
yy532:
	++YYCURSOR;
yy533:
#line 650 "../src/parse/lex.re"
	{ goto loop; }
#line 3662 "src/parse/lex.cc"
yy534:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3667 "src/parse/lex.cc"
yy536:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy534;
	goto yy533;
yy537:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy533;
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return; }
#line 3678 "src/parse/lex.cc"
}
#line 651 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3688 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy542;
		if (yych <= '\t') goto yy544;
		goto yy546;
	} else {
		if (yych == '\r') goto yy548;
		goto yy544;
	}
yy542:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3705 "src/parse/lex.cc"
yy544:
	++YYCURSOR;
yy545:
#line 660 "../src/parse/lex.re"
	{ goto loop; }
#line 3711 "src/parse/lex.cc"
yy546:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3716 "src/parse/lex.cc"
yy548:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy546;
	goto yy545;
}
#line 661 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3735 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy552;
#line 674 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3743 "src/parse/lex.cc"
yy552:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3748 "src/parse/lex.cc"
}
#line 675 "../src/parse/lex.re"

snd:

#line 3754 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy557;
yy556:
#line 678 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3763 "src/parse/lex.cc"
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy559;
	YYCURSOR = YYMARKER;
	goto yy556;
yy559:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 679 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3781 "src/parse/lex.cc"
}
#line 687 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 724 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3799 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy563;
		if (yych == '\n') goto yy567;
		goto yy565;
	} else {
		if (yych <= '\r') goto yy569;
		if (yych == '\\') goto yy570;
		goto yy565;
	}
yy563:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3818 "src/parse/lex.cc"
yy565:
	++YYCURSOR;
yy566:
#line 707 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3824 "src/parse/lex.cc"
yy567:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3829 "src/parse/lex.cc"
yy569:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy567;
	goto yy566;
yy570:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy571;
				if (yych == '\n') goto yy567;
				goto yy572;
			} else {
				if (yych <= '\r') goto yy574;
				if (yych == '-') goto yy575;
				goto yy572;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy577;
				if (yych <= '7') goto yy579;
				if (yych <= 'T') goto yy572;
				goto yy580;
			} else {
				if (yych == 'X') goto yy582;
				if (yych <= '[') goto yy572;
				goto yy583;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy585;
				if (yych <= '`') goto yy572;
				if (yych <= 'a') goto yy587;
				goto yy589;
			} else {
				if (yych == 'f') goto yy591;
				if (yych <= 'm') goto yy572;
				goto yy593;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy595;
				if (yych <= 's') goto yy572;
				goto yy597;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy582;
					goto yy599;
				} else {
					if (yych == 'x') goto yy601;
					goto yy572;
				}
			}
		}
	}
yy571:
#line 702 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3890 "src/parse/lex.cc"
yy572:
	++YYCURSOR;
yy573:
#line 720 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3899 "src/parse/lex.cc"
yy574:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy567;
	goto yy573;
yy575:
	++YYCURSOR;
#line 718 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3908 "src/parse/lex.cc"
yy577:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy578;
	if (yych <= '7') goto yy602;
yy578:
#line 701 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3917 "src/parse/lex.cc"
yy579:
	++YYCURSOR;
	goto yy578;
yy580:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy581;
		if (yych <= '9') goto yy604;
	} else {
		if (yych <= 'F') goto yy604;
		if (yych <= '`') goto yy581;
		if (yych <= 'f') goto yy604;
	}
yy581:
#line 700 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3935 "src/parse/lex.cc"
yy582:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy581;
		if (yych <= '9') goto yy605;
		goto yy581;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy581;
		if (yych <= 'f') goto yy605;
		goto yy581;
	}
yy583:
	++YYCURSOR;
#line 717 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3953 "src/parse/lex.cc"
yy585:
	++YYCURSOR;
#line 719 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3958 "src/parse/lex.cc"
yy587:
	++YYCURSOR;
#line 710 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3963 "src/parse/lex.cc"
yy589:
	++YYCURSOR;
#line 711 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3968 "src/parse/lex.cc"
yy591:
	++YYCURSOR;
#line 712 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3973 "src/parse/lex.cc"
yy593:
	++YYCURSOR;
#line 713 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3978 "src/parse/lex.cc"
yy595:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3983 "src/parse/lex.cc"
yy597:
	++YYCURSOR;
#line 715 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3988 "src/parse/lex.cc"
yy599:
	++YYCURSOR;
#line 716 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3993 "src/parse/lex.cc"
yy601:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy581;
		if (yych <= '9') goto yy606;
		goto yy581;
	} else {
		if (yych <= 'F') goto yy606;
		if (yych <= '`') goto yy581;
		if (yych <= 'f') goto yy606;
		goto yy581;
	}
yy602:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy603;
	if (yych <= '7') goto yy607;
yy603:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy578;
	} else {
		goto yy581;
	}
yy604:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy609;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy609;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy609;
		goto yy603;
	}
yy605:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy610;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy610;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy610;
		goto yy603;
	}
yy606:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy611;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy611;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy611;
		goto yy603;
	}
yy607:
	++YYCURSOR;
#line 709 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4058 "src/parse/lex.cc"
yy609:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy613;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy613;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy613;
		goto yy603;
	}
yy610:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy606;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy606;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy606;
		goto yy603;
	}
yy611:
	++YYCURSOR;
#line 708 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4087 "src/parse/lex.cc"
yy613:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych >= ':') goto yy603;
	} else {
		if (yych <= 'F') goto yy614;
		if (yych <= '`') goto yy603;
		if (yych >= 'g') goto yy603;
	}
yy614:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy603;
		if (yych <= '9') goto yy605;
		goto yy603;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy603;
		if (yych <= 'f') goto yy605;
		goto yy603;
	}
}
#line 726 "../src/parse/lex.re"

    }
    else {
        
#line 4116 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy617;
			if (yych == '\n') goto yy621;
			goto yy619;
		} else {
			if (yych <= '\r') goto yy623;
			if (yych == '\\') goto yy624;
			goto yy619;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy626;
			if (yych <= 0xDF) goto yy628;
			if (yych <= 0xE0) goto yy629;
			goto yy630;
		} else {
			if (yych <= 0xF0) goto yy631;
			if (yych <= 0xF3) goto yy632;
			if (yych <= 0xF4) goto yy633;
			goto yy626;
		}
	}
yy617:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4149 "src/parse/lex.cc"
yy619:
	++YYCURSOR;
yy620:
#line 707 "../src/parse/lex.re"
	{ return decode(tok); }
#line 4155 "src/parse/lex.cc"
yy621:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4160 "src/parse/lex.cc"
yy623:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy621;
	goto yy620;
yy624:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy634;
				} else {
					if (yych <= '\n') goto yy621;
					if (yych <= '\f') goto yy634;
					goto yy636;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy634;
					goto yy637;
				} else {
					if (yych <= '/') goto yy634;
					if (yych <= '3') goto yy639;
					goto yy641;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy634;
					goto yy642;
				} else {
					if (yych == 'X') goto yy644;
					goto yy634;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy645;
					goto yy647;
				} else {
					if (yych <= '`') goto yy634;
					if (yych <= 'a') goto yy649;
					goto yy651;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy634;
					goto yy653;
				} else {
					if (yych == 'n') goto yy655;
					goto yy634;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy657;
					goto yy634;
				} else {
					if (yych <= 't') goto yy659;
					if (yych <= 'u') goto yy644;
					goto yy661;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy634;
					goto yy663;
				} else {
					if (yych <= 0x7F) goto yy634;
					if (yych >= 0xC2) goto yy664;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy666;
					if (yych <= 0xEF) goto yy667;
					goto yy668;
				} else {
					if (yych <= 0xF3) goto yy669;
					if (yych <= 0xF4) goto yy670;
				}
			}
		}
	}
yy625:
#line 702 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4252 "src/parse/lex.cc"
yy626:
	++YYCURSOR;
yy627:
#line 703 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4258 "src/parse/lex.cc"
yy628:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy627;
	if (yych <= 0xBF) goto yy619;
	goto yy627;
yy629:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy627;
	if (yych <= 0xBF) goto yy671;
	goto yy627;
yy630:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy627;
	if (yych <= 0xBF) goto yy671;
	goto yy627;
yy631:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy627;
	if (yych <= 0xBF) goto yy672;
	goto yy627;
yy632:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy627;
	if (yych <= 0xBF) goto yy672;
	goto yy627;
yy633:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy627;
	if (yych <= 0x8F) goto yy672;
	goto yy627;
yy634:
	++YYCURSOR;
yy635:
#line 720 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4302 "src/parse/lex.cc"
yy636:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy621;
	goto yy635;
yy637:
	++YYCURSOR;
#line 718 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4311 "src/parse/lex.cc"
yy639:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy640;
	if (yych <= '7') goto yy673;
yy640:
#line 701 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4320 "src/parse/lex.cc"
yy641:
	++YYCURSOR;
	goto yy640;
yy642:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy674;
	} else {
		if (yych <= 'F') goto yy674;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy674;
	}
yy643:
#line 700 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4338 "src/parse/lex.cc"
yy644:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy675;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy675;
		goto yy643;
	}
yy645:
	++YYCURSOR;
#line 717 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4356 "src/parse/lex.cc"
yy647:
	++YYCURSOR;
#line 719 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4361 "src/parse/lex.cc"
yy649:
	++YYCURSOR;
#line 710 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4366 "src/parse/lex.cc"
yy651:
	++YYCURSOR;
#line 711 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4371 "src/parse/lex.cc"
yy653:
	++YYCURSOR;
#line 712 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4376 "src/parse/lex.cc"
yy655:
	++YYCURSOR;
#line 713 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4381 "src/parse/lex.cc"
yy657:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4386 "src/parse/lex.cc"
yy659:
	++YYCURSOR;
#line 715 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4391 "src/parse/lex.cc"
yy661:
	++YYCURSOR;
#line 716 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4396 "src/parse/lex.cc"
yy663:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy676;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy676;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy676;
		goto yy643;
	}
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0xBF) goto yy634;
yy665:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy625;
		} else {
			goto yy627;
		}
	} else {
		if (yyaccept == 2) {
			goto yy640;
		} else {
			goto yy643;
		}
	}
yy666:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy665;
	if (yych <= 0xBF) goto yy664;
	goto yy665;
yy667:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0xBF) goto yy664;
	goto yy665;
yy668:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy665;
	if (yych <= 0xBF) goto yy667;
	goto yy665;
yy669:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0xBF) goto yy667;
	goto yy665;
yy670:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0x8F) goto yy667;
	goto yy665;
yy671:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0xBF) goto yy619;
	goto yy665;
yy672:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy665;
	if (yych <= 0xBF) goto yy671;
	goto yy665;
yy673:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy665;
	if (yych <= '7') goto yy677;
	goto yy665;
yy674:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy679;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy679;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy679;
		goto yy665;
	}
yy675:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy680;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy680;
		goto yy665;
	}
yy676:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy681;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy681;
		goto yy665;
	}
yy677:
	++YYCURSOR;
#line 709 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4509 "src/parse/lex.cc"
yy679:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy683;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy683;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy683;
		goto yy665;
	}
yy680:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy676;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy676;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy676;
		goto yy665;
	}
yy681:
	++YYCURSOR;
#line 708 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4538 "src/parse/lex.cc"
yy683:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych >= ':') goto yy665;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy665;
		if (yych >= 'g') goto yy665;
	}
yy684:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy665;
		if (yych <= '9') goto yy675;
		goto yy665;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy665;
		if (yych <= 'f') goto yy675;
		goto yy665;
	}
}
#line 729 "../src/parse/lex.re"
 #line 729 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 763 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4577 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy687;
		if (yych == '\n') goto yy691;
		goto yy689;
	} else {
		if (yych <= '\r') goto yy693;
		if (yych == '\\') goto yy694;
		goto yy689;
	}
yy687:
	++YYCURSOR;
#line 745 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4596 "src/parse/lex.cc"
yy689:
	++YYCURSOR;
yy690:
#line 747 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4602 "src/parse/lex.cc"
yy691:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4607 "src/parse/lex.cc"
yy693:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy691;
	goto yy690;
yy694:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy695;
				if (yych <= '\t') goto yy696;
				goto yy691;
			} else {
				if (yych == '\r') goto yy698;
				if (yych <= '/') goto yy696;
				goto yy699;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy701;
				if (yych == 'U') goto yy702;
				goto yy696;
			} else {
				if (yych <= 'X') goto yy704;
				if (yych == '\\') goto yy705;
				goto yy696;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy707;
				if (yych <= 'b') goto yy709;
				goto yy696;
			} else {
				if (yych <= 'f') goto yy711;
				if (yych == 'n') goto yy713;
				goto yy696;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy715;
				if (yych <= 's') goto yy696;
				if (yych <= 't') goto yy717;
				goto yy704;
			} else {
				if (yych <= 'v') goto yy719;
				if (yych == 'x') goto yy721;
				goto yy696;
			}
		}
	}
yy695:
#line 742 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4663 "src/parse/lex.cc"
yy696:
	++YYCURSOR;
yy697:
#line 758 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4673 "src/parse/lex.cc"
yy698:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy691;
	goto yy697;
yy699:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy700;
	if (yych <= '7') goto yy722;
yy700:
#line 741 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4686 "src/parse/lex.cc"
yy701:
	++YYCURSOR;
	goto yy700;
yy702:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy703;
		if (yych <= '9') goto yy724;
	} else {
		if (yych <= 'F') goto yy724;
		if (yych <= '`') goto yy703;
		if (yych <= 'f') goto yy724;
	}
yy703:
#line 740 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4704 "src/parse/lex.cc"
yy704:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy703;
		if (yych <= '9') goto yy725;
		goto yy703;
	} else {
		if (yych <= 'F') goto yy725;
		if (yych <= '`') goto yy703;
		if (yych <= 'f') goto yy725;
		goto yy703;
	}
yy705:
	++YYCURSOR;
#line 757 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4722 "src/parse/lex.cc"
yy707:
	++YYCURSOR;
#line 750 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4727 "src/parse/lex.cc"
yy709:
	++YYCURSOR;
#line 751 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4732 "src/parse/lex.cc"
yy711:
	++YYCURSOR;
#line 752 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4737 "src/parse/lex.cc"
yy713:
	++YYCURSOR;
#line 753 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4742 "src/parse/lex.cc"
yy715:
	++YYCURSOR;
#line 754 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4747 "src/parse/lex.cc"
yy717:
	++YYCURSOR;
#line 755 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4752 "src/parse/lex.cc"
yy719:
	++YYCURSOR;
#line 756 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4757 "src/parse/lex.cc"
yy721:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy703;
		if (yych <= '9') goto yy726;
		goto yy703;
	} else {
		if (yych <= 'F') goto yy726;
		if (yych <= '`') goto yy703;
		if (yych <= 'f') goto yy726;
		goto yy703;
	}
yy722:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy723;
	if (yych <= '7') goto yy727;
yy723:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy700;
	} else {
		goto yy703;
	}
yy724:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy729;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy729;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy729;
		goto yy723;
	}
yy725:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy730;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy730;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy730;
		goto yy723;
	}
yy726:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy731;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy731;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy731;
		goto yy723;
	}
yy727:
	++YYCURSOR;
#line 749 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4822 "src/parse/lex.cc"
yy729:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy733;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy733;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy733;
		goto yy723;
	}
yy730:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy726;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy726;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy726;
		goto yy723;
	}
yy731:
	++YYCURSOR;
#line 748 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4851 "src/parse/lex.cc"
yy733:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych >= ':') goto yy723;
	} else {
		if (yych <= 'F') goto yy734;
		if (yych <= '`') goto yy723;
		if (yych >= 'g') goto yy723;
	}
yy734:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy723;
		if (yych <= '9') goto yy725;
		goto yy723;
	} else {
		if (yych <= 'F') goto yy725;
		if (yych <= '`') goto yy723;
		if (yych <= 'f') goto yy725;
		goto yy723;
	}
}
#line 765 "../src/parse/lex.re"

    }
    else {
        
#line 4880 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy737;
			if (yych == '\n') goto yy741;
			goto yy739;
		} else {
			if (yych <= '\r') goto yy743;
			if (yych == '\\') goto yy744;
			goto yy739;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy746;
			if (yych <= 0xDF) goto yy748;
			if (yych <= 0xE0) goto yy749;
			goto yy750;
		} else {
			if (yych <= 0xF0) goto yy751;
			if (yych <= 0xF3) goto yy752;
			if (yych <= 0xF4) goto yy753;
			goto yy746;
		}
	}
yy737:
	++YYCURSOR;
#line 745 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4913 "src/parse/lex.cc"
yy739:
	++YYCURSOR;
yy740:
#line 747 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4919 "src/parse/lex.cc"
yy741:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4924 "src/parse/lex.cc"
yy743:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy741;
	goto yy740;
yy744:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy745;
				if (yych == '\n') goto yy741;
				goto yy754;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy756;
					goto yy754;
				} else {
					if (yych <= '3') goto yy757;
					if (yych <= '7') goto yy759;
					goto yy754;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy760;
					goto yy754;
				} else {
					if (yych <= 'X') goto yy762;
					if (yych <= '[') goto yy754;
					goto yy763;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy754;
					goto yy765;
				} else {
					if (yych <= 'b') goto yy767;
					if (yych <= 'e') goto yy754;
					goto yy769;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy771;
				if (yych <= 'q') goto yy754;
				goto yy773;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy754;
					goto yy775;
				} else {
					if (yych <= 'u') goto yy762;
					if (yych <= 'v') goto yy777;
					goto yy754;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy779;
					goto yy754;
				} else {
					if (yych <= 0xC1) goto yy745;
					if (yych <= 0xDF) goto yy780;
					goto yy782;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy783;
					goto yy784;
				} else {
					if (yych <= 0xF3) goto yy785;
					if (yych <= 0xF4) goto yy786;
				}
			}
		}
	}
yy745:
#line 742 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 5009 "src/parse/lex.cc"
yy746:
	++YYCURSOR;
yy747:
#line 743 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 5015 "src/parse/lex.cc"
yy748:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy747;
	if (yych <= 0xBF) goto yy739;
	goto yy747;
yy749:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy747;
	if (yych <= 0xBF) goto yy787;
	goto yy747;
yy750:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy747;
	if (yych <= 0xBF) goto yy787;
	goto yy747;
yy751:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy747;
	if (yych <= 0xBF) goto yy788;
	goto yy747;
yy752:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy747;
	if (yych <= 0xBF) goto yy788;
	goto yy747;
yy753:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy747;
	if (yych <= 0x8F) goto yy788;
	goto yy747;
yy754:
	++YYCURSOR;
yy755:
#line 758 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 5060 "src/parse/lex.cc"
yy756:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy741;
	goto yy755;
yy757:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy758;
	if (yych <= '7') goto yy789;
yy758:
#line 741 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 5073 "src/parse/lex.cc"
yy759:
	++YYCURSOR;
	goto yy758;
yy760:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy761;
		if (yych <= '9') goto yy790;
	} else {
		if (yych <= 'F') goto yy790;
		if (yych <= '`') goto yy761;
		if (yych <= 'f') goto yy790;
	}
yy761:
#line 740 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5091 "src/parse/lex.cc"
yy762:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy761;
		if (yych <= '9') goto yy791;
		goto yy761;
	} else {
		if (yych <= 'F') goto yy791;
		if (yych <= '`') goto yy761;
		if (yych <= 'f') goto yy791;
		goto yy761;
	}
yy763:
	++YYCURSOR;
#line 757 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5109 "src/parse/lex.cc"
yy765:
	++YYCURSOR;
#line 750 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5114 "src/parse/lex.cc"
yy767:
	++YYCURSOR;
#line 751 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5119 "src/parse/lex.cc"
yy769:
	++YYCURSOR;
#line 752 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5124 "src/parse/lex.cc"
yy771:
	++YYCURSOR;
#line 753 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5129 "src/parse/lex.cc"
yy773:
	++YYCURSOR;
#line 754 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5134 "src/parse/lex.cc"
yy775:
	++YYCURSOR;
#line 755 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5139 "src/parse/lex.cc"
yy777:
	++YYCURSOR;
#line 756 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5144 "src/parse/lex.cc"
yy779:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy761;
		if (yych <= '9') goto yy792;
		goto yy761;
	} else {
		if (yych <= 'F') goto yy792;
		if (yych <= '`') goto yy761;
		if (yych <= 'f') goto yy792;
		goto yy761;
	}
yy780:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0xBF) goto yy754;
yy781:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy745;
		} else {
			goto yy747;
		}
	} else {
		if (yyaccept == 2) {
			goto yy758;
		} else {
			goto yy761;
		}
	}
yy782:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy781;
	if (yych <= 0xBF) goto yy780;
	goto yy781;
yy783:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0xBF) goto yy780;
	goto yy781;
yy784:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy781;
	if (yych <= 0xBF) goto yy783;
	goto yy781;
yy785:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0xBF) goto yy783;
	goto yy781;
yy786:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0x8F) goto yy783;
	goto yy781;
yy787:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0xBF) goto yy739;
	goto yy781;
yy788:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy781;
	if (yych <= 0xBF) goto yy787;
	goto yy781;
yy789:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy781;
	if (yych <= '7') goto yy793;
	goto yy781;
yy790:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy795;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy795;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy795;
		goto yy781;
	}
yy791:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy796;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy796;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy796;
		goto yy781;
	}
yy792:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy797;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy797;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy797;
		goto yy781;
	}
yy793:
	++YYCURSOR;
#line 749 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5257 "src/parse/lex.cc"
yy795:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy799;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy799;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy799;
		goto yy781;
	}
yy796:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy792;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy792;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy792;
		goto yy781;
	}
yy797:
	++YYCURSOR;
#line 748 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5286 "src/parse/lex.cc"
yy799:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych >= ':') goto yy781;
	} else {
		if (yych <= 'F') goto yy800;
		if (yych <= '`') goto yy781;
		if (yych >= 'g') goto yy781;
	}
yy800:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy781;
		if (yych <= '9') goto yy791;
		goto yy781;
	} else {
		if (yych <= 'F') goto yy791;
		if (yych <= '`') goto yy781;
		if (yych <= 'f') goto yy791;
		goto yy781;
	}
}
#line 768 "../src/parse/lex.re"
 #line 768 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5334 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy805;
		} else {
			if (yych <= '\n') goto yy807;
			if (yych <= '\f') goto yy805;
			goto yy809;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy805;
			goto yy810;
		} else {
			if (yych <= '0') goto yy805;
			if (yych <= '9') goto yy811;
			goto yy805;
		}
	}
	++YYCURSOR;
#line 810 "../src/parse/lex.re"
	{ --cur; return; }
#line 5394 "src/parse/lex.cc"
yy805:
	++YYCURSOR;
yy806:
#line 811 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5400 "src/parse/lex.cc"
yy807:
	++YYCURSOR;
#line 809 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5405 "src/parse/lex.cc"
yy809:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy807;
	goto yy806;
yy810:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy806;
	if (yych == '\n') goto yy806;
	goto yy815;
yy811:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy811;
	}
#line 790 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5432 "src/parse/lex.cc"
yy814:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy815:
	if (yybm[0+yych] & 128) {
		goto yy814;
	}
	if (yych <= '\n') goto yy816;
	if (yych <= '"') goto yy817;
	goto yy819;
yy816:
	YYCURSOR = YYMARKER;
	goto yy806;
yy817:
	++YYCURSOR;
#line 800 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5458 "src/parse/lex.cc"
yy819:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy816;
	if (yych == '\n') goto yy816;
	goto yy814;
}
#line 812 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
