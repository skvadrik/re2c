/* Generated by re2c 2.1.1 on Wed Jul 14 09:01:21 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 62 "../src/parse/lex.re"


#line 121 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y, *fmt, *sep;
    BlockNameList *block_list;
    bool multiline;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 62 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 261 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 128 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 281 "../src/parse/lex.re"
	{ goto loop; }
#line 134 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 276 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 148 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy7;
			} else {
				goto yy5;
			}
		} else {
			goto yy150;
		}
	} else {
		if (yyaccept == 3) {
			goto yy152;
		} else {
			goto yy160;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 139 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 209 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'l':	goto yy25;
	case 'm':	goto yy26;
	case 'r':	goto yy27;
	case 's':	goto yy28;
	case 't':	goto yy29;
	case 'u':	goto yy30;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy31;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy33;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy56;
	if (yych <= '9') goto yy13;
	goto yy56;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy60;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy61;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') {
		yyt1 = YYCURSOR;
		goto yy62;
	}
	if (yych == 'n') goto yy63;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy65;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy67;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy68;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy69;
	goto yy13;
yy55:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy56:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy55;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy55;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy70;
		}
		goto yy13;
	}
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy72;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy73;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy74;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy75;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy76;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy77;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy78;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy79;
	goto yy13;
yy65:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_GLOBAL;
    }
#line 433 "src/parse/lex.cc"
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy80;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy81;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy82;
	goto yy13;
yy70:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy70;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy83;
		if (yych <= '\n') goto yy85;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy87;
		if (yych == ' ') goto yy83;
		goto yy13;
	}
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy95;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy97;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy83:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy83;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy83;
		if (yych == '"') goto yy99;
		goto yy13;
	}
yy85:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 269 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 529 "src/parse/lex.cc"
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy85;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy108;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy109;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy110;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy99;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy112;
	goto yy113;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy117;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy119;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy123;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy124;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy85;
	if (yych == '\r') goto yy87;
	goto yy13;
yy113:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy99;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy127;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy128;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy129;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy130;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy119:
	++YYCURSOR;
	x = yyt1;
#line 169 "../src/parse/lex.re"
	{
        CodeKind kind = x ? CODE_MAXFILL : CODE_MAXNMATCH;
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_block_fmt(alc, &fmt, NULL, &multiline)) return INPUT_ERROR;
        out.wdelay_stmt(0, code_fmt(alc, kind, block_list, fmt, NULL));
        if (multiline) out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 677 "src/parse/lex.cc"
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy132;
	goto yy13;
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy133;
	goto yy13;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy134;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy125:
	++YYCURSOR;
#line 163 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 702 "src/parse/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy136;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy137;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy138;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy139;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy140;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') {
		yyt1 = NULL;
		goto yy62;
	}
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy142;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy144;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy146;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy148;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy149;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy139:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy153;
	goto yy13;
yy140:
	++YYCURSOR;
#line 151 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 766 "src/parse/lex.cc"
yy142:
	++YYCURSOR;
	x = YYCURSOR - 10;
#line 206 "../src/parse/lex.re"
	{
        CodeKind kind = (*x == 's') ? CODE_STAGS : CODE_MTAGS;
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_block_fmt(alc, &fmt, &sep, &multiline)) return INPUT_ERROR;
        out.wdelay_stmt(0, code_fmt(alc, kind, block_list, fmt, sep));
        goto next;
    }
#line 779 "src/parse/lex.cc"
yy144:
	++YYCURSOR;
#line 157 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 788 "src/parse/lex.cc"
yy146:
	++YYCURSOR;
#line 194 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc, block_list));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 803 "src/parse/lex.cc"
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy154;
	goto yy13;
yy149:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy155;
yy150:
#line 230 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 820 "src/parse/lex.cc"
yy151:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy152;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy156;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy156;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy156;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy158;
			}
		}
	}
yy152:
#line 255 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 854 "src/parse/lex.cc"
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy159;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy161;
	goto yy13;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy163;
	goto yy13;
yy156:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 249 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_end_of_block(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 877 "src/parse/lex.cc"
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy156;
	goto yy13;
yy159:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy164;
	if (yych == ' ') goto yy164;
yy160:
#line 243 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 894 "src/parse/lex.cc"
yy161:
	++YYCURSOR;
#line 179 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        } else if (opts->target == TARGET_CODE) {
            // User-defined state switch is generated as many times as needed.
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc, block_list));
            out.state_goto = true;
        }
        goto next;
    }
#line 912 "src/parse/lex.cc"
yy163:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy166;
	if (yych == 'n') goto yy167;
	goto yy13;
yy164:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy164;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy164;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy169;
		}
		goto yy13;
	}
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy171;
	goto yy13;
yy167:
	++YYCURSOR;
#line 215 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        goto next;
    }
#line 947 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy169;
	} else {
		if (yych <= '"') goto yy173;
		if (yych == '\\') goto yy174;
		goto yy169;
	}
yy171:
	++YYCURSOR;
#line 223 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        goto next;
    }
#line 971 "src/parse/lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = YYCURSOR;
			goto yy175;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = YYCURSOR;
		goto yy175;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = YYCURSOR;
			goto yy175;
		} else {
			if (yych == '*') {
				yyt2 = YYCURSOR;
				goto yy177;
			}
			goto yy13;
		}
	}
yy174:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy169;
yy175:
	++YYCURSOR;
	x = yyt1;
	YYCURSOR = yyt2;
	y = yyt2;
#line 237 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1015 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy175;
	goto yy13;
}
#line 282 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1029 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy181;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy181;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy181;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy183;
			}
		} else {
			if (yych == ':') goto yy185;
		}
	}
yy180:
#line 289 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1102 "src/parse/lex.cc"
yy181:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 296 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1108 "src/parse/lex.cc"
yy183:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy181;
yy184:
	YYCURSOR = YYMARKER;
	goto yy180;
yy185:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych >= '[') goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych >= '{') goto yy184;
	}
yy186:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy186;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy184;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy188;
		}
		if (yych <= '\f') goto yy184;
		yyt1 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy184;
			yyt1 = YYCURSOR;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy190;
			}
			goto yy184;
		}
	}
yy188:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 297 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1156 "src/parse/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy188;
	goto yy184;
}
#line 298 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1172 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy194;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy194;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy194;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy196;
			}
		} else {
			if (yych == ':') goto yy198;
		}
	}
yy193:
#line 307 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1245 "src/parse/lex.cc"
yy194:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 314 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1254 "src/parse/lex.cc"
yy196:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy194;
yy197:
	YYCURSOR = YYMARKER;
	goto yy193;
yy198:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy197;
		if (yych >= '[') goto yy197;
	} else {
		if (yych == '`') goto yy197;
		if (yych >= '{') goto yy197;
	}
yy199:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
#line 319 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1295 "src/parse/lex.cc"
}
#line 336 "../src/parse/lex.re"

}

bool Scanner::lex_end_of_block(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1306 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy206;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy204;
		if (yych <= '\n') goto yy209;
	} else {
		if (yych <= '\r') goto yy211;
		if (yych == '*') goto yy212;
	}
yy204:
	++YYCURSOR;
yy205:
#line 344 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1365 "src/parse/lex.cc"
yy206:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy206;
	}
#line 354 "../src/parse/lex.re"
	{ goto loop; }
#line 1375 "src/parse/lex.cc"
yy209:
	++YYCURSOR;
#line 355 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1380 "src/parse/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy209;
	goto yy205;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy205;
	++YYCURSOR;
#line 350 "../src/parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1394 "src/parse/lex.cc"
}
#line 356 "../src/parse/lex.re"

}

bool Scanner::lex_block_fmt(code_alc_t &alc, const char **fmt, const char **sep,
    bool *multiline)
{
    *fmt = NULL;
    if (sep) *sep = NULL;
    *multiline = false;
loop:

#line 1408 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy219;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy222;
		} else {
			if (yych == '\r') goto yy224;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy225;
			if (yych >= 'f') goto yy226;
		} else {
			if (yych == 's') goto yy227;
		}
	}
	++YYCURSOR;
yy218:
#line 378 "../src/parse/lex.re"
	{ goto error; }
#line 1468 "src/parse/lex.cc"
yy219:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy219;
	}
#line 379 "../src/parse/lex.re"
	{ goto loop; }
#line 1478 "src/parse/lex.cc"
yy222:
	++YYCURSOR;
#line 380 "../src/parse/lex.re"
	{ next_line(); *multiline = true; goto loop; }
#line 1483 "src/parse/lex.cc"
yy224:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy222;
	goto yy218;
yy225:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy228;
	goto yy218;
yy226:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy230;
	goto yy218;
yy227:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy232;
	goto yy218;
yy228:
	++YYCURSOR;
#line 381 "../src/parse/lex.re"
	{ return true; }
#line 1504 "src/parse/lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy233;
yy231:
	YYCURSOR = YYMARKER;
	goto yy218;
yy232:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy234;
	goto yy231;
yy233:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy235;
	goto yy231;
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy236;
	goto yy231;
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy237;
	goto yy231;
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy238;
	goto yy231;
yy237:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy239;
	goto yy231;
yy238:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy241;
	goto yy231;
yy239:
	++YYCURSOR;
#line 367 "../src/parse/lex.re"
	{
        *fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1546 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy231;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy231;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy231;
	++YYCURSOR;
#line 372 "../src/parse/lex.re"
	{
        if (!sep) goto error;
        *sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1561 "src/parse/lex.cc"
}
#line 382 "../src/parse/lex.re"

error:
    msg.error(cur_loc(), "ill-formed directive: expected an optional "
        "configuration 'format' followed by the end of block `*" "/`");
    return false;
}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1578 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy250;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy248;
				if (yych <= '\n') goto yy253;
				if (yych >= '\r') goto yy255;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy256;
				} else {
					if (yych <= '"') goto yy257;
					if (yych <= '#') goto yy259;
					goto yy260;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy262;
				} else {
					if (yych <= '\'') goto yy263;
					if (yych <= ')') goto yy260;
					goto yy265;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy260;
				} else {
					if (yych <= '.') goto yy266;
					if (yych <= '/') goto yy268;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy269;
				if (yych <= ';') goto yy260;
				if (yych <= '<') goto yy270;
				goto yy272;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy260;
				} else {
					if (yych <= '@') goto yy259;
					if (yych <= 'Z') goto yy273;
					goto yy276;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy260;
				} else {
					if (yych != '`') goto yy273;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy278;
					goto yy273;
				} else {
					if (yych <= '{') goto yy279;
					if (yych <= '|') goto yy260;
				}
			}
		}
	}
yy248:
	++YYCURSOR;
yy249:
#line 538 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1696 "src/parse/lex.cc"
yy250:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy250;
	}
#line 520 "../src/parse/lex.re"
	{ goto scan; }
#line 1706 "src/parse/lex.cc"
yy253:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '#') goto yy284;
	}
yy254:
#line 527 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1728 "src/parse/lex.cc"
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy253;
	goto yy249;
yy256:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy286;
	if (yych == 'u') goto yy287;
	goto yy249;
yy257:
	++YYCURSOR;
#line 412 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1743 "src/parse/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy249;
		if (yych <= 'Z') goto yy288;
		goto yy249;
	} else {
		if (yych == '`') goto yy249;
		if (yych <= 'z') goto yy288;
		goto yy249;
	}
yy260:
	++YYCURSOR;
yy261:
#line 421 "../src/parse/lex.re"
	{ return *tok; }
#line 1760 "src/parse/lex.cc"
yy262:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy291;
	goto yy249;
yy263:
	++YYCURSOR;
#line 411 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1769 "src/parse/lex.cc"
yy265:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy291;
	goto yy261;
yy266:
	++YYCURSOR;
#line 515 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1781 "src/parse/lex.cc"
yy268:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy293;
	if (yych == '/') goto yy295;
	goto yy261;
yy269:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy297;
	goto yy249;
yy270:
	++YYCURSOR;
#line 404 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1795 "src/parse/lex.cc"
yy272:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy299;
	goto yy261;
yy273:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy274:
	if (yybm[0+yych] & 32) {
		goto yy273;
	}
#line 470 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1832 "src/parse/lex.cc"
yy276:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy301;
#line 413 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1838 "src/parse/lex.cc"
yy278:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy303;
	goto yy274;
yy279:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy306;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy304;
		if (yych >= 'A') goto yy308;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy308;
		} else {
			if (yych <= '`') goto yy280;
			if (yych <= 'z') goto yy308;
		}
	}
yy280:
#line 396 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1863 "src/parse/lex.cc"
yy281:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych == '#') goto yy284;
	}
yy283:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy254;
			} else {
				goto yy249;
			}
		} else {
			if (yyaccept == 2) {
				goto yy261;
			} else {
				goto yy280;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy298;
			} else {
				goto yy305;
			}
		} else {
			if (yyaccept == 6) {
				goto yy325;
			} else {
				goto yy349;
			}
		}
	}
yy284:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy284;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy284;
		if (yych == 'l') goto yy310;
		goto yy283;
	}
yy286:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy311;
	goto yy283;
yy287:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy312;
	goto yy283;
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy290;
		if (yych <= '9') goto yy288;
		if (yych >= 'A') goto yy288;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy288;
		} else {
			if (yych <= '`') goto yy290;
			if (yych <= 'z') goto yy288;
		}
	}
yy290:
#line 416 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1947 "src/parse/lex.cc"
yy291:
	++YYCURSOR;
#line 409 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1952 "src/parse/lex.cc"
yy293:
	++YYCURSOR;
#line 407 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1957 "src/parse/lex.cc"
yy295:
	++YYCURSOR;
#line 406 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1962 "src/parse/lex.cc"
yy297:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy299;
yy298:
#line 397 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1970 "src/parse/lex.cc"
yy299:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy283;
			goto yy299;
		} else {
			if (yych == ' ') goto yy299;
			goto yy283;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy313;
			}
			if (yych <= '^') goto yy283;
			yyt1 = YYCURSOR;
			goto yy313;
		} else {
			if (yych <= '`') goto yy283;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy313;
			}
			goto yy283;
		}
	}
yy301:
	++YYCURSOR;
#line 414 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2005 "src/parse/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy316;
	goto yy274;
yy304:
	++YYCURSOR;
yy305:
#line 453 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2019 "src/parse/lex.cc"
yy306:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy306;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy317;
	}
	if (yych == '}') goto yy318;
	goto yy283;
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy283;
			goto yy308;
		} else {
			if (yych <= '@') goto yy283;
			if (yych <= 'Z') goto yy308;
			goto yy283;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy283;
			goto yy308;
		} else {
			if (yych == '}') goto yy320;
			goto yy283;
		}
	}
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy322;
	goto yy283;
yy311:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy323;
	goto yy283;
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy324;
	goto yy283;
yy313:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy315;
		if (yych <= '9') goto yy313;
		if (yych >= 'A') goto yy313;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy313;
		} else {
			if (yych <= '`') goto yy315;
			if (yych <= 'z') goto yy313;
		}
	}
yy315:
	p = yyt1;
#line 399 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2090 "src/parse/lex.cc"
yy316:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy326;
	goto yy274;
yy317:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy305;
	if (yych <= '9') goto yy327;
	if (yych == '}') goto yy329;
	goto yy305;
yy318:
	++YYCURSOR;
#line 423 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2113 "src/parse/lex.cc"
yy320:
	++YYCURSOR;
#line 459 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2125 "src/parse/lex.cc"
yy322:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy331;
	goto yy283;
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy332;
	goto yy283;
yy324:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy333;
yy325:
#line 509 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 2145 "src/parse/lex.cc"
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy334;
	goto yy274;
yy327:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy283;
	if (yych <= '9') goto yy327;
	if (yych == '}') goto yy336;
	goto yy283;
yy329:
	++YYCURSOR;
#line 444 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2169 "src/parse/lex.cc"
yy331:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy338;
	goto yy283;
yy332:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy339;
	goto yy283;
yy333:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy283;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy340;
		}
		goto yy283;
	} else {
		if (yych == '`') goto yy283;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy340;
		}
		goto yy283;
	}
yy334:
	++YYCURSOR;
#line 468 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2199 "src/parse/lex.cc"
yy336:
	++YYCURSOR;
	p = yyt1;
#line 432 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2215 "src/parse/lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy343;
	if (yych <= '9') goto yy283;
	goto yy343;
yy339:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy344;
	goto yy283;
yy340:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy283;
			goto yy340;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy345;
			}
			goto yy283;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy340;
			if (yych <= '^') goto yy283;
			goto yy340;
		} else {
			if (yych <= '`') goto yy283;
			if (yych <= 'z') goto yy340;
			goto yy283;
		}
	}
yy342:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy343:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy342;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy342;
		if (yych <= '0') goto yy283;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy346;
		}
		goto yy283;
	}
yy344:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy348;
	goto yy283;
yy345:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	if (yych == '\r') goto yy352;
	goto yy283;
yy346:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy283;
			goto yy353;
		} else {
			if (yych <= '\n') goto yy355;
			if (yych <= '\f') goto yy283;
			goto yy357;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy283;
			goto yy353;
		} else {
			if (yych <= '/') goto yy283;
			if (yych <= '9') goto yy346;
			goto yy283;
		}
	}
yy348:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy358;
	if (yych == ' ') goto yy358;
yy349:
#line 498 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2312 "src/parse/lex.cc"
yy350:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 504 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2323 "src/parse/lex.cc"
yy352:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	goto yy283;
yy353:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy353;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy353;
		if (yych == '"') goto yy360;
		goto yy283;
	}
yy355:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 522 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2348 "src/parse/lex.cc"
yy357:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy355;
	goto yy283;
yy358:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy358;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy358;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy362;
		}
		goto yy283;
	}
yy360:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy360;
	}
	if (yych <= '\n') goto yy283;
	if (yych <= '"') goto yy364;
	goto yy365;
yy362:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy283;
		if (yych == '\n') goto yy283;
		goto yy362;
	} else {
		if (yych <= '"') goto yy366;
		if (yych == '\\') goto yy367;
		goto yy362;
	}
yy364:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy355;
	if (yych == '\r') goto yy357;
	goto yy283;
yy365:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy283;
	if (yych == '\n') goto yy283;
	goto yy360;
yy366:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy368;
		}
		goto yy283;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy368;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy370;
		}
		goto yy283;
	}
yy367:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy283;
	if (yych == '\n') goto yy283;
	goto yy362;
yy368:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy368;
		goto yy283;
	} else {
		if (yych <= ' ') goto yy368;
		if (yych != ';') goto yy283;
	}
yy370:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy371;
	if (yych == '\r') goto yy373;
	goto yy283;
yy371:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 493 "../src/parse/lex.re"
	{
        next_line();
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2455 "src/parse/lex.cc"
yy373:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy371;
	goto yy283;
}
#line 542 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2468 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy377;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy377;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy380;
		}
	}
yy376:
#line 549 "../src/parse/lex.re"
	{ return false; }
#line 2525 "src/parse/lex.cc"
yy377:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy377;
	}
	if (yych == '=') goto yy380;
yy379:
	YYCURSOR = YYMARKER;
	goto yy376;
yy380:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy379;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 548 "../src/parse/lex.re"
	{ return true; }
#line 2544 "src/parse/lex.cc"
}
#line 550 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2553 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy386;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy386;
	}
#line 558 "../src/parse/lex.re"
	{ return false; }
#line 2602 "src/parse/lex.cc"
yy386:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy386;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy389;
	} else {
		if (yych <= '=') goto yy389;
		if (yych == '{') goto yy389;
	}
	YYCURSOR = yyt1;
#line 557 "../src/parse/lex.re"
	{ return true; }
#line 2619 "src/parse/lex.cc"
yy389:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 556 "../src/parse/lex.re"
	{ return false; }
#line 2625 "src/parse/lex.cc"
}
#line 559 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2636 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy391;
yy392:
	++YYCURSOR;
yy391:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy392;
	}
	if (yych <= 0x1F) goto yy394;
	if (yych <= '!') goto yy395;
	if (yych == '>') goto yy398;
yy394:
#line 569 "../src/parse/lex.re"
	{ goto cond; }
#line 2688 "src/parse/lex.cc"
yy395:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy395;
	if (yych == ' ') goto yy395;
#line 567 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2697 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
#line 568 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2702 "src/parse/lex.cc"
}
#line 570 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2709 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy404;
		if (yych >= 'A') goto yy406;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy406;
		} else {
			if (yych <= '`') goto yy402;
			if (yych <= 'z') goto yy406;
		}
	}
yy402:
	++YYCURSOR;
#line 576 "../src/parse/lex.re"
	{ goto error; }
#line 2763 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
#line 575 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2768 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy406;
	}
#line 574 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2778 "src/parse/lex.cc"
}
#line 577 "../src/parse/lex.re"

next:

#line 2784 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy413;
		if (yych >= ' ') goto yy413;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy414;
		} else {
			if (yych == '>') goto yy417;
		}
	}
	++YYCURSOR;
yy412:
#line 582 "../src/parse/lex.re"
	{ goto error; }
#line 2837 "src/parse/lex.cc"
yy413:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy419;
		if (yych <= 0x1F) goto yy412;
		goto yy419;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy412;
		} else {
			if (yych == '>') goto yy417;
			goto yy412;
		}
	}
yy414:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy414;
	}
#line 580 "../src/parse/lex.re"
	{ goto cond; }
#line 2861 "src/parse/lex.cc"
yy417:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ goto end; }
#line 2866 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy419;
		if (yych >= ' ') goto yy419;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy414;
		} else {
			if (yych == '>') goto yy417;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy412;
}
#line 583 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2901 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy424;
			if (yych == '\n') goto yy428;
			goto yy426;
		} else {
			if (yych <= '\r') goto yy430;
			if (yych == '"') goto yy431;
			goto yy426;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy431;
			if (yych == '/') goto yy433;
			goto yy426;
		} else {
			if (yych == '|') goto yy426;
			if (yych <= '}') goto yy434;
			goto yy426;
		}
	}
yy424:
	++YYCURSOR;
#line 609 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2931 "src/parse/lex.cc"
yy426:
	++YYCURSOR;
yy427:
#line 617 "../src/parse/lex.re"
	{ goto code; }
#line 2937 "src/parse/lex.cc"
yy428:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy429;
		if (yych <= '\n') goto yy436;
	} else {
		if (yych <= '\r') goto yy436;
		if (yych == ' ') goto yy436;
	}
yy429:
#line 600 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2957 "src/parse/lex.cc"
yy430:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy428;
	goto yy427;
yy431:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2966 "src/parse/lex.cc"
yy433:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy438;
	if (yych == '/') goto yy440;
	goto yy427;
yy434:
	++YYCURSOR;
#line 610 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2979 "src/parse/lex.cc"
yy436:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 599 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2985 "src/parse/lex.cc"
yy438:
	++YYCURSOR;
#line 614 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2990 "src/parse/lex.cc"
yy440:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2995 "src/parse/lex.cc"
}
#line 618 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3007 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy444;
			if (yych == '\n') goto yy448;
			goto yy446;
		} else {
			if (yych <= '\r') goto yy450;
			if (yych == '"') goto yy451;
			goto yy446;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy451;
			if (yych == '/') goto yy453;
			goto yy446;
		} else {
			if (yych <= '{') goto yy454;
			if (yych == '}') goto yy456;
			goto yy446;
		}
	}
yy444:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3071 "src/parse/lex.cc"
yy446:
	++YYCURSOR;
yy447:
#line 642 "../src/parse/lex.re"
	{ goto code; }
#line 3077 "src/parse/lex.cc"
yy448:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy458;
	}
	if (yych == '#') goto yy461;
yy449:
#line 637 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3087 "src/parse/lex.cc"
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy448;
	goto yy447;
yy451:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3096 "src/parse/lex.cc"
yy453:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy463;
	if (yych == '/') goto yy465;
	goto yy447;
yy454:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3106 "src/parse/lex.cc"
yy456:
	++YYCURSOR;
#line 627 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3117 "src/parse/lex.cc"
yy458:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy458;
	}
	if (yych == '#') goto yy461;
yy460:
	YYCURSOR = YYMARKER;
	goto yy449;
yy461:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy461;
		goto yy460;
	} else {
		if (yych <= ' ') goto yy461;
		if (yych == 'l') goto yy467;
		goto yy460;
	}
yy463:
	++YYCURSOR;
#line 639 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3145 "src/parse/lex.cc"
yy465:
	++YYCURSOR;
#line 640 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3150 "src/parse/lex.cc"
yy467:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy460;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy460;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy460;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy472;
	if (yych <= '9') goto yy460;
	goto yy472;
yy471:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy472:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy471;
		goto yy460;
	} else {
		if (yych <= ' ') goto yy471;
		if (yych <= '0') goto yy460;
		if (yych >= ':') goto yy460;
		yyt1 = YYCURSOR;
	}
yy473:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy473;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy460;
		if (yych <= '\t') goto yy475;
		if (yych <= '\n') goto yy477;
		goto yy460;
	} else {
		if (yych <= '\r') goto yy479;
		if (yych != ' ') goto yy460;
	}
yy475:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy475;
		goto yy460;
	} else {
		if (yych <= ' ') goto yy475;
		if (yych == '"') goto yy480;
		goto yy460;
	}
yy477:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 636 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3209 "src/parse/lex.cc"
yy479:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy477;
	goto yy460;
yy480:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy480;
	}
	if (yych <= '\n') goto yy460;
	if (yych >= '#') goto yy483;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy477;
	if (yych == '\r') goto yy479;
	goto yy460;
yy483:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy460;
	if (yych == '\n') goto yy460;
	goto yy480;
}
#line 643 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3243 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy486;
			if (yych <= '\t') goto yy488;
			goto yy490;
		} else {
			if (yych == '\r') goto yy492;
			goto yy488;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy493;
			if (yych <= '&') goto yy488;
			goto yy493;
		} else {
			if (yych == '\\') goto yy495;
			goto yy488;
		}
	}
yy486:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3271 "src/parse/lex.cc"
yy488:
	++YYCURSOR;
yy489:
#line 654 "../src/parse/lex.re"
	{ goto loop; }
#line 3277 "src/parse/lex.cc"
yy490:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3282 "src/parse/lex.cc"
yy492:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy490;
	goto yy489;
yy493:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3291 "src/parse/lex.cc"
yy495:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy489;
	} else {
		if (yych <= '\'') goto yy496;
		if (yych != '\\') goto yy489;
	}
yy496:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ goto loop; }
#line 3304 "src/parse/lex.cc"
}
#line 655 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3314 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy500;
		if (yych == '\n') goto yy504;
		goto yy502;
	} else {
		if (yych <= '\r') goto yy506;
		if (yych == '*') goto yy507;
		goto yy502;
	}
yy500:
	++YYCURSOR;
#line 664 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3332 "src/parse/lex.cc"
yy502:
	++YYCURSOR;
yy503:
#line 665 "../src/parse/lex.re"
	{ goto loop; }
#line 3338 "src/parse/lex.cc"
yy504:
	++YYCURSOR;
#line 663 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3343 "src/parse/lex.cc"
yy506:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy504;
	goto yy503;
yy507:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy503;
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return; }
#line 3354 "src/parse/lex.cc"
}
#line 666 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3364 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy512;
		if (yych <= '\t') goto yy514;
		goto yy516;
	} else {
		if (yych == '\r') goto yy518;
		goto yy514;
	}
yy512:
	++YYCURSOR;
#line 674 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3381 "src/parse/lex.cc"
yy514:
	++YYCURSOR;
yy515:
#line 675 "../src/parse/lex.re"
	{ goto loop; }
#line 3387 "src/parse/lex.cc"
yy516:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3392 "src/parse/lex.cc"
yy518:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy516;
	goto yy515;
}
#line 676 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3411 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy522;
#line 689 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3419 "src/parse/lex.cc"
yy522:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3424 "src/parse/lex.cc"
}
#line 690 "../src/parse/lex.re"

snd:

#line 3430 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy527;
yy526:
#line 693 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3439 "src/parse/lex.cc"
yy527:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy529;
	YYCURSOR = YYMARKER;
	goto yy526;
yy529:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 694 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3457 "src/parse/lex.cc"
}
#line 702 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 739 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3475 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy533;
		if (yych == '\n') goto yy537;
		goto yy535;
	} else {
		if (yych <= '\r') goto yy539;
		if (yych == '\\') goto yy540;
		goto yy535;
	}
yy533:
	++YYCURSOR;
#line 720 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3494 "src/parse/lex.cc"
yy535:
	++YYCURSOR;
yy536:
#line 722 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3500 "src/parse/lex.cc"
yy537:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3505 "src/parse/lex.cc"
yy539:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy537;
	goto yy536;
yy540:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy541;
				if (yych == '\n') goto yy537;
				goto yy542;
			} else {
				if (yych <= '\r') goto yy544;
				if (yych == '-') goto yy545;
				goto yy542;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy547;
				if (yych <= '7') goto yy549;
				if (yych <= 'T') goto yy542;
				goto yy550;
			} else {
				if (yych == 'X') goto yy552;
				if (yych <= '[') goto yy542;
				goto yy553;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy555;
				if (yych <= '`') goto yy542;
				if (yych <= 'a') goto yy557;
				goto yy559;
			} else {
				if (yych == 'f') goto yy561;
				if (yych <= 'm') goto yy542;
				goto yy563;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy565;
				if (yych <= 's') goto yy542;
				goto yy567;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy552;
					goto yy569;
				} else {
					if (yych == 'x') goto yy571;
					goto yy542;
				}
			}
		}
	}
yy541:
#line 717 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3566 "src/parse/lex.cc"
yy542:
	++YYCURSOR;
yy543:
#line 735 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3575 "src/parse/lex.cc"
yy544:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy537;
	goto yy543;
yy545:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3584 "src/parse/lex.cc"
yy547:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy548;
	if (yych <= '7') goto yy572;
yy548:
#line 716 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3593 "src/parse/lex.cc"
yy549:
	++YYCURSOR;
	goto yy548;
yy550:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy551;
		if (yych <= '9') goto yy574;
	} else {
		if (yych <= 'F') goto yy574;
		if (yych <= '`') goto yy551;
		if (yych <= 'f') goto yy574;
	}
yy551:
#line 715 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3611 "src/parse/lex.cc"
yy552:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy551;
		if (yych <= '9') goto yy575;
		goto yy551;
	} else {
		if (yych <= 'F') goto yy575;
		if (yych <= '`') goto yy551;
		if (yych <= 'f') goto yy575;
		goto yy551;
	}
yy553:
	++YYCURSOR;
#line 732 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3629 "src/parse/lex.cc"
yy555:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3634 "src/parse/lex.cc"
yy557:
	++YYCURSOR;
#line 725 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3639 "src/parse/lex.cc"
yy559:
	++YYCURSOR;
#line 726 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3644 "src/parse/lex.cc"
yy561:
	++YYCURSOR;
#line 727 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3649 "src/parse/lex.cc"
yy563:
	++YYCURSOR;
#line 728 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3654 "src/parse/lex.cc"
yy565:
	++YYCURSOR;
#line 729 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3659 "src/parse/lex.cc"
yy567:
	++YYCURSOR;
#line 730 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3664 "src/parse/lex.cc"
yy569:
	++YYCURSOR;
#line 731 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3669 "src/parse/lex.cc"
yy571:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy551;
		if (yych <= '9') goto yy576;
		goto yy551;
	} else {
		if (yych <= 'F') goto yy576;
		if (yych <= '`') goto yy551;
		if (yych <= 'f') goto yy576;
		goto yy551;
	}
yy572:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy573;
	if (yych <= '7') goto yy577;
yy573:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy548;
	} else {
		goto yy551;
	}
yy574:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy579;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy579;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy579;
		goto yy573;
	}
yy575:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy580;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy580;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy580;
		goto yy573;
	}
yy576:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy581;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy581;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy581;
		goto yy573;
	}
yy577:
	++YYCURSOR;
#line 724 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3734 "src/parse/lex.cc"
yy579:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy583;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy583;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy583;
		goto yy573;
	}
yy580:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy576;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy576;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy576;
		goto yy573;
	}
yy581:
	++YYCURSOR;
#line 723 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3763 "src/parse/lex.cc"
yy583:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych >= ':') goto yy573;
	} else {
		if (yych <= 'F') goto yy584;
		if (yych <= '`') goto yy573;
		if (yych >= 'g') goto yy573;
	}
yy584:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy573;
		if (yych <= '9') goto yy575;
		goto yy573;
	} else {
		if (yych <= 'F') goto yy575;
		if (yych <= '`') goto yy573;
		if (yych <= 'f') goto yy575;
		goto yy573;
	}
}
#line 741 "../src/parse/lex.re"

    }
    else {
        
#line 3792 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy587;
			if (yych == '\n') goto yy591;
			goto yy589;
		} else {
			if (yych <= '\r') goto yy593;
			if (yych == '\\') goto yy594;
			goto yy589;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy596;
			if (yych <= 0xDF) goto yy598;
			if (yych <= 0xE0) goto yy599;
			goto yy600;
		} else {
			if (yych <= 0xF0) goto yy601;
			if (yych <= 0xF3) goto yy602;
			if (yych <= 0xF4) goto yy603;
			goto yy596;
		}
	}
yy587:
	++YYCURSOR;
#line 720 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3825 "src/parse/lex.cc"
yy589:
	++YYCURSOR;
yy590:
#line 722 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3831 "src/parse/lex.cc"
yy591:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3836 "src/parse/lex.cc"
yy593:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy591;
	goto yy590;
yy594:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy604;
				} else {
					if (yych <= '\n') goto yy591;
					if (yych <= '\f') goto yy604;
					goto yy606;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy604;
					goto yy607;
				} else {
					if (yych <= '/') goto yy604;
					if (yych <= '3') goto yy609;
					goto yy611;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy604;
					goto yy612;
				} else {
					if (yych == 'X') goto yy614;
					goto yy604;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy615;
					goto yy617;
				} else {
					if (yych <= '`') goto yy604;
					if (yych <= 'a') goto yy619;
					goto yy621;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy604;
					goto yy623;
				} else {
					if (yych == 'n') goto yy625;
					goto yy604;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy627;
					goto yy604;
				} else {
					if (yych <= 't') goto yy629;
					if (yych <= 'u') goto yy614;
					goto yy631;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy604;
					goto yy633;
				} else {
					if (yych <= 0x7F) goto yy604;
					if (yych >= 0xC2) goto yy634;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy636;
					if (yych <= 0xEF) goto yy637;
					goto yy638;
				} else {
					if (yych <= 0xF3) goto yy639;
					if (yych <= 0xF4) goto yy640;
				}
			}
		}
	}
yy595:
#line 717 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3928 "src/parse/lex.cc"
yy596:
	++YYCURSOR;
yy597:
#line 718 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3934 "src/parse/lex.cc"
yy598:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy597;
	if (yych <= 0xBF) goto yy589;
	goto yy597;
yy599:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy597;
	if (yych <= 0xBF) goto yy641;
	goto yy597;
yy600:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy597;
	if (yych <= 0xBF) goto yy641;
	goto yy597;
yy601:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy597;
	if (yych <= 0xBF) goto yy642;
	goto yy597;
yy602:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy597;
	if (yych <= 0xBF) goto yy642;
	goto yy597;
yy603:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy597;
	if (yych <= 0x8F) goto yy642;
	goto yy597;
yy604:
	++YYCURSOR;
yy605:
#line 735 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3978 "src/parse/lex.cc"
yy606:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy591;
	goto yy605;
yy607:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3987 "src/parse/lex.cc"
yy609:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy610;
	if (yych <= '7') goto yy643;
yy610:
#line 716 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3996 "src/parse/lex.cc"
yy611:
	++YYCURSOR;
	goto yy610;
yy612:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy613;
		if (yych <= '9') goto yy644;
	} else {
		if (yych <= 'F') goto yy644;
		if (yych <= '`') goto yy613;
		if (yych <= 'f') goto yy644;
	}
yy613:
#line 715 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4014 "src/parse/lex.cc"
yy614:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy613;
		if (yych <= '9') goto yy645;
		goto yy613;
	} else {
		if (yych <= 'F') goto yy645;
		if (yych <= '`') goto yy613;
		if (yych <= 'f') goto yy645;
		goto yy613;
	}
yy615:
	++YYCURSOR;
#line 732 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4032 "src/parse/lex.cc"
yy617:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4037 "src/parse/lex.cc"
yy619:
	++YYCURSOR;
#line 725 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4042 "src/parse/lex.cc"
yy621:
	++YYCURSOR;
#line 726 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4047 "src/parse/lex.cc"
yy623:
	++YYCURSOR;
#line 727 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4052 "src/parse/lex.cc"
yy625:
	++YYCURSOR;
#line 728 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4057 "src/parse/lex.cc"
yy627:
	++YYCURSOR;
#line 729 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4062 "src/parse/lex.cc"
yy629:
	++YYCURSOR;
#line 730 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4067 "src/parse/lex.cc"
yy631:
	++YYCURSOR;
#line 731 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4072 "src/parse/lex.cc"
yy633:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy613;
		if (yych <= '9') goto yy646;
		goto yy613;
	} else {
		if (yych <= 'F') goto yy646;
		if (yych <= '`') goto yy613;
		if (yych <= 'f') goto yy646;
		goto yy613;
	}
yy634:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy604;
yy635:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy595;
		} else {
			goto yy597;
		}
	} else {
		if (yyaccept == 2) {
			goto yy610;
		} else {
			goto yy613;
		}
	}
yy636:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy635;
	if (yych <= 0xBF) goto yy634;
	goto yy635;
yy637:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy634;
	goto yy635;
yy638:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy635;
	if (yych <= 0xBF) goto yy637;
	goto yy635;
yy639:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy637;
	goto yy635;
yy640:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0x8F) goto yy637;
	goto yy635;
yy641:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy589;
	goto yy635;
yy642:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy635;
	if (yych <= 0xBF) goto yy641;
	goto yy635;
yy643:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy635;
	if (yych <= '7') goto yy647;
	goto yy635;
yy644:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy649;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy649;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy649;
		goto yy635;
	}
yy645:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy650;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy650;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy650;
		goto yy635;
	}
yy646:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy651;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy651;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy651;
		goto yy635;
	}
yy647:
	++YYCURSOR;
#line 724 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4185 "src/parse/lex.cc"
yy649:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy653;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy653;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy653;
		goto yy635;
	}
yy650:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy646;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy646;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy646;
		goto yy635;
	}
yy651:
	++YYCURSOR;
#line 723 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4214 "src/parse/lex.cc"
yy653:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych >= ':') goto yy635;
	} else {
		if (yych <= 'F') goto yy654;
		if (yych <= '`') goto yy635;
		if (yych >= 'g') goto yy635;
	}
yy654:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy635;
		if (yych <= '9') goto yy645;
		goto yy635;
	} else {
		if (yych <= 'F') goto yy645;
		if (yych <= '`') goto yy635;
		if (yych <= 'f') goto yy645;
		goto yy635;
	}
}
#line 744 "../src/parse/lex.re"
 #line 744 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 778 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4253 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy657;
		if (yych == '\n') goto yy661;
		goto yy659;
	} else {
		if (yych <= '\r') goto yy663;
		if (yych == '\\') goto yy664;
		goto yy659;
	}
yy657:
	++YYCURSOR;
#line 760 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4272 "src/parse/lex.cc"
yy659:
	++YYCURSOR;
yy660:
#line 762 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4278 "src/parse/lex.cc"
yy661:
	++YYCURSOR;
#line 754 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4283 "src/parse/lex.cc"
yy663:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy661;
	goto yy660;
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy665;
				if (yych <= '\t') goto yy666;
				goto yy661;
			} else {
				if (yych == '\r') goto yy668;
				if (yych <= '/') goto yy666;
				goto yy669;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy671;
				if (yych == 'U') goto yy672;
				goto yy666;
			} else {
				if (yych <= 'X') goto yy674;
				if (yych == '\\') goto yy675;
				goto yy666;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy677;
				if (yych <= 'b') goto yy679;
				goto yy666;
			} else {
				if (yych <= 'f') goto yy681;
				if (yych == 'n') goto yy683;
				goto yy666;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy685;
				if (yych <= 's') goto yy666;
				if (yych <= 't') goto yy687;
				goto yy674;
			} else {
				if (yych <= 'v') goto yy689;
				if (yych == 'x') goto yy691;
				goto yy666;
			}
		}
	}
yy665:
#line 757 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4339 "src/parse/lex.cc"
yy666:
	++YYCURSOR;
yy667:
#line 773 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4349 "src/parse/lex.cc"
yy668:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy661;
	goto yy667;
yy669:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy670;
	if (yych <= '7') goto yy692;
yy670:
#line 756 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4362 "src/parse/lex.cc"
yy671:
	++YYCURSOR;
	goto yy670;
yy672:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy673;
		if (yych <= '9') goto yy694;
	} else {
		if (yych <= 'F') goto yy694;
		if (yych <= '`') goto yy673;
		if (yych <= 'f') goto yy694;
	}
yy673:
#line 755 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4380 "src/parse/lex.cc"
yy674:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy673;
		if (yych <= '9') goto yy695;
		goto yy673;
	} else {
		if (yych <= 'F') goto yy695;
		if (yych <= '`') goto yy673;
		if (yych <= 'f') goto yy695;
		goto yy673;
	}
yy675:
	++YYCURSOR;
#line 772 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4398 "src/parse/lex.cc"
yy677:
	++YYCURSOR;
#line 765 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4403 "src/parse/lex.cc"
yy679:
	++YYCURSOR;
#line 766 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4408 "src/parse/lex.cc"
yy681:
	++YYCURSOR;
#line 767 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4413 "src/parse/lex.cc"
yy683:
	++YYCURSOR;
#line 768 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4418 "src/parse/lex.cc"
yy685:
	++YYCURSOR;
#line 769 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4423 "src/parse/lex.cc"
yy687:
	++YYCURSOR;
#line 770 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4428 "src/parse/lex.cc"
yy689:
	++YYCURSOR;
#line 771 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4433 "src/parse/lex.cc"
yy691:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy673;
		if (yych <= '9') goto yy696;
		goto yy673;
	} else {
		if (yych <= 'F') goto yy696;
		if (yych <= '`') goto yy673;
		if (yych <= 'f') goto yy696;
		goto yy673;
	}
yy692:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy693;
	if (yych <= '7') goto yy697;
yy693:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy670;
	} else {
		goto yy673;
	}
yy694:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy699;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy699;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy699;
		goto yy693;
	}
yy695:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy700;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy700;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy700;
		goto yy693;
	}
yy696:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy701;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy701;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy701;
		goto yy693;
	}
yy697:
	++YYCURSOR;
#line 764 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4498 "src/parse/lex.cc"
yy699:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy703;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy703;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy703;
		goto yy693;
	}
yy700:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy696;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy696;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy696;
		goto yy693;
	}
yy701:
	++YYCURSOR;
#line 763 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4527 "src/parse/lex.cc"
yy703:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych >= ':') goto yy693;
	} else {
		if (yych <= 'F') goto yy704;
		if (yych <= '`') goto yy693;
		if (yych >= 'g') goto yy693;
	}
yy704:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy693;
		if (yych <= '9') goto yy695;
		goto yy693;
	} else {
		if (yych <= 'F') goto yy695;
		if (yych <= '`') goto yy693;
		if (yych <= 'f') goto yy695;
		goto yy693;
	}
}
#line 780 "../src/parse/lex.re"

    }
    else {
        
#line 4556 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy707;
			if (yych == '\n') goto yy711;
			goto yy709;
		} else {
			if (yych <= '\r') goto yy713;
			if (yych == '\\') goto yy714;
			goto yy709;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy716;
			if (yych <= 0xDF) goto yy718;
			if (yych <= 0xE0) goto yy719;
			goto yy720;
		} else {
			if (yych <= 0xF0) goto yy721;
			if (yych <= 0xF3) goto yy722;
			if (yych <= 0xF4) goto yy723;
			goto yy716;
		}
	}
yy707:
	++YYCURSOR;
#line 760 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4589 "src/parse/lex.cc"
yy709:
	++YYCURSOR;
yy710:
#line 762 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4595 "src/parse/lex.cc"
yy711:
	++YYCURSOR;
#line 754 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4600 "src/parse/lex.cc"
yy713:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy711;
	goto yy710;
yy714:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy715;
				if (yych == '\n') goto yy711;
				goto yy724;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy726;
					goto yy724;
				} else {
					if (yych <= '3') goto yy727;
					if (yych <= '7') goto yy729;
					goto yy724;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy730;
					goto yy724;
				} else {
					if (yych <= 'X') goto yy732;
					if (yych <= '[') goto yy724;
					goto yy733;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy724;
					goto yy735;
				} else {
					if (yych <= 'b') goto yy737;
					if (yych <= 'e') goto yy724;
					goto yy739;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy741;
				if (yych <= 'q') goto yy724;
				goto yy743;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy724;
					goto yy745;
				} else {
					if (yych <= 'u') goto yy732;
					if (yych <= 'v') goto yy747;
					goto yy724;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy749;
					goto yy724;
				} else {
					if (yych <= 0xC1) goto yy715;
					if (yych <= 0xDF) goto yy750;
					goto yy752;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy753;
					goto yy754;
				} else {
					if (yych <= 0xF3) goto yy755;
					if (yych <= 0xF4) goto yy756;
				}
			}
		}
	}
yy715:
#line 757 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4685 "src/parse/lex.cc"
yy716:
	++YYCURSOR;
yy717:
#line 758 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4691 "src/parse/lex.cc"
yy718:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy717;
	if (yych <= 0xBF) goto yy709;
	goto yy717;
yy719:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy717;
	if (yych <= 0xBF) goto yy757;
	goto yy717;
yy720:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy717;
	if (yych <= 0xBF) goto yy757;
	goto yy717;
yy721:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy717;
	if (yych <= 0xBF) goto yy758;
	goto yy717;
yy722:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy717;
	if (yych <= 0xBF) goto yy758;
	goto yy717;
yy723:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy717;
	if (yych <= 0x8F) goto yy758;
	goto yy717;
yy724:
	++YYCURSOR;
yy725:
#line 773 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4736 "src/parse/lex.cc"
yy726:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy711;
	goto yy725;
yy727:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy728;
	if (yych <= '7') goto yy759;
yy728:
#line 756 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4749 "src/parse/lex.cc"
yy729:
	++YYCURSOR;
	goto yy728;
yy730:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy731;
		if (yych <= '9') goto yy760;
	} else {
		if (yych <= 'F') goto yy760;
		if (yych <= '`') goto yy731;
		if (yych <= 'f') goto yy760;
	}
yy731:
#line 755 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4767 "src/parse/lex.cc"
yy732:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy731;
		if (yych <= '9') goto yy761;
		goto yy731;
	} else {
		if (yych <= 'F') goto yy761;
		if (yych <= '`') goto yy731;
		if (yych <= 'f') goto yy761;
		goto yy731;
	}
yy733:
	++YYCURSOR;
#line 772 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4785 "src/parse/lex.cc"
yy735:
	++YYCURSOR;
#line 765 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4790 "src/parse/lex.cc"
yy737:
	++YYCURSOR;
#line 766 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4795 "src/parse/lex.cc"
yy739:
	++YYCURSOR;
#line 767 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4800 "src/parse/lex.cc"
yy741:
	++YYCURSOR;
#line 768 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4805 "src/parse/lex.cc"
yy743:
	++YYCURSOR;
#line 769 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4810 "src/parse/lex.cc"
yy745:
	++YYCURSOR;
#line 770 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4815 "src/parse/lex.cc"
yy747:
	++YYCURSOR;
#line 771 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4820 "src/parse/lex.cc"
yy749:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy731;
		if (yych <= '9') goto yy762;
		goto yy731;
	} else {
		if (yych <= 'F') goto yy762;
		if (yych <= '`') goto yy731;
		if (yych <= 'f') goto yy762;
		goto yy731;
	}
yy750:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0xBF) goto yy724;
yy751:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy715;
		} else {
			goto yy717;
		}
	} else {
		if (yyaccept == 2) {
			goto yy728;
		} else {
			goto yy731;
		}
	}
yy752:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy751;
	if (yych <= 0xBF) goto yy750;
	goto yy751;
yy753:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0xBF) goto yy750;
	goto yy751;
yy754:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy751;
	if (yych <= 0xBF) goto yy753;
	goto yy751;
yy755:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0xBF) goto yy753;
	goto yy751;
yy756:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0x8F) goto yy753;
	goto yy751;
yy757:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0xBF) goto yy709;
	goto yy751;
yy758:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy751;
	if (yych <= 0xBF) goto yy757;
	goto yy751;
yy759:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy751;
	if (yych <= '7') goto yy763;
	goto yy751;
yy760:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy765;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy765;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy765;
		goto yy751;
	}
yy761:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy766;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy766;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy766;
		goto yy751;
	}
yy762:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy767;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy767;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy767;
		goto yy751;
	}
yy763:
	++YYCURSOR;
#line 764 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4933 "src/parse/lex.cc"
yy765:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy769;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy769;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy769;
		goto yy751;
	}
yy766:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy762;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy762;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy762;
		goto yy751;
	}
yy767:
	++YYCURSOR;
#line 763 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4962 "src/parse/lex.cc"
yy769:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych >= ':') goto yy751;
	} else {
		if (yych <= 'F') goto yy770;
		if (yych <= '`') goto yy751;
		if (yych >= 'g') goto yy751;
	}
yy770:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy751;
		if (yych <= '9') goto yy761;
		goto yy751;
	} else {
		if (yych <= 'F') goto yy761;
		if (yych <= '`') goto yy751;
		if (yych <= 'f') goto yy761;
		goto yy751;
	}
}
#line 783 "../src/parse/lex.re"
 #line 783 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5010 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy775;
		} else {
			if (yych <= '\n') goto yy777;
			if (yych <= '\f') goto yy775;
			goto yy779;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy775;
			goto yy780;
		} else {
			if (yych <= '0') goto yy775;
			if (yych <= '9') goto yy781;
			goto yy775;
		}
	}
	++YYCURSOR;
#line 825 "../src/parse/lex.re"
	{ --cur; return; }
#line 5070 "src/parse/lex.cc"
yy775:
	++YYCURSOR;
yy776:
#line 826 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5076 "src/parse/lex.cc"
yy777:
	++YYCURSOR;
#line 824 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5081 "src/parse/lex.cc"
yy779:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy777;
	goto yy776;
yy780:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy776;
	if (yych == '\n') goto yy776;
	goto yy785;
yy781:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy781;
	}
#line 805 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5108 "src/parse/lex.cc"
yy784:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy785:
	if (yybm[0+yych] & 128) {
		goto yy784;
	}
	if (yych <= '\n') goto yy786;
	if (yych <= '"') goto yy787;
	goto yy789;
yy786:
	YYCURSOR = YYMARKER;
	goto yy776;
yy787:
	++YYCURSOR;
#line 815 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5134 "src/parse/lex.cc"
yy789:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy786;
	if (yych == '\n') goto yy786;
	goto yy784;
}
#line 827 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
