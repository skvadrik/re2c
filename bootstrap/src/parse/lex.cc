/* Generated by re2c 2.1.1 on Thu May 20 23:28:40 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 61 "../src/parse/lex.re"


#line 120 "../src/parse/lex.re"


Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 59 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 225 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 125 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 245 "../src/parse/lex.re"
	{ goto loop; }
#line 131 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 240 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 145 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 135 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 193 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 233 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 496 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 156 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 636 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	++YYCURSOR;
#line 145 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 664 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy133;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy134;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy137;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy138;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy140;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy142;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy144;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy146;
	goto yy13;
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy147;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy150;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy151;
	goto yy13;
yy138:
	++YYCURSOR;
#line 197 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 729 "src/parse/lex.cc"
yy140:
	++YYCURSOR;
#line 140 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 737 "src/parse/lex.cc"
yy142:
	++YYCURSOR;
#line 191 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 746 "src/parse/lex.cc"
yy144:
	++YYCURSOR;
#line 180 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 760 "src/parse/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy152;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy153;
	goto yy13;
yy148:
	++YYCURSOR;
#line 150 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 777 "src/parse/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy154;
	goto yy13;
yy151:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy155;
	goto yy13;
yy152:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy156;
	goto yy13;
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy160;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy161;
	goto yy13;
yy156:
	++YYCURSOR;
#line 170 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 814 "src/parse/lex.cc"
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy162;
	if (yych == 'n') goto yy163;
	goto yy13;
yy159:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy160:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy159;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy159;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy165;
		}
		goto yy13;
	}
yy161:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy167;
	goto yy13;
yy162:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy169;
	goto yy13;
yy163:
	++YYCURSOR;
#line 203 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 854 "src/parse/lex.cc"
yy165:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy165;
	} else {
		if (yych <= '"') goto yy171;
		if (yych == '\\') goto yy172;
		goto yy165;
	}
yy167:
	++YYCURSOR;
#line 163 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 877 "src/parse/lex.cc"
yy169:
	++YYCURSOR;
#line 211 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 888 "src/parse/lex.cc"
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		goto yy13;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy173;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy175;
		}
		goto yy13;
	}
yy172:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy165;
yy173:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy173;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy173;
		if (yych != '*') goto yy13;
	}
yy175:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy13;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 219 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 938 "src/parse/lex.cc"
}
#line 246 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 949 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy180;
		if (yych == '\n') goto yy184;
		goto yy182;
	} else {
		if (yych <= '\r') goto yy186;
		if (yych == '*') goto yy187;
		goto yy182;
	}
yy180:
	++YYCURSOR;
#line 255 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 970 "src/parse/lex.cc"
yy182:
	++YYCURSOR;
yy183:
#line 254 "../src/parse/lex.re"
	{ goto loop; }
#line 976 "src/parse/lex.cc"
yy184:
	++YYCURSOR;
#line 259 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 985 "src/parse/lex.cc"
yy186:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy184;
	goto yy183;
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy183;
	++YYCURSOR;
#line 264 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1001 "src/parse/lex.cc"
}
#line 270 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1013 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy197;
		} else {
			if (yych == '\r') goto yy199;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy200;
			if (yych >= 'f') goto yy201;
		} else {
			if (yych == 's') goto yy202;
		}
	}
	++YYCURSOR;
yy193:
#line 279 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1076 "src/parse/lex.cc"
yy194:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy194;
	}
#line 291 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1088 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
#line 294 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1096 "src/parse/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy197;
	goto yy193;
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy203;
	goto yy193;
yy201:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy205;
	goto yy193;
yy202:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy207;
	goto yy193;
yy203:
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1122 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy208;
yy206:
	YYCURSOR = YYMARKER;
	goto yy193;
yy207:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy209;
	goto yy206;
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy210;
	goto yy206;
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy211;
	goto yy206;
yy210:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy212;
	goto yy206;
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy213;
	goto yy206;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy214;
	goto yy206;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy216;
	goto yy206;
yy214:
	++YYCURSOR;
#line 283 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1164 "src/parse/lex.cc"
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy206;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy206;
	++YYCURSOR;
#line 287 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1178 "src/parse/lex.cc"
}
#line 304 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1191 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy223;
				if (yych <= '\n') goto yy228;
				if (yych >= '\r') goto yy230;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy231;
				} else {
					if (yych <= '"') goto yy232;
					if (yych <= '#') goto yy234;
					goto yy235;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy237;
				} else {
					if (yych <= '\'') goto yy238;
					if (yych <= ')') goto yy235;
					goto yy240;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy235;
				} else {
					if (yych <= '.') goto yy241;
					if (yych <= '/') goto yy243;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy244;
				if (yych <= ';') goto yy235;
				if (yych <= '<') goto yy245;
				goto yy247;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy235;
				} else {
					if (yych <= '@') goto yy234;
					if (yych <= 'Z') goto yy248;
					goto yy251;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy235;
				} else {
					if (yych != '`') goto yy248;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy253;
					goto yy248;
				} else {
					if (yych <= '{') goto yy254;
					if (yych <= '|') goto yy235;
				}
			}
		}
	}
yy223:
	++YYCURSOR;
yy224:
#line 445 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1309 "src/parse/lex.cc"
yy225:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy225;
	}
#line 427 "../src/parse/lex.re"
	{ goto scan; }
#line 1319 "src/parse/lex.cc"
yy228:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy256;
	} else {
		if (yych <= ' ') goto yy256;
		if (yych == '#') goto yy259;
	}
yy229:
#line 434 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1341 "src/parse/lex.cc"
yy230:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy228;
	goto yy224;
yy231:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy261;
	goto yy224;
yy232:
	++YYCURSOR;
#line 330 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1355 "src/parse/lex.cc"
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy224;
		if (yych <= 'Z') goto yy262;
		goto yy224;
	} else {
		if (yych == '`') goto yy224;
		if (yych <= 'z') goto yy262;
		goto yy224;
	}
yy235:
	++YYCURSOR;
yy236:
#line 339 "../src/parse/lex.re"
	{ return *tok; }
#line 1372 "src/parse/lex.cc"
yy237:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy265;
	goto yy224;
yy238:
	++YYCURSOR;
#line 329 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1381 "src/parse/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy265;
	goto yy236;
yy241:
	++YYCURSOR;
#line 422 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1393 "src/parse/lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy267;
	if (yych == '/') goto yy269;
	goto yy236;
yy244:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy271;
	goto yy224;
yy245:
	++YYCURSOR;
#line 322 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1407 "src/parse/lex.cc"
yy247:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy273;
	goto yy236;
yy248:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy249:
	if (yybm[0+yych] & 32) {
		goto yy248;
	}
#line 388 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1444 "src/parse/lex.cc"
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy275;
#line 331 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1450 "src/parse/lex.cc"
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy277;
	goto yy249;
yy254:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy280;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy278;
		if (yych >= 'A') goto yy282;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy282;
		} else {
			if (yych <= '`') goto yy255;
			if (yych <= 'z') goto yy282;
		}
	}
yy255:
#line 314 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1475 "src/parse/lex.cc"
yy256:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy256;
	} else {
		if (yych <= ' ') goto yy256;
		if (yych == '#') goto yy259;
	}
yy258:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy229;
			} else {
				goto yy224;
			}
		} else {
			if (yyaccept == 2) {
				goto yy236;
			} else {
				goto yy255;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy272;
			} else {
				goto yy279;
			}
		} else {
			goto yy316;
		}
	}
yy259:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy259;
		goto yy258;
	} else {
		if (yych <= ' ') goto yy259;
		if (yych == 'l') goto yy284;
		goto yy258;
	}
yy261:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy285;
	goto yy258;
yy262:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy264;
		if (yych <= '9') goto yy262;
		if (yych >= 'A') goto yy262;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy262;
		} else {
			if (yych <= '`') goto yy264;
			if (yych <= 'z') goto yy262;
		}
	}
yy264:
#line 334 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1551 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
#line 327 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1556 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
#line 325 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1561 "src/parse/lex.cc"
yy269:
	++YYCURSOR;
#line 324 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1566 "src/parse/lex.cc"
yy271:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy273;
yy272:
#line 315 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1574 "src/parse/lex.cc"
yy273:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy258;
			goto yy273;
		} else {
			if (yych == ' ') goto yy273;
			goto yy258;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy286;
			}
			if (yych <= '^') goto yy258;
			yyt1 = YYCURSOR;
			goto yy286;
		} else {
			if (yych <= '`') goto yy258;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy286;
			}
			goto yy258;
		}
	}
yy275:
	++YYCURSOR;
#line 332 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1609 "src/parse/lex.cc"
yy277:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy289;
	goto yy249;
yy278:
	++YYCURSOR;
yy279:
#line 371 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 1623 "src/parse/lex.cc"
yy280:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy280;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy290;
	}
	if (yych == '}') goto yy291;
	goto yy258;
yy282:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy258;
			goto yy282;
		} else {
			if (yych <= '@') goto yy258;
			if (yych <= 'Z') goto yy282;
			goto yy258;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy258;
			goto yy282;
		} else {
			if (yych == '}') goto yy293;
			goto yy258;
		}
	}
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy295;
	goto yy258;
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy296;
	goto yy258;
yy286:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy288;
		if (yych <= '9') goto yy286;
		if (yych >= 'A') goto yy286;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy286;
		} else {
			if (yych <= '`') goto yy288;
			if (yych <= 'z') goto yy286;
		}
	}
yy288:
	p = yyt1;
#line 317 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1690 "src/parse/lex.cc"
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy297;
	goto yy249;
yy290:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy279;
	if (yych <= '9') goto yy298;
	if (yych == '}') goto yy300;
	goto yy279;
yy291:
	++YYCURSOR;
#line 341 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1713 "src/parse/lex.cc"
yy293:
	++YYCURSOR;
#line 377 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1725 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy302;
	goto yy258;
yy296:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy303;
	goto yy258;
yy297:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy304;
	goto yy249;
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy258;
	if (yych <= '9') goto yy298;
	if (yych == '}') goto yy306;
	goto yy258;
yy300:
	++YYCURSOR;
#line 362 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1757 "src/parse/lex.cc"
yy302:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy308;
	goto yy258;
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy309;
	goto yy258;
yy304:
	++YYCURSOR;
#line 386 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1770 "src/parse/lex.cc"
yy306:
	++YYCURSOR;
	p = yyt1;
#line 350 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 1786 "src/parse/lex.cc"
yy308:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy311;
	if (yych <= '9') goto yy258;
	goto yy311;
yy309:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy312;
	goto yy258;
yy310:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy311:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy310;
		goto yy258;
	} else {
		if (yych <= ' ') goto yy310;
		if (yych <= '0') goto yy258;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy313;
		}
		goto yy258;
	}
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy315;
	goto yy258;
yy313:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy258;
			goto yy317;
		} else {
			if (yych <= '\n') goto yy319;
			if (yych <= '\f') goto yy258;
			goto yy321;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy258;
			goto yy317;
		} else {
			if (yych <= '/') goto yy258;
			if (yych <= '9') goto yy313;
			goto yy258;
		}
	}
yy315:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy322;
	if (yych == ' ') goto yy322;
yy316:
#line 416 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 1852 "src/parse/lex.cc"
yy317:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy317;
		goto yy258;
	} else {
		if (yych <= ' ') goto yy317;
		if (yych == '"') goto yy324;
		goto yy258;
	}
yy319:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 429 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1873 "src/parse/lex.cc"
yy321:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy319;
	goto yy258;
yy322:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy322;
		goto yy258;
	} else {
		if (yych <= ' ') goto yy322;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy326;
		}
		goto yy258;
	}
yy324:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy324;
	}
	if (yych <= '\n') goto yy258;
	if (yych <= '"') goto yy328;
	goto yy329;
yy326:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy258;
		if (yych == '\n') goto yy258;
		goto yy326;
	} else {
		if (yych <= '"') goto yy330;
		if (yych == '\\') goto yy331;
		goto yy326;
	}
yy328:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy319;
	if (yych == '\r') goto yy321;
	goto yy258;
yy329:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy258;
	if (yych == '\n') goto yy258;
	goto yy324;
yy330:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy332;
		}
		goto yy258;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy332;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy334;
		}
		goto yy258;
	}
yy331:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy258;
	if (yych == '\n') goto yy258;
	goto yy326;
yy332:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy332;
		goto yy258;
	} else {
		if (yych <= ' ') goto yy332;
		if (yych != ';') goto yy258;
	}
yy334:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy335;
	if (yych == '\r') goto yy337;
	goto yy258;
yy335:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 412 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 1979 "src/parse/lex.cc"
yy337:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy335;
	goto yy258;
}
#line 449 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 1992 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy341;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy341;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy344;
		}
	}
yy340:
#line 456 "../src/parse/lex.re"
	{ return false; }
#line 2049 "src/parse/lex.cc"
yy341:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy341;
	}
	if (yych == '=') goto yy344;
yy343:
	YYCURSOR = YYMARKER;
	goto yy340;
yy344:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy343;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 455 "../src/parse/lex.re"
	{ return true; }
#line 2068 "src/parse/lex.cc"
}
#line 457 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2077 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy350;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy350;
	}
#line 465 "../src/parse/lex.re"
	{ return false; }
#line 2126 "src/parse/lex.cc"
yy350:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy350;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy353;
	} else {
		if (yych <= '=') goto yy353;
		if (yych == '{') goto yy353;
	}
	YYCURSOR = yyt1;
#line 464 "../src/parse/lex.re"
	{ return true; }
#line 2143 "src/parse/lex.cc"
yy353:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 463 "../src/parse/lex.re"
	{ return false; }
#line 2149 "src/parse/lex.cc"
}
#line 466 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2160 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy355;
yy356:
	++YYCURSOR;
yy355:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy356;
	}
	if (yych <= 0x1F) goto yy358;
	if (yych <= '!') goto yy359;
	if (yych == '>') goto yy362;
yy358:
#line 476 "../src/parse/lex.re"
	{ goto cond; }
#line 2212 "src/parse/lex.cc"
yy359:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy359;
	if (yych == ' ') goto yy359;
#line 474 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2221 "src/parse/lex.cc"
yy362:
	++YYCURSOR;
#line 475 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2226 "src/parse/lex.cc"
}
#line 477 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2233 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy368;
		if (yych >= 'A') goto yy370;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy370;
		} else {
			if (yych <= '`') goto yy366;
			if (yych <= 'z') goto yy370;
		}
	}
yy366:
	++YYCURSOR;
#line 483 "../src/parse/lex.re"
	{ goto error; }
#line 2287 "src/parse/lex.cc"
yy368:
	++YYCURSOR;
#line 482 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2292 "src/parse/lex.cc"
yy370:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy370;
	}
#line 481 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2302 "src/parse/lex.cc"
}
#line 484 "../src/parse/lex.re"

next:

#line 2308 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy377;
		if (yych >= ' ') goto yy377;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy378;
		} else {
			if (yych == '>') goto yy381;
		}
	}
	++YYCURSOR;
yy376:
#line 489 "../src/parse/lex.re"
	{ goto error; }
#line 2361 "src/parse/lex.cc"
yy377:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy383;
		if (yych <= 0x1F) goto yy376;
		goto yy383;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy376;
		} else {
			if (yych == '>') goto yy381;
			goto yy376;
		}
	}
yy378:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy378;
	}
#line 487 "../src/parse/lex.re"
	{ goto cond; }
#line 2385 "src/parse/lex.cc"
yy381:
	++YYCURSOR;
#line 488 "../src/parse/lex.re"
	{ goto end; }
#line 2390 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy383;
		if (yych >= ' ') goto yy383;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy378;
		} else {
			if (yych == '>') goto yy381;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy376;
}
#line 490 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2425 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy388;
			if (yych == '\n') goto yy392;
			goto yy390;
		} else {
			if (yych <= '\r') goto yy394;
			if (yych == '"') goto yy395;
			goto yy390;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy395;
			if (yych == '/') goto yy397;
			goto yy390;
		} else {
			if (yych == '|') goto yy390;
			if (yych <= '}') goto yy398;
			goto yy390;
		}
	}
yy388:
	++YYCURSOR;
#line 516 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2455 "src/parse/lex.cc"
yy390:
	++YYCURSOR;
yy391:
#line 524 "../src/parse/lex.re"
	{ goto code; }
#line 2461 "src/parse/lex.cc"
yy392:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy393;
		if (yych <= '\n') goto yy400;
	} else {
		if (yych <= '\r') goto yy400;
		if (yych == ' ') goto yy400;
	}
yy393:
#line 507 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2481 "src/parse/lex.cc"
yy394:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy392;
	goto yy391;
yy395:
	++YYCURSOR;
#line 523 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2490 "src/parse/lex.cc"
yy397:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy402;
	if (yych == '/') goto yy404;
	goto yy391;
yy398:
	++YYCURSOR;
#line 517 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2503 "src/parse/lex.cc"
yy400:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 506 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2509 "src/parse/lex.cc"
yy402:
	++YYCURSOR;
#line 521 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2514 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
#line 522 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2519 "src/parse/lex.cc"
}
#line 525 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 2531 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy408;
			if (yych == '\n') goto yy412;
			goto yy410;
		} else {
			if (yych <= '\r') goto yy414;
			if (yych == '"') goto yy415;
			goto yy410;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy415;
			if (yych == '/') goto yy417;
			goto yy410;
		} else {
			if (yych <= '{') goto yy418;
			if (yych == '}') goto yy420;
			goto yy410;
		}
	}
yy408:
	++YYCURSOR;
#line 545 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2595 "src/parse/lex.cc"
yy410:
	++YYCURSOR;
yy411:
#line 549 "../src/parse/lex.re"
	{ goto code; }
#line 2601 "src/parse/lex.cc"
yy412:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy422;
	}
	if (yych == '#') goto yy425;
yy413:
#line 544 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2611 "src/parse/lex.cc"
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy412;
	goto yy411;
yy415:
	++YYCURSOR;
#line 548 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2620 "src/parse/lex.cc"
yy417:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy427;
	if (yych == '/') goto yy429;
	goto yy411;
yy418:
	++YYCURSOR;
#line 542 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2630 "src/parse/lex.cc"
yy420:
	++YYCURSOR;
#line 534 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2641 "src/parse/lex.cc"
yy422:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy422;
	}
	if (yych == '#') goto yy425;
yy424:
	YYCURSOR = YYMARKER;
	goto yy413;
yy425:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy425;
		goto yy424;
	} else {
		if (yych <= ' ') goto yy425;
		if (yych == 'l') goto yy431;
		goto yy424;
	}
yy427:
	++YYCURSOR;
#line 546 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2669 "src/parse/lex.cc"
yy429:
	++YYCURSOR;
#line 547 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2674 "src/parse/lex.cc"
yy431:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy424;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy424;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy424;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy436;
	if (yych <= '9') goto yy424;
	goto yy436;
yy435:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy436:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy435;
		goto yy424;
	} else {
		if (yych <= ' ') goto yy435;
		if (yych <= '0') goto yy424;
		if (yych >= ':') goto yy424;
		yyt1 = YYCURSOR;
	}
yy437:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy437;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy424;
		if (yych <= '\t') goto yy439;
		if (yych <= '\n') goto yy441;
		goto yy424;
	} else {
		if (yych <= '\r') goto yy443;
		if (yych != ' ') goto yy424;
	}
yy439:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy439;
		goto yy424;
	} else {
		if (yych <= ' ') goto yy439;
		if (yych == '"') goto yy444;
		goto yy424;
	}
yy441:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 543 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2733 "src/parse/lex.cc"
yy443:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy441;
	goto yy424;
yy444:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy444;
	}
	if (yych <= '\n') goto yy424;
	if (yych >= '#') goto yy447;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy441;
	if (yych == '\r') goto yy443;
	goto yy424;
yy447:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy424;
	if (yych == '\n') goto yy424;
	goto yy444;
}
#line 550 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2767 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy450;
			if (yych <= '\t') goto yy452;
			goto yy454;
		} else {
			if (yych == '\r') goto yy456;
			goto yy452;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy457;
			if (yych <= '&') goto yy452;
			goto yy457;
		} else {
			if (yych == '\\') goto yy459;
			goto yy452;
		}
	}
yy450:
	++YYCURSOR;
#line 560 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2795 "src/parse/lex.cc"
yy452:
	++YYCURSOR;
yy453:
#line 561 "../src/parse/lex.re"
	{ goto loop; }
#line 2801 "src/parse/lex.cc"
yy454:
	++YYCURSOR;
#line 559 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2806 "src/parse/lex.cc"
yy456:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy454;
	goto yy453;
yy457:
	++YYCURSOR;
#line 557 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2815 "src/parse/lex.cc"
yy459:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy453;
	} else {
		if (yych <= '\'') goto yy460;
		if (yych != '\\') goto yy453;
	}
yy460:
	++YYCURSOR;
#line 558 "../src/parse/lex.re"
	{ goto loop; }
#line 2828 "src/parse/lex.cc"
}
#line 562 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2838 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy464;
		if (yych == '\n') goto yy468;
		goto yy466;
	} else {
		if (yych <= '\r') goto yy470;
		if (yych == '*') goto yy471;
		goto yy466;
	}
yy464:
	++YYCURSOR;
#line 571 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2856 "src/parse/lex.cc"
yy466:
	++YYCURSOR;
yy467:
#line 572 "../src/parse/lex.re"
	{ goto loop; }
#line 2862 "src/parse/lex.cc"
yy468:
	++YYCURSOR;
#line 570 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2867 "src/parse/lex.cc"
yy470:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy468;
	goto yy467;
yy471:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy467;
	++YYCURSOR;
#line 569 "../src/parse/lex.re"
	{ return; }
#line 2878 "src/parse/lex.cc"
}
#line 573 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2888 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy476;
		if (yych <= '\t') goto yy478;
		goto yy480;
	} else {
		if (yych == '\r') goto yy482;
		goto yy478;
	}
yy476:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2905 "src/parse/lex.cc"
yy478:
	++YYCURSOR;
yy479:
#line 582 "../src/parse/lex.re"
	{ goto loop; }
#line 2911 "src/parse/lex.cc"
yy480:
	++YYCURSOR;
#line 580 "../src/parse/lex.re"
	{ next_line(); return; }
#line 2916 "src/parse/lex.cc"
yy482:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy480;
	goto yy479;
}
#line 583 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 2935 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy486;
#line 596 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2943 "src/parse/lex.cc"
yy486:
	++YYCURSOR;
#line 595 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 2948 "src/parse/lex.cc"
}
#line 597 "../src/parse/lex.re"

snd:

#line 2954 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy491;
yy490:
#line 600 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 2963 "src/parse/lex.cc"
yy491:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy493;
	YYCURSOR = YYMARKER;
	goto yy490;
yy493:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 601 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 2981 "src/parse/lex.cc"
}
#line 609 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 646 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 2999 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy497;
		if (yych == '\n') goto yy501;
		goto yy499;
	} else {
		if (yych <= '\r') goto yy503;
		if (yych == '\\') goto yy504;
		goto yy499;
	}
yy497:
	++YYCURSOR;
#line 627 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3018 "src/parse/lex.cc"
yy499:
	++YYCURSOR;
yy500:
#line 629 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3024 "src/parse/lex.cc"
yy501:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3029 "src/parse/lex.cc"
yy503:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy501;
	goto yy500;
yy504:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy505;
				if (yych == '\n') goto yy501;
				goto yy506;
			} else {
				if (yych <= '\r') goto yy508;
				if (yych == '-') goto yy509;
				goto yy506;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy511;
				if (yych <= '7') goto yy513;
				if (yych <= 'T') goto yy506;
				goto yy514;
			} else {
				if (yych == 'X') goto yy516;
				if (yych <= '[') goto yy506;
				goto yy517;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy519;
				if (yych <= '`') goto yy506;
				if (yych <= 'a') goto yy521;
				goto yy523;
			} else {
				if (yych == 'f') goto yy525;
				if (yych <= 'm') goto yy506;
				goto yy527;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy529;
				if (yych <= 's') goto yy506;
				goto yy531;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy516;
					goto yy533;
				} else {
					if (yych == 'x') goto yy535;
					goto yy506;
				}
			}
		}
	}
yy505:
#line 624 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3090 "src/parse/lex.cc"
yy506:
	++YYCURSOR;
yy507:
#line 642 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3099 "src/parse/lex.cc"
yy508:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy501;
	goto yy507;
yy509:
	++YYCURSOR;
#line 640 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3108 "src/parse/lex.cc"
yy511:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy512;
	if (yych <= '7') goto yy536;
yy512:
#line 623 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3117 "src/parse/lex.cc"
yy513:
	++YYCURSOR;
	goto yy512;
yy514:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy515;
		if (yych <= '9') goto yy538;
	} else {
		if (yych <= 'F') goto yy538;
		if (yych <= '`') goto yy515;
		if (yych <= 'f') goto yy538;
	}
yy515:
#line 622 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3135 "src/parse/lex.cc"
yy516:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy515;
		if (yych <= '9') goto yy539;
		goto yy515;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy515;
		if (yych <= 'f') goto yy539;
		goto yy515;
	}
yy517:
	++YYCURSOR;
#line 639 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3153 "src/parse/lex.cc"
yy519:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3158 "src/parse/lex.cc"
yy521:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3163 "src/parse/lex.cc"
yy523:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3168 "src/parse/lex.cc"
yy525:
	++YYCURSOR;
#line 634 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3173 "src/parse/lex.cc"
yy527:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3178 "src/parse/lex.cc"
yy529:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3183 "src/parse/lex.cc"
yy531:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3188 "src/parse/lex.cc"
yy533:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3193 "src/parse/lex.cc"
yy535:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy515;
		if (yych <= '9') goto yy540;
		goto yy515;
	} else {
		if (yych <= 'F') goto yy540;
		if (yych <= '`') goto yy515;
		if (yych <= 'f') goto yy540;
		goto yy515;
	}
yy536:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy537;
	if (yych <= '7') goto yy541;
yy537:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy512;
	} else {
		goto yy515;
	}
yy538:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy543;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy543;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy543;
		goto yy537;
	}
yy539:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy544;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy544;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy544;
		goto yy537;
	}
yy540:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy545;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy545;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy545;
		goto yy537;
	}
yy541:
	++YYCURSOR;
#line 631 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3258 "src/parse/lex.cc"
yy543:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy547;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy547;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy547;
		goto yy537;
	}
yy544:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy540;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy540;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy540;
		goto yy537;
	}
yy545:
	++YYCURSOR;
#line 630 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3287 "src/parse/lex.cc"
yy547:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych >= ':') goto yy537;
	} else {
		if (yych <= 'F') goto yy548;
		if (yych <= '`') goto yy537;
		if (yych >= 'g') goto yy537;
	}
yy548:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy537;
		if (yych <= '9') goto yy539;
		goto yy537;
	} else {
		if (yych <= 'F') goto yy539;
		if (yych <= '`') goto yy537;
		if (yych <= 'f') goto yy539;
		goto yy537;
	}
}
#line 648 "../src/parse/lex.re"

    }
    else {
        
#line 3316 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy551;
			if (yych == '\n') goto yy555;
			goto yy553;
		} else {
			if (yych <= '\r') goto yy557;
			if (yych == '\\') goto yy558;
			goto yy553;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy560;
			if (yych <= 0xDF) goto yy562;
			if (yych <= 0xE0) goto yy563;
			goto yy564;
		} else {
			if (yych <= 0xF0) goto yy565;
			if (yych <= 0xF3) goto yy566;
			if (yych <= 0xF4) goto yy567;
			goto yy560;
		}
	}
yy551:
	++YYCURSOR;
#line 627 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3349 "src/parse/lex.cc"
yy553:
	++YYCURSOR;
yy554:
#line 629 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3355 "src/parse/lex.cc"
yy555:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3360 "src/parse/lex.cc"
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy555;
	goto yy554;
yy558:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy568;
				} else {
					if (yych <= '\n') goto yy555;
					if (yych <= '\f') goto yy568;
					goto yy570;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy568;
					goto yy571;
				} else {
					if (yych <= '/') goto yy568;
					if (yych <= '3') goto yy573;
					goto yy575;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy568;
					goto yy576;
				} else {
					if (yych == 'X') goto yy578;
					goto yy568;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy579;
					goto yy581;
				} else {
					if (yych <= '`') goto yy568;
					if (yych <= 'a') goto yy583;
					goto yy585;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy568;
					goto yy587;
				} else {
					if (yych == 'n') goto yy589;
					goto yy568;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy591;
					goto yy568;
				} else {
					if (yych <= 't') goto yy593;
					if (yych <= 'u') goto yy578;
					goto yy595;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy568;
					goto yy597;
				} else {
					if (yych <= 0x7F) goto yy568;
					if (yych >= 0xC2) goto yy598;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy600;
					if (yych <= 0xEF) goto yy601;
					goto yy602;
				} else {
					if (yych <= 0xF3) goto yy603;
					if (yych <= 0xF4) goto yy604;
				}
			}
		}
	}
yy559:
#line 624 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3452 "src/parse/lex.cc"
yy560:
	++YYCURSOR;
yy561:
#line 625 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3458 "src/parse/lex.cc"
yy562:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy561;
	if (yych <= 0xBF) goto yy553;
	goto yy561;
yy563:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy561;
	if (yych <= 0xBF) goto yy605;
	goto yy561;
yy564:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy561;
	if (yych <= 0xBF) goto yy605;
	goto yy561;
yy565:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy561;
	if (yych <= 0xBF) goto yy606;
	goto yy561;
yy566:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy561;
	if (yych <= 0xBF) goto yy606;
	goto yy561;
yy567:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy561;
	if (yych <= 0x8F) goto yy606;
	goto yy561;
yy568:
	++YYCURSOR;
yy569:
#line 642 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3502 "src/parse/lex.cc"
yy570:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy555;
	goto yy569;
yy571:
	++YYCURSOR;
#line 640 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3511 "src/parse/lex.cc"
yy573:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy574;
	if (yych <= '7') goto yy607;
yy574:
#line 623 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3520 "src/parse/lex.cc"
yy575:
	++YYCURSOR;
	goto yy574;
yy576:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy608;
	} else {
		if (yych <= 'F') goto yy608;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy608;
	}
yy577:
#line 622 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3538 "src/parse/lex.cc"
yy578:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy609;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy609;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy609;
		goto yy577;
	}
yy579:
	++YYCURSOR;
#line 639 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3556 "src/parse/lex.cc"
yy581:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3561 "src/parse/lex.cc"
yy583:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3566 "src/parse/lex.cc"
yy585:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3571 "src/parse/lex.cc"
yy587:
	++YYCURSOR;
#line 634 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3576 "src/parse/lex.cc"
yy589:
	++YYCURSOR;
#line 635 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3581 "src/parse/lex.cc"
yy591:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3586 "src/parse/lex.cc"
yy593:
	++YYCURSOR;
#line 637 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3591 "src/parse/lex.cc"
yy595:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3596 "src/parse/lex.cc"
yy597:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy577;
		if (yych <= '9') goto yy610;
		goto yy577;
	} else {
		if (yych <= 'F') goto yy610;
		if (yych <= '`') goto yy577;
		if (yych <= 'f') goto yy610;
		goto yy577;
	}
yy598:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0xBF) goto yy568;
yy599:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy559;
		} else {
			goto yy561;
		}
	} else {
		if (yyaccept == 2) {
			goto yy574;
		} else {
			goto yy577;
		}
	}
yy600:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy599;
	if (yych <= 0xBF) goto yy598;
	goto yy599;
yy601:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0xBF) goto yy598;
	goto yy599;
yy602:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy599;
	if (yych <= 0xBF) goto yy601;
	goto yy599;
yy603:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0xBF) goto yy601;
	goto yy599;
yy604:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0x8F) goto yy601;
	goto yy599;
yy605:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0xBF) goto yy553;
	goto yy599;
yy606:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy599;
	if (yych <= 0xBF) goto yy605;
	goto yy599;
yy607:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy599;
	if (yych <= '7') goto yy611;
	goto yy599;
yy608:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy613;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy613;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy613;
		goto yy599;
	}
yy609:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy614;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy614;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy614;
		goto yy599;
	}
yy610:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy615;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy615;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy615;
		goto yy599;
	}
yy611:
	++YYCURSOR;
#line 631 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3709 "src/parse/lex.cc"
yy613:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy617;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy617;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy617;
		goto yy599;
	}
yy614:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy610;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy610;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy610;
		goto yy599;
	}
yy615:
	++YYCURSOR;
#line 630 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3738 "src/parse/lex.cc"
yy617:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych >= ':') goto yy599;
	} else {
		if (yych <= 'F') goto yy618;
		if (yych <= '`') goto yy599;
		if (yych >= 'g') goto yy599;
	}
yy618:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy599;
		if (yych <= '9') goto yy609;
		goto yy599;
	} else {
		if (yych <= 'F') goto yy609;
		if (yych <= '`') goto yy599;
		if (yych <= 'f') goto yy609;
		goto yy599;
	}
}
#line 651 "../src/parse/lex.re"
 #line 651 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 685 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3777 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy621;
		if (yych == '\n') goto yy625;
		goto yy623;
	} else {
		if (yych <= '\r') goto yy627;
		if (yych == '\\') goto yy628;
		goto yy623;
	}
yy621:
	++YYCURSOR;
#line 667 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3796 "src/parse/lex.cc"
yy623:
	++YYCURSOR;
yy624:
#line 669 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3802 "src/parse/lex.cc"
yy625:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 3807 "src/parse/lex.cc"
yy627:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy625;
	goto yy624;
yy628:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy629;
				if (yych <= '\t') goto yy630;
				goto yy625;
			} else {
				if (yych == '\r') goto yy632;
				if (yych <= '/') goto yy630;
				goto yy633;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy635;
				if (yych == 'U') goto yy636;
				goto yy630;
			} else {
				if (yych <= 'X') goto yy638;
				if (yych == '\\') goto yy639;
				goto yy630;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy641;
				if (yych <= 'b') goto yy643;
				goto yy630;
			} else {
				if (yych <= 'f') goto yy645;
				if (yych == 'n') goto yy647;
				goto yy630;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy649;
				if (yych <= 's') goto yy630;
				if (yych <= 't') goto yy651;
				goto yy638;
			} else {
				if (yych <= 'v') goto yy653;
				if (yych == 'x') goto yy655;
				goto yy630;
			}
		}
	}
yy629:
#line 664 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 3863 "src/parse/lex.cc"
yy630:
	++YYCURSOR;
yy631:
#line 680 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 3873 "src/parse/lex.cc"
yy632:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy625;
	goto yy631;
yy633:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy634;
	if (yych <= '7') goto yy656;
yy634:
#line 663 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 3886 "src/parse/lex.cc"
yy635:
	++YYCURSOR;
	goto yy634;
yy636:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy637;
		if (yych <= '9') goto yy658;
	} else {
		if (yych <= 'F') goto yy658;
		if (yych <= '`') goto yy637;
		if (yych <= 'f') goto yy658;
	}
yy637:
#line 662 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3904 "src/parse/lex.cc"
yy638:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy637;
		if (yych <= '9') goto yy659;
		goto yy637;
	} else {
		if (yych <= 'F') goto yy659;
		if (yych <= '`') goto yy637;
		if (yych <= 'f') goto yy659;
		goto yy637;
	}
yy639:
	++YYCURSOR;
#line 679 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 3922 "src/parse/lex.cc"
yy641:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 3927 "src/parse/lex.cc"
yy643:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 3932 "src/parse/lex.cc"
yy645:
	++YYCURSOR;
#line 674 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 3937 "src/parse/lex.cc"
yy647:
	++YYCURSOR;
#line 675 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 3942 "src/parse/lex.cc"
yy649:
	++YYCURSOR;
#line 676 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 3947 "src/parse/lex.cc"
yy651:
	++YYCURSOR;
#line 677 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 3952 "src/parse/lex.cc"
yy653:
	++YYCURSOR;
#line 678 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 3957 "src/parse/lex.cc"
yy655:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy637;
		if (yych <= '9') goto yy660;
		goto yy637;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy637;
		if (yych <= 'f') goto yy660;
		goto yy637;
	}
yy656:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy657;
	if (yych <= '7') goto yy661;
yy657:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy634;
	} else {
		goto yy637;
	}
yy658:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy663;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy663;
		goto yy657;
	}
yy659:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy664;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy664;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy664;
		goto yy657;
	}
yy660:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy665;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy665;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy665;
		goto yy657;
	}
yy661:
	++YYCURSOR;
#line 671 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4022 "src/parse/lex.cc"
yy663:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy667;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy667;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy667;
		goto yy657;
	}
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy660;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy660;
		goto yy657;
	}
yy665:
	++YYCURSOR;
#line 670 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4051 "src/parse/lex.cc"
yy667:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych >= ':') goto yy657;
	} else {
		if (yych <= 'F') goto yy668;
		if (yych <= '`') goto yy657;
		if (yych >= 'g') goto yy657;
	}
yy668:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy657;
		if (yych <= '9') goto yy659;
		goto yy657;
	} else {
		if (yych <= 'F') goto yy659;
		if (yych <= '`') goto yy657;
		if (yych <= 'f') goto yy659;
		goto yy657;
	}
}
#line 687 "../src/parse/lex.re"

    }
    else {
        
#line 4080 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy671;
			if (yych == '\n') goto yy675;
			goto yy673;
		} else {
			if (yych <= '\r') goto yy677;
			if (yych == '\\') goto yy678;
			goto yy673;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy680;
			if (yych <= 0xDF) goto yy682;
			if (yych <= 0xE0) goto yy683;
			goto yy684;
		} else {
			if (yych <= 0xF0) goto yy685;
			if (yych <= 0xF3) goto yy686;
			if (yych <= 0xF4) goto yy687;
			goto yy680;
		}
	}
yy671:
	++YYCURSOR;
#line 667 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4113 "src/parse/lex.cc"
yy673:
	++YYCURSOR;
yy674:
#line 669 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4119 "src/parse/lex.cc"
yy675:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4124 "src/parse/lex.cc"
yy677:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy675;
	goto yy674;
yy678:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy679;
				if (yych == '\n') goto yy675;
				goto yy688;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy690;
					goto yy688;
				} else {
					if (yych <= '3') goto yy691;
					if (yych <= '7') goto yy693;
					goto yy688;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy694;
					goto yy688;
				} else {
					if (yych <= 'X') goto yy696;
					if (yych <= '[') goto yy688;
					goto yy697;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy688;
					goto yy699;
				} else {
					if (yych <= 'b') goto yy701;
					if (yych <= 'e') goto yy688;
					goto yy703;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy705;
				if (yych <= 'q') goto yy688;
				goto yy707;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy688;
					goto yy709;
				} else {
					if (yych <= 'u') goto yy696;
					if (yych <= 'v') goto yy711;
					goto yy688;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy713;
					goto yy688;
				} else {
					if (yych <= 0xC1) goto yy679;
					if (yych <= 0xDF) goto yy714;
					goto yy716;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy717;
					goto yy718;
				} else {
					if (yych <= 0xF3) goto yy719;
					if (yych <= 0xF4) goto yy720;
				}
			}
		}
	}
yy679:
#line 664 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4209 "src/parse/lex.cc"
yy680:
	++YYCURSOR;
yy681:
#line 665 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4215 "src/parse/lex.cc"
yy682:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy681;
	if (yych <= 0xBF) goto yy673;
	goto yy681;
yy683:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy681;
	if (yych <= 0xBF) goto yy721;
	goto yy681;
yy684:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy681;
	if (yych <= 0xBF) goto yy721;
	goto yy681;
yy685:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy681;
	if (yych <= 0xBF) goto yy722;
	goto yy681;
yy686:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy681;
	if (yych <= 0xBF) goto yy722;
	goto yy681;
yy687:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy681;
	if (yych <= 0x8F) goto yy722;
	goto yy681;
yy688:
	++YYCURSOR;
yy689:
#line 680 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4260 "src/parse/lex.cc"
yy690:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy675;
	goto yy689;
yy691:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy692;
	if (yych <= '7') goto yy723;
yy692:
#line 663 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4273 "src/parse/lex.cc"
yy693:
	++YYCURSOR;
	goto yy692;
yy694:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy695;
		if (yych <= '9') goto yy724;
	} else {
		if (yych <= 'F') goto yy724;
		if (yych <= '`') goto yy695;
		if (yych <= 'f') goto yy724;
	}
yy695:
#line 662 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4291 "src/parse/lex.cc"
yy696:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy695;
		if (yych <= '9') goto yy725;
		goto yy695;
	} else {
		if (yych <= 'F') goto yy725;
		if (yych <= '`') goto yy695;
		if (yych <= 'f') goto yy725;
		goto yy695;
	}
yy697:
	++YYCURSOR;
#line 679 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4309 "src/parse/lex.cc"
yy699:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4314 "src/parse/lex.cc"
yy701:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4319 "src/parse/lex.cc"
yy703:
	++YYCURSOR;
#line 674 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4324 "src/parse/lex.cc"
yy705:
	++YYCURSOR;
#line 675 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4329 "src/parse/lex.cc"
yy707:
	++YYCURSOR;
#line 676 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4334 "src/parse/lex.cc"
yy709:
	++YYCURSOR;
#line 677 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4339 "src/parse/lex.cc"
yy711:
	++YYCURSOR;
#line 678 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4344 "src/parse/lex.cc"
yy713:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy695;
		if (yych <= '9') goto yy726;
		goto yy695;
	} else {
		if (yych <= 'F') goto yy726;
		if (yych <= '`') goto yy695;
		if (yych <= 'f') goto yy726;
		goto yy695;
	}
yy714:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0xBF) goto yy688;
yy715:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy679;
		} else {
			goto yy681;
		}
	} else {
		if (yyaccept == 2) {
			goto yy692;
		} else {
			goto yy695;
		}
	}
yy716:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy715;
	if (yych <= 0xBF) goto yy714;
	goto yy715;
yy717:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0xBF) goto yy714;
	goto yy715;
yy718:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy715;
	if (yych <= 0xBF) goto yy717;
	goto yy715;
yy719:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0xBF) goto yy717;
	goto yy715;
yy720:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0x8F) goto yy717;
	goto yy715;
yy721:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0xBF) goto yy673;
	goto yy715;
yy722:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy715;
	if (yych <= 0xBF) goto yy721;
	goto yy715;
yy723:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy715;
	if (yych <= '7') goto yy727;
	goto yy715;
yy724:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy729;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy729;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy729;
		goto yy715;
	}
yy725:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy730;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy730;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy730;
		goto yy715;
	}
yy726:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy731;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy731;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy731;
		goto yy715;
	}
yy727:
	++YYCURSOR;
#line 671 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4457 "src/parse/lex.cc"
yy729:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy733;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy733;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy733;
		goto yy715;
	}
yy730:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy726;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy726;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy726;
		goto yy715;
	}
yy731:
	++YYCURSOR;
#line 670 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4486 "src/parse/lex.cc"
yy733:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych >= ':') goto yy715;
	} else {
		if (yych <= 'F') goto yy734;
		if (yych <= '`') goto yy715;
		if (yych >= 'g') goto yy715;
	}
yy734:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy715;
		if (yych <= '9') goto yy725;
		goto yy715;
	} else {
		if (yych <= 'F') goto yy725;
		if (yych <= '`') goto yy715;
		if (yych <= 'f') goto yy725;
		goto yy715;
	}
}
#line 690 "../src/parse/lex.re"
 #line 690 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 4534 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy739;
		} else {
			if (yych <= '\n') goto yy741;
			if (yych <= '\f') goto yy739;
			goto yy743;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy739;
			goto yy744;
		} else {
			if (yych <= '0') goto yy739;
			if (yych <= '9') goto yy745;
			goto yy739;
		}
	}
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ --cur; return; }
#line 4594 "src/parse/lex.cc"
yy739:
	++YYCURSOR;
yy740:
#line 734 "../src/parse/lex.re"
	{ goto sourceline; }
#line 4600 "src/parse/lex.cc"
yy741:
	++YYCURSOR;
#line 732 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 4605 "src/parse/lex.cc"
yy743:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy741;
	goto yy740;
yy744:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy740;
	if (yych == '\n') goto yy740;
	goto yy749;
yy745:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy745;
	}
#line 712 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 4632 "src/parse/lex.cc"
yy748:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy749:
	if (yybm[0+yych] & 128) {
		goto yy748;
	}
	if (yych <= '\n') goto yy750;
	if (yych <= '"') goto yy751;
	goto yy753;
yy750:
	YYCURSOR = YYMARKER;
	goto yy740;
yy751:
	++YYCURSOR;
#line 722 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 4659 "src/parse/lex.cc"
yy753:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy750;
	if (yych == '\n') goto yy750;
	goto yy748;
}
#line 735 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
