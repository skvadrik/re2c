/* Generated by re2c 2.1.1 on Mon May 24 07:51:00 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 61 "../src/parse/lex.re"


#line 120 "../src/parse/lex.re"


static inline void save_string(std::string &str, const char *s, const char *e)
{
    if (s == NULL) {
        str.clear();
    } else {
        str.assign(s, e);
    }
}

Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 68 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  80,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 80,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  64,  64,  64,  64,  64,  64, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,   0,  64,  64, 192, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 236 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 134 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 256 "../src/parse/lex.re"
	{ goto loop; }
#line 140 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 251 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 154 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		if (yyaccept == 2) {
			yyt1 = yyt2 = NULL;
			goto yy123;
		} else {
			yyt1 = yyt2 = NULL;
			goto yy142;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 212 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 244 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 515 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 167 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 655 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy133;
	yyt1 = yyt2 = NULL;
yy123:
	x = yyt1;
	y = yyt2;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Reuse;
    }
#line 690 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy134;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy136;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy137;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy138;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy139;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy141;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy143;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy145;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	}
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy149;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy150;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy153;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy154;
	goto yy13;
yy139:
	++YYCURSOR;
#line 208 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 772 "src/parse/lex.cc"
yy141:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy155;
	yyt1 = yyt2 = NULL;
yy142:
	x = yyt1;
	y = yyt2;
#line 149 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Rules;
    }
#line 787 "src/parse/lex.cc"
yy143:
	++YYCURSOR;
#line 202 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 796 "src/parse/lex.cc"
yy145:
	++YYCURSOR;
#line 191 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 810 "src/parse/lex.cc"
yy147:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy147;
	}
	yyt2 = YYCURSOR;
	goto yy123;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy156;
	goto yy13;
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy157;
	goto yy13;
yy151:
	++YYCURSOR;
#line 161 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 836 "src/parse/lex.cc"
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy159;
	goto yy13;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	}
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy164;
	goto yy13;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy166;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy167;
	goto yy13;
yy160:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		if (yych <= '9') goto yy160;
		if (yych <= '@') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		goto yy160;
	} else {
		if (yych <= '_') {
			if (yych <= '^') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			goto yy160;
		} else {
			if (yych <= '`') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			if (yych <= 'z') goto yy160;
			yyt2 = YYCURSOR;
			goto yy142;
		}
	}
yy162:
	++YYCURSOR;
#line 181 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 922 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy168;
	if (yych == 'n') goto yy169;
	goto yy13;
yy165:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy166:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy165;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy165;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy171;
		}
		goto yy13;
	}
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy173;
	goto yy13;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy175;
	goto yy13;
yy169:
	++YYCURSOR;
#line 214 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 962 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy171;
	} else {
		if (yych <= '"') goto yy177;
		if (yych == '\\') goto yy178;
		goto yy171;
	}
yy173:
	++YYCURSOR;
#line 174 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 985 "src/parse/lex.cc"
yy175:
	++YYCURSOR;
#line 222 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 996 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy179;
		}
		goto yy13;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy179;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy181;
		}
		goto yy13;
	}
yy178:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy171;
yy179:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy179;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy179;
		if (yych != '*') goto yy13;
	}
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy13;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 230 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1046 "src/parse/lex.cc"
}
#line 257 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 1057 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy186;
		if (yych == '\n') goto yy190;
		goto yy188;
	} else {
		if (yych <= '\r') goto yy192;
		if (yych == '*') goto yy193;
		goto yy188;
	}
yy186:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 1078 "src/parse/lex.cc"
yy188:
	++YYCURSOR;
yy189:
#line 265 "../src/parse/lex.re"
	{ goto loop; }
#line 1084 "src/parse/lex.cc"
yy190:
	++YYCURSOR;
#line 270 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 1093 "src/parse/lex.cc"
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy190;
	goto yy189;
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy189;
	++YYCURSOR;
#line 275 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1109 "src/parse/lex.cc"
}
#line 281 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1121 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy200;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy203;
		} else {
			if (yych == '\r') goto yy205;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy206;
			if (yych >= 'f') goto yy207;
		} else {
			if (yych == 's') goto yy208;
		}
	}
	++YYCURSOR;
yy199:
#line 290 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1184 "src/parse/lex.cc"
yy200:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy200;
	}
#line 302 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1196 "src/parse/lex.cc"
yy203:
	++YYCURSOR;
#line 305 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1204 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy203;
	goto yy199;
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy209;
	goto yy199;
yy207:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy211;
	goto yy199;
yy208:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy213;
	goto yy199;
yy209:
	++YYCURSOR;
#line 309 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1230 "src/parse/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy214;
yy212:
	YYCURSOR = YYMARKER;
	goto yy199;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy215;
	goto yy212;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy216;
	goto yy212;
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy217;
	goto yy212;
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy218;
	goto yy212;
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy219;
	goto yy212;
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy220;
	goto yy212;
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy222;
	goto yy212;
yy220:
	++YYCURSOR;
#line 294 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1272 "src/parse/lex.cc"
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy212;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy212;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy212;
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1286 "src/parse/lex.cc"
}
#line 315 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1299 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy231;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy229;
				if (yych <= '\n') goto yy234;
				if (yych >= '\r') goto yy236;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy237;
				} else {
					if (yych <= '"') goto yy238;
					if (yych <= '#') goto yy240;
					goto yy241;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy243;
				} else {
					if (yych <= '\'') goto yy244;
					if (yych <= ')') goto yy241;
					goto yy246;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy241;
				} else {
					if (yych <= '.') goto yy247;
					if (yych <= '/') goto yy249;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy250;
				if (yych <= ';') goto yy241;
				if (yych <= '<') goto yy251;
				goto yy253;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy241;
				} else {
					if (yych <= '@') goto yy240;
					if (yych <= 'Z') goto yy254;
					goto yy257;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy241;
				} else {
					if (yych != '`') goto yy254;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy259;
					goto yy254;
				} else {
					if (yych <= '{') goto yy260;
					if (yych <= '|') goto yy241;
				}
			}
		}
	}
yy229:
	++YYCURSOR;
yy230:
#line 466 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1417 "src/parse/lex.cc"
yy231:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy231;
	}
#line 448 "../src/parse/lex.re"
	{ goto scan; }
#line 1427 "src/parse/lex.cc"
yy234:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy235:
#line 455 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1449 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy234;
	goto yy230;
yy237:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy267;
	if (yych == 'u') goto yy268;
	goto yy230;
yy238:
	++YYCURSOR;
#line 341 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1464 "src/parse/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy230;
		if (yych <= 'Z') goto yy269;
		goto yy230;
	} else {
		if (yych == '`') goto yy230;
		if (yych <= 'z') goto yy269;
		goto yy230;
	}
yy241:
	++YYCURSOR;
yy242:
#line 350 "../src/parse/lex.re"
	{ return *tok; }
#line 1481 "src/parse/lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy272;
	goto yy230;
yy244:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1490 "src/parse/lex.cc"
yy246:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy272;
	goto yy242;
yy247:
	++YYCURSOR;
#line 443 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1502 "src/parse/lex.cc"
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy274;
	if (yych == '/') goto yy276;
	goto yy242;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy278;
	goto yy230;
yy251:
	++YYCURSOR;
#line 333 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1516 "src/parse/lex.cc"
yy253:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy280;
	goto yy242;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy255:
	if (yybm[0+yych] & 32) {
		goto yy254;
	}
#line 399 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1553 "src/parse/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy282;
#line 342 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1559 "src/parse/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy284;
	goto yy255;
yy260:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy287;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy285;
		if (yych >= 'A') goto yy289;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy289;
		} else {
			if (yych <= '`') goto yy261;
			if (yych <= 'z') goto yy289;
		}
	}
yy261:
#line 325 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1584 "src/parse/lex.cc"
yy262:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy264:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy235;
			} else {
				goto yy230;
			}
		} else {
			if (yyaccept == 2) {
				goto yy242;
			} else {
				goto yy261;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy279;
			} else {
				goto yy286;
			}
		} else {
			if (yyaccept == 6) {
				goto yy306;
			} else {
				goto yy330;
			}
		}
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych == 'l') goto yy291;
		goto yy264;
	}
yy267:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy292;
	goto yy264;
yy268:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy293;
	goto yy264;
yy269:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy271;
		if (yych <= '9') goto yy269;
		if (yych >= 'A') goto yy269;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy269;
		} else {
			if (yych <= '`') goto yy271;
			if (yych <= 'z') goto yy269;
		}
	}
yy271:
#line 345 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1668 "src/parse/lex.cc"
yy272:
	++YYCURSOR;
#line 338 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1673 "src/parse/lex.cc"
yy274:
	++YYCURSOR;
#line 336 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1678 "src/parse/lex.cc"
yy276:
	++YYCURSOR;
#line 335 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1683 "src/parse/lex.cc"
yy278:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy280;
yy279:
#line 326 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1691 "src/parse/lex.cc"
yy280:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
			goto yy280;
		} else {
			if (yych == ' ') goto yy280;
			goto yy264;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy294;
			}
			if (yych <= '^') goto yy264;
			yyt1 = YYCURSOR;
			goto yy294;
		} else {
			if (yych <= '`') goto yy264;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy294;
			}
			goto yy264;
		}
	}
yy282:
	++YYCURSOR;
#line 343 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1726 "src/parse/lex.cc"
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy297;
	goto yy255;
yy285:
	++YYCURSOR;
yy286:
#line 382 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 1740 "src/parse/lex.cc"
yy287:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy287;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy298;
	}
	if (yych == '}') goto yy299;
	goto yy264;
yy289:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy264;
			goto yy289;
		} else {
			if (yych <= '@') goto yy264;
			if (yych <= 'Z') goto yy289;
			goto yy264;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy264;
			goto yy289;
		} else {
			if (yych == '}') goto yy301;
			goto yy264;
		}
	}
yy291:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy303;
	goto yy264;
yy292:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy304;
	goto yy264;
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy305;
	goto yy264;
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy296;
		if (yych <= '9') goto yy294;
		if (yych >= 'A') goto yy294;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy294;
		} else {
			if (yych <= '`') goto yy296;
			if (yych <= 'z') goto yy294;
		}
	}
yy296:
	p = yyt1;
#line 328 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1811 "src/parse/lex.cc"
yy297:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy307;
	goto yy255;
yy298:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy286;
	if (yych <= '9') goto yy308;
	if (yych == '}') goto yy310;
	goto yy286;
yy299:
	++YYCURSOR;
#line 352 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1834 "src/parse/lex.cc"
yy301:
	++YYCURSOR;
#line 388 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1846 "src/parse/lex.cc"
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy312;
	goto yy264;
yy304:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy313;
	goto yy264;
yy305:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy314;
yy306:
#line 437 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 1866 "src/parse/lex.cc"
yy307:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy315;
	goto yy255;
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy264;
	if (yych <= '9') goto yy308;
	if (yych == '}') goto yy317;
	goto yy264;
yy310:
	++YYCURSOR;
#line 373 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1890 "src/parse/lex.cc"
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy319;
	goto yy264;
yy313:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy320;
	goto yy264;
yy314:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy264;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy321;
		}
		goto yy264;
	} else {
		if (yych == '`') goto yy264;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy321;
		}
		goto yy264;
	}
yy315:
	++YYCURSOR;
#line 397 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1920 "src/parse/lex.cc"
yy317:
	++YYCURSOR;
	p = yyt1;
#line 361 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 1936 "src/parse/lex.cc"
yy319:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy324;
	if (yych <= '9') goto yy264;
	goto yy324;
yy320:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy325;
	goto yy264;
yy321:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy264;
			goto yy321;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy326;
			}
			goto yy264;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy321;
			if (yych <= '^') goto yy264;
			goto yy321;
		} else {
			if (yych <= '`') goto yy264;
			if (yych <= 'z') goto yy321;
			goto yy264;
		}
	}
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy324:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy323;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy323;
		if (yych <= '0') goto yy264;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy327;
		}
		goto yy264;
	}
yy325:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy329;
	goto yy264;
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy331;
	if (yych == '\r') goto yy333;
	goto yy264;
yy327:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
			goto yy334;
		} else {
			if (yych <= '\n') goto yy336;
			if (yych <= '\f') goto yy264;
			goto yy338;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy264;
			goto yy334;
		} else {
			if (yych <= '/') goto yy264;
			if (yych <= '9') goto yy327;
			goto yy264;
		}
	}
yy329:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy339;
	if (yych == ' ') goto yy339;
yy330:
#line 426 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2033 "src/parse/lex.cc"
yy331:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 432 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2044 "src/parse/lex.cc"
yy333:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy331;
	goto yy264;
yy334:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy334;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy334;
		if (yych == '"') goto yy341;
		goto yy264;
	}
yy336:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 450 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2069 "src/parse/lex.cc"
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy336;
	goto yy264;
yy339:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy339;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy339;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy343;
		}
		goto yy264;
	}
yy341:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy341;
	}
	if (yych <= '\n') goto yy264;
	if (yych <= '"') goto yy345;
	goto yy346;
yy343:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy264;
		if (yych == '\n') goto yy264;
		goto yy343;
	} else {
		if (yych <= '"') goto yy347;
		if (yych == '\\') goto yy348;
		goto yy343;
	}
yy345:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy336;
	if (yych == '\r') goto yy338;
	goto yy264;
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy264;
	if (yych == '\n') goto yy264;
	goto yy341;
yy347:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy349;
		}
		goto yy264;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy349;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy351;
		}
		goto yy264;
	}
yy348:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy264;
	if (yych == '\n') goto yy264;
	goto yy343;
yy349:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy349;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy349;
		if (yych != ';') goto yy264;
	}
yy351:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy352;
	if (yych == '\r') goto yy354;
	goto yy264;
yy352:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 422 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2175 "src/parse/lex.cc"
yy354:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy352;
	goto yy264;
}
#line 470 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2188 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy358;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy358;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy361;
		}
	}
yy357:
#line 477 "../src/parse/lex.re"
	{ return false; }
#line 2245 "src/parse/lex.cc"
yy358:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy358;
	}
	if (yych == '=') goto yy361;
yy360:
	YYCURSOR = YYMARKER;
	goto yy357;
yy361:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy360;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 476 "../src/parse/lex.re"
	{ return true; }
#line 2264 "src/parse/lex.cc"
}
#line 478 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2273 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy367;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy367;
	}
#line 486 "../src/parse/lex.re"
	{ return false; }
#line 2322 "src/parse/lex.cc"
yy367:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy367;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy370;
	} else {
		if (yych <= '=') goto yy370;
		if (yych == '{') goto yy370;
	}
	YYCURSOR = yyt1;
#line 485 "../src/parse/lex.re"
	{ return true; }
#line 2339 "src/parse/lex.cc"
yy370:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 484 "../src/parse/lex.re"
	{ return false; }
#line 2345 "src/parse/lex.cc"
}
#line 487 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2356 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy372;
yy373:
	++YYCURSOR;
yy372:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy373;
	}
	if (yych <= 0x1F) goto yy375;
	if (yych <= '!') goto yy376;
	if (yych == '>') goto yy379;
yy375:
#line 497 "../src/parse/lex.re"
	{ goto cond; }
#line 2408 "src/parse/lex.cc"
yy376:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy376;
	if (yych == ' ') goto yy376;
#line 495 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2417 "src/parse/lex.cc"
yy379:
	++YYCURSOR;
#line 496 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2422 "src/parse/lex.cc"
}
#line 498 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2429 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy385;
		if (yych >= 'A') goto yy387;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy387;
		} else {
			if (yych <= '`') goto yy383;
			if (yych <= 'z') goto yy387;
		}
	}
yy383:
	++YYCURSOR;
#line 504 "../src/parse/lex.re"
	{ goto error; }
#line 2483 "src/parse/lex.cc"
yy385:
	++YYCURSOR;
#line 503 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2488 "src/parse/lex.cc"
yy387:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy387;
	}
#line 502 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2498 "src/parse/lex.cc"
}
#line 505 "../src/parse/lex.re"

next:

#line 2504 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy394;
		if (yych >= ' ') goto yy394;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy395;
		} else {
			if (yych == '>') goto yy398;
		}
	}
	++YYCURSOR;
yy393:
#line 510 "../src/parse/lex.re"
	{ goto error; }
#line 2557 "src/parse/lex.cc"
yy394:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy400;
		if (yych <= 0x1F) goto yy393;
		goto yy400;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy393;
		} else {
			if (yych == '>') goto yy398;
			goto yy393;
		}
	}
yy395:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy395;
	}
#line 508 "../src/parse/lex.re"
	{ goto cond; }
#line 2581 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
#line 509 "../src/parse/lex.re"
	{ goto end; }
#line 2586 "src/parse/lex.cc"
yy400:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy400;
		if (yych >= ' ') goto yy400;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy395;
		} else {
			if (yych == '>') goto yy398;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy393;
}
#line 511 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2621 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy405;
			if (yych == '\n') goto yy409;
			goto yy407;
		} else {
			if (yych <= '\r') goto yy411;
			if (yych == '"') goto yy412;
			goto yy407;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy412;
			if (yych == '/') goto yy414;
			goto yy407;
		} else {
			if (yych == '|') goto yy407;
			if (yych <= '}') goto yy415;
			goto yy407;
		}
	}
yy405:
	++YYCURSOR;
#line 537 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2651 "src/parse/lex.cc"
yy407:
	++YYCURSOR;
yy408:
#line 545 "../src/parse/lex.re"
	{ goto code; }
#line 2657 "src/parse/lex.cc"
yy409:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy410;
		if (yych <= '\n') goto yy417;
	} else {
		if (yych <= '\r') goto yy417;
		if (yych == ' ') goto yy417;
	}
yy410:
#line 528 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2677 "src/parse/lex.cc"
yy411:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy409;
	goto yy408;
yy412:
	++YYCURSOR;
#line 544 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2686 "src/parse/lex.cc"
yy414:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy419;
	if (yych == '/') goto yy421;
	goto yy408;
yy415:
	++YYCURSOR;
#line 538 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2699 "src/parse/lex.cc"
yy417:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 527 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2705 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
#line 542 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2710 "src/parse/lex.cc"
yy421:
	++YYCURSOR;
#line 543 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2715 "src/parse/lex.cc"
}
#line 546 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 2727 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy425;
			if (yych == '\n') goto yy429;
			goto yy427;
		} else {
			if (yych <= '\r') goto yy431;
			if (yych == '"') goto yy432;
			goto yy427;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy432;
			if (yych == '/') goto yy434;
			goto yy427;
		} else {
			if (yych <= '{') goto yy435;
			if (yych == '}') goto yy437;
			goto yy427;
		}
	}
yy425:
	++YYCURSOR;
#line 566 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2791 "src/parse/lex.cc"
yy427:
	++YYCURSOR;
yy428:
#line 570 "../src/parse/lex.re"
	{ goto code; }
#line 2797 "src/parse/lex.cc"
yy429:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy439;
	}
	if (yych == '#') goto yy442;
yy430:
#line 565 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2807 "src/parse/lex.cc"
yy431:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy429;
	goto yy428;
yy432:
	++YYCURSOR;
#line 569 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2816 "src/parse/lex.cc"
yy434:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy444;
	if (yych == '/') goto yy446;
	goto yy428;
yy435:
	++YYCURSOR;
#line 563 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2826 "src/parse/lex.cc"
yy437:
	++YYCURSOR;
#line 555 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2837 "src/parse/lex.cc"
yy439:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy439;
	}
	if (yych == '#') goto yy442;
yy441:
	YYCURSOR = YYMARKER;
	goto yy430;
yy442:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy442;
		goto yy441;
	} else {
		if (yych <= ' ') goto yy442;
		if (yych == 'l') goto yy448;
		goto yy441;
	}
yy444:
	++YYCURSOR;
#line 567 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2865 "src/parse/lex.cc"
yy446:
	++YYCURSOR;
#line 568 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2870 "src/parse/lex.cc"
yy448:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy441;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy441;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy441;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy453;
	if (yych <= '9') goto yy441;
	goto yy453;
yy452:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy453:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy452;
		goto yy441;
	} else {
		if (yych <= ' ') goto yy452;
		if (yych <= '0') goto yy441;
		if (yych >= ':') goto yy441;
		yyt1 = YYCURSOR;
	}
yy454:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy454;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy441;
		if (yych <= '\t') goto yy456;
		if (yych <= '\n') goto yy458;
		goto yy441;
	} else {
		if (yych <= '\r') goto yy460;
		if (yych != ' ') goto yy441;
	}
yy456:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy456;
		goto yy441;
	} else {
		if (yych <= ' ') goto yy456;
		if (yych == '"') goto yy461;
		goto yy441;
	}
yy458:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 564 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2929 "src/parse/lex.cc"
yy460:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy458;
	goto yy441;
yy461:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy461;
	}
	if (yych <= '\n') goto yy441;
	if (yych >= '#') goto yy464;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy458;
	if (yych == '\r') goto yy460;
	goto yy441;
yy464:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy441;
	if (yych == '\n') goto yy441;
	goto yy461;
}
#line 571 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2963 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy467;
			if (yych <= '\t') goto yy469;
			goto yy471;
		} else {
			if (yych == '\r') goto yy473;
			goto yy469;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy474;
			if (yych <= '&') goto yy469;
			goto yy474;
		} else {
			if (yych == '\\') goto yy476;
			goto yy469;
		}
	}
yy467:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2991 "src/parse/lex.cc"
yy469:
	++YYCURSOR;
yy470:
#line 582 "../src/parse/lex.re"
	{ goto loop; }
#line 2997 "src/parse/lex.cc"
yy471:
	++YYCURSOR;
#line 580 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3002 "src/parse/lex.cc"
yy473:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy471;
	goto yy470;
yy474:
	++YYCURSOR;
#line 578 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3011 "src/parse/lex.cc"
yy476:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy470;
	} else {
		if (yych <= '\'') goto yy477;
		if (yych != '\\') goto yy470;
	}
yy477:
	++YYCURSOR;
#line 579 "../src/parse/lex.re"
	{ goto loop; }
#line 3024 "src/parse/lex.cc"
}
#line 583 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3034 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy481;
		if (yych == '\n') goto yy485;
		goto yy483;
	} else {
		if (yych <= '\r') goto yy487;
		if (yych == '*') goto yy488;
		goto yy483;
	}
yy481:
	++YYCURSOR;
#line 592 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3052 "src/parse/lex.cc"
yy483:
	++YYCURSOR;
yy484:
#line 593 "../src/parse/lex.re"
	{ goto loop; }
#line 3058 "src/parse/lex.cc"
yy485:
	++YYCURSOR;
#line 591 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3063 "src/parse/lex.cc"
yy487:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy485;
	goto yy484;
yy488:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy484;
	++YYCURSOR;
#line 590 "../src/parse/lex.re"
	{ return; }
#line 3074 "src/parse/lex.cc"
}
#line 594 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3084 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy493;
		if (yych <= '\t') goto yy495;
		goto yy497;
	} else {
		if (yych == '\r') goto yy499;
		goto yy495;
	}
yy493:
	++YYCURSOR;
#line 602 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3101 "src/parse/lex.cc"
yy495:
	++YYCURSOR;
yy496:
#line 603 "../src/parse/lex.re"
	{ goto loop; }
#line 3107 "src/parse/lex.cc"
yy497:
	++YYCURSOR;
#line 601 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3112 "src/parse/lex.cc"
yy499:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy497;
	goto yy496;
}
#line 604 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3131 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy503;
#line 617 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3139 "src/parse/lex.cc"
yy503:
	++YYCURSOR;
#line 616 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3144 "src/parse/lex.cc"
}
#line 618 "../src/parse/lex.re"

snd:

#line 3150 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy508;
yy507:
#line 621 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3159 "src/parse/lex.cc"
yy508:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy510;
	YYCURSOR = YYMARKER;
	goto yy507;
yy510:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 622 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3177 "src/parse/lex.cc"
}
#line 630 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 667 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3195 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy514;
		if (yych == '\n') goto yy518;
		goto yy516;
	} else {
		if (yych <= '\r') goto yy520;
		if (yych == '\\') goto yy521;
		goto yy516;
	}
yy514:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3214 "src/parse/lex.cc"
yy516:
	++YYCURSOR;
yy517:
#line 650 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3220 "src/parse/lex.cc"
yy518:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3225 "src/parse/lex.cc"
yy520:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy518;
	goto yy517;
yy521:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy522;
				if (yych == '\n') goto yy518;
				goto yy523;
			} else {
				if (yych <= '\r') goto yy525;
				if (yych == '-') goto yy526;
				goto yy523;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy528;
				if (yych <= '7') goto yy530;
				if (yych <= 'T') goto yy523;
				goto yy531;
			} else {
				if (yych == 'X') goto yy533;
				if (yych <= '[') goto yy523;
				goto yy534;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy536;
				if (yych <= '`') goto yy523;
				if (yych <= 'a') goto yy538;
				goto yy540;
			} else {
				if (yych == 'f') goto yy542;
				if (yych <= 'm') goto yy523;
				goto yy544;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy546;
				if (yych <= 's') goto yy523;
				goto yy548;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy533;
					goto yy550;
				} else {
					if (yych == 'x') goto yy552;
					goto yy523;
				}
			}
		}
	}
yy522:
#line 645 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3286 "src/parse/lex.cc"
yy523:
	++YYCURSOR;
yy524:
#line 663 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3295 "src/parse/lex.cc"
yy525:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy518;
	goto yy524;
yy526:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3304 "src/parse/lex.cc"
yy528:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy529;
	if (yych <= '7') goto yy553;
yy529:
#line 644 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3313 "src/parse/lex.cc"
yy530:
	++YYCURSOR;
	goto yy529;
yy531:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy532;
		if (yych <= '9') goto yy555;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy532;
		if (yych <= 'f') goto yy555;
	}
yy532:
#line 643 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3331 "src/parse/lex.cc"
yy533:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy532;
		if (yych <= '9') goto yy556;
		goto yy532;
	} else {
		if (yych <= 'F') goto yy556;
		if (yych <= '`') goto yy532;
		if (yych <= 'f') goto yy556;
		goto yy532;
	}
yy534:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3349 "src/parse/lex.cc"
yy536:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3354 "src/parse/lex.cc"
yy538:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3359 "src/parse/lex.cc"
yy540:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3364 "src/parse/lex.cc"
yy542:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3369 "src/parse/lex.cc"
yy544:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3374 "src/parse/lex.cc"
yy546:
	++YYCURSOR;
#line 657 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3379 "src/parse/lex.cc"
yy548:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3384 "src/parse/lex.cc"
yy550:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3389 "src/parse/lex.cc"
yy552:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy532;
		if (yych <= '9') goto yy557;
		goto yy532;
	} else {
		if (yych <= 'F') goto yy557;
		if (yych <= '`') goto yy532;
		if (yych <= 'f') goto yy557;
		goto yy532;
	}
yy553:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy554;
	if (yych <= '7') goto yy558;
yy554:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy529;
	} else {
		goto yy532;
	}
yy555:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy560;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy560;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy560;
		goto yy554;
	}
yy556:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy561;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy561;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy561;
		goto yy554;
	}
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy562;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy562;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy562;
		goto yy554;
	}
yy558:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3454 "src/parse/lex.cc"
yy560:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy564;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy564;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy564;
		goto yy554;
	}
yy561:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy557;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy557;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy557;
		goto yy554;
	}
yy562:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3483 "src/parse/lex.cc"
yy564:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych >= ':') goto yy554;
	} else {
		if (yych <= 'F') goto yy565;
		if (yych <= '`') goto yy554;
		if (yych >= 'g') goto yy554;
	}
yy565:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy554;
		if (yych <= '9') goto yy556;
		goto yy554;
	} else {
		if (yych <= 'F') goto yy556;
		if (yych <= '`') goto yy554;
		if (yych <= 'f') goto yy556;
		goto yy554;
	}
}
#line 669 "../src/parse/lex.re"

    }
    else {
        
#line 3512 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy568;
			if (yych == '\n') goto yy572;
			goto yy570;
		} else {
			if (yych <= '\r') goto yy574;
			if (yych == '\\') goto yy575;
			goto yy570;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy577;
			if (yych <= 0xDF) goto yy579;
			if (yych <= 0xE0) goto yy580;
			goto yy581;
		} else {
			if (yych <= 0xF0) goto yy582;
			if (yych <= 0xF3) goto yy583;
			if (yych <= 0xF4) goto yy584;
			goto yy577;
		}
	}
yy568:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3545 "src/parse/lex.cc"
yy570:
	++YYCURSOR;
yy571:
#line 650 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3551 "src/parse/lex.cc"
yy572:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3556 "src/parse/lex.cc"
yy574:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy572;
	goto yy571;
yy575:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy585;
				} else {
					if (yych <= '\n') goto yy572;
					if (yych <= '\f') goto yy585;
					goto yy587;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy585;
					goto yy588;
				} else {
					if (yych <= '/') goto yy585;
					if (yych <= '3') goto yy590;
					goto yy592;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy585;
					goto yy593;
				} else {
					if (yych == 'X') goto yy595;
					goto yy585;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy596;
					goto yy598;
				} else {
					if (yych <= '`') goto yy585;
					if (yych <= 'a') goto yy600;
					goto yy602;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy585;
					goto yy604;
				} else {
					if (yych == 'n') goto yy606;
					goto yy585;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy608;
					goto yy585;
				} else {
					if (yych <= 't') goto yy610;
					if (yych <= 'u') goto yy595;
					goto yy612;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy585;
					goto yy614;
				} else {
					if (yych <= 0x7F) goto yy585;
					if (yych >= 0xC2) goto yy615;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy617;
					if (yych <= 0xEF) goto yy618;
					goto yy619;
				} else {
					if (yych <= 0xF3) goto yy620;
					if (yych <= 0xF4) goto yy621;
				}
			}
		}
	}
yy576:
#line 645 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3648 "src/parse/lex.cc"
yy577:
	++YYCURSOR;
yy578:
#line 646 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3654 "src/parse/lex.cc"
yy579:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy570;
	goto yy578;
yy580:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy578;
	if (yych <= 0xBF) goto yy622;
	goto yy578;
yy581:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy622;
	goto yy578;
yy582:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy578;
	if (yych <= 0xBF) goto yy623;
	goto yy578;
yy583:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0xBF) goto yy623;
	goto yy578;
yy584:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy578;
	if (yych <= 0x8F) goto yy623;
	goto yy578;
yy585:
	++YYCURSOR;
yy586:
#line 663 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3698 "src/parse/lex.cc"
yy587:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy572;
	goto yy586;
yy588:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3707 "src/parse/lex.cc"
yy590:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy591;
	if (yych <= '7') goto yy624;
yy591:
#line 644 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3716 "src/parse/lex.cc"
yy592:
	++YYCURSOR;
	goto yy591;
yy593:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy625;
	} else {
		if (yych <= 'F') goto yy625;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy625;
	}
yy594:
#line 643 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3734 "src/parse/lex.cc"
yy595:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy626;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy626;
		goto yy594;
	}
yy596:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3752 "src/parse/lex.cc"
yy598:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3757 "src/parse/lex.cc"
yy600:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3762 "src/parse/lex.cc"
yy602:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3767 "src/parse/lex.cc"
yy604:
	++YYCURSOR;
#line 655 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3772 "src/parse/lex.cc"
yy606:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3777 "src/parse/lex.cc"
yy608:
	++YYCURSOR;
#line 657 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3782 "src/parse/lex.cc"
yy610:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3787 "src/parse/lex.cc"
yy612:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3792 "src/parse/lex.cc"
yy614:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy594;
		if (yych <= '9') goto yy627;
		goto yy594;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy594;
		if (yych <= 'f') goto yy627;
		goto yy594;
	}
yy615:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0xBF) goto yy585;
yy616:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy576;
		} else {
			goto yy578;
		}
	} else {
		if (yyaccept == 2) {
			goto yy591;
		} else {
			goto yy594;
		}
	}
yy617:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy616;
	if (yych <= 0xBF) goto yy615;
	goto yy616;
yy618:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0xBF) goto yy615;
	goto yy616;
yy619:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy616;
	if (yych <= 0xBF) goto yy618;
	goto yy616;
yy620:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0xBF) goto yy618;
	goto yy616;
yy621:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0x8F) goto yy618;
	goto yy616;
yy622:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0xBF) goto yy570;
	goto yy616;
yy623:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy616;
	if (yych <= 0xBF) goto yy622;
	goto yy616;
yy624:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy616;
	if (yych <= '7') goto yy628;
	goto yy616;
yy625:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy630;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy630;
		goto yy616;
	}
yy626:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy631;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy631;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy631;
		goto yy616;
	}
yy627:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy632;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy632;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy632;
		goto yy616;
	}
yy628:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3905 "src/parse/lex.cc"
yy630:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy634;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy634;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy634;
		goto yy616;
	}
yy631:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy627;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy627;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy627;
		goto yy616;
	}
yy632:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3934 "src/parse/lex.cc"
yy634:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych >= ':') goto yy616;
	} else {
		if (yych <= 'F') goto yy635;
		if (yych <= '`') goto yy616;
		if (yych >= 'g') goto yy616;
	}
yy635:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy616;
		if (yych <= '9') goto yy626;
		goto yy616;
	} else {
		if (yych <= 'F') goto yy626;
		if (yych <= '`') goto yy616;
		if (yych <= 'f') goto yy626;
		goto yy616;
	}
}
#line 672 "../src/parse/lex.re"
 #line 672 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 706 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3973 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy638;
		if (yych == '\n') goto yy642;
		goto yy640;
	} else {
		if (yych <= '\r') goto yy644;
		if (yych == '\\') goto yy645;
		goto yy640;
	}
yy638:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3992 "src/parse/lex.cc"
yy640:
	++YYCURSOR;
yy641:
#line 690 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3998 "src/parse/lex.cc"
yy642:
	++YYCURSOR;
#line 682 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4003 "src/parse/lex.cc"
yy644:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy642;
	goto yy641;
yy645:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy646;
				if (yych <= '\t') goto yy647;
				goto yy642;
			} else {
				if (yych == '\r') goto yy649;
				if (yych <= '/') goto yy647;
				goto yy650;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy652;
				if (yych == 'U') goto yy653;
				goto yy647;
			} else {
				if (yych <= 'X') goto yy655;
				if (yych == '\\') goto yy656;
				goto yy647;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy658;
				if (yych <= 'b') goto yy660;
				goto yy647;
			} else {
				if (yych <= 'f') goto yy662;
				if (yych == 'n') goto yy664;
				goto yy647;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy666;
				if (yych <= 's') goto yy647;
				if (yych <= 't') goto yy668;
				goto yy655;
			} else {
				if (yych <= 'v') goto yy670;
				if (yych == 'x') goto yy672;
				goto yy647;
			}
		}
	}
yy646:
#line 685 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4059 "src/parse/lex.cc"
yy647:
	++YYCURSOR;
yy648:
#line 701 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4069 "src/parse/lex.cc"
yy649:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy642;
	goto yy648;
yy650:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy651;
	if (yych <= '7') goto yy673;
yy651:
#line 684 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4082 "src/parse/lex.cc"
yy652:
	++YYCURSOR;
	goto yy651;
yy653:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy675;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy675;
	}
yy654:
#line 683 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4100 "src/parse/lex.cc"
yy655:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy676;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy676;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy676;
		goto yy654;
	}
yy656:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4118 "src/parse/lex.cc"
yy658:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4123 "src/parse/lex.cc"
yy660:
	++YYCURSOR;
#line 694 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4128 "src/parse/lex.cc"
yy662:
	++YYCURSOR;
#line 695 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4133 "src/parse/lex.cc"
yy664:
	++YYCURSOR;
#line 696 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4138 "src/parse/lex.cc"
yy666:
	++YYCURSOR;
#line 697 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4143 "src/parse/lex.cc"
yy668:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4148 "src/parse/lex.cc"
yy670:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4153 "src/parse/lex.cc"
yy672:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy654;
		if (yych <= '9') goto yy677;
		goto yy654;
	} else {
		if (yych <= 'F') goto yy677;
		if (yych <= '`') goto yy654;
		if (yych <= 'f') goto yy677;
		goto yy654;
	}
yy673:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy674;
	if (yych <= '7') goto yy678;
yy674:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy651;
	} else {
		goto yy654;
	}
yy675:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy680;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy680;
		goto yy674;
	}
yy676:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy681;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy681;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy681;
		goto yy674;
	}
yy677:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy682;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy682;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy682;
		goto yy674;
	}
yy678:
	++YYCURSOR;
#line 692 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4218 "src/parse/lex.cc"
yy680:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy684;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy684;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy684;
		goto yy674;
	}
yy681:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy677;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy677;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy677;
		goto yy674;
	}
yy682:
	++YYCURSOR;
#line 691 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4247 "src/parse/lex.cc"
yy684:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych >= ':') goto yy674;
	} else {
		if (yych <= 'F') goto yy685;
		if (yych <= '`') goto yy674;
		if (yych >= 'g') goto yy674;
	}
yy685:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy674;
		if (yych <= '9') goto yy676;
		goto yy674;
	} else {
		if (yych <= 'F') goto yy676;
		if (yych <= '`') goto yy674;
		if (yych <= 'f') goto yy676;
		goto yy674;
	}
}
#line 708 "../src/parse/lex.re"

    }
    else {
        
#line 4276 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy688;
			if (yych == '\n') goto yy692;
			goto yy690;
		} else {
			if (yych <= '\r') goto yy694;
			if (yych == '\\') goto yy695;
			goto yy690;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy697;
			if (yych <= 0xDF) goto yy699;
			if (yych <= 0xE0) goto yy700;
			goto yy701;
		} else {
			if (yych <= 0xF0) goto yy702;
			if (yych <= 0xF3) goto yy703;
			if (yych <= 0xF4) goto yy704;
			goto yy697;
		}
	}
yy688:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4309 "src/parse/lex.cc"
yy690:
	++YYCURSOR;
yy691:
#line 690 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4315 "src/parse/lex.cc"
yy692:
	++YYCURSOR;
#line 682 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4320 "src/parse/lex.cc"
yy694:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy692;
	goto yy691;
yy695:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy696;
				if (yych == '\n') goto yy692;
				goto yy705;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy707;
					goto yy705;
				} else {
					if (yych <= '3') goto yy708;
					if (yych <= '7') goto yy710;
					goto yy705;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy711;
					goto yy705;
				} else {
					if (yych <= 'X') goto yy713;
					if (yych <= '[') goto yy705;
					goto yy714;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy705;
					goto yy716;
				} else {
					if (yych <= 'b') goto yy718;
					if (yych <= 'e') goto yy705;
					goto yy720;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy722;
				if (yych <= 'q') goto yy705;
				goto yy724;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy705;
					goto yy726;
				} else {
					if (yych <= 'u') goto yy713;
					if (yych <= 'v') goto yy728;
					goto yy705;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy730;
					goto yy705;
				} else {
					if (yych <= 0xC1) goto yy696;
					if (yych <= 0xDF) goto yy731;
					goto yy733;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy734;
					goto yy735;
				} else {
					if (yych <= 0xF3) goto yy736;
					if (yych <= 0xF4) goto yy737;
				}
			}
		}
	}
yy696:
#line 685 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4405 "src/parse/lex.cc"
yy697:
	++YYCURSOR;
yy698:
#line 686 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4411 "src/parse/lex.cc"
yy699:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy690;
	goto yy698;
yy700:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy698;
	if (yych <= 0xBF) goto yy738;
	goto yy698;
yy701:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy738;
	goto yy698;
yy702:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy698;
	if (yych <= 0xBF) goto yy739;
	goto yy698;
yy703:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0xBF) goto yy739;
	goto yy698;
yy704:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy698;
	if (yych <= 0x8F) goto yy739;
	goto yy698;
yy705:
	++YYCURSOR;
yy706:
#line 701 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4456 "src/parse/lex.cc"
yy707:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy692;
	goto yy706;
yy708:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy709;
	if (yych <= '7') goto yy740;
yy709:
#line 684 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4469 "src/parse/lex.cc"
yy710:
	++YYCURSOR;
	goto yy709;
yy711:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy741;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy741;
	}
yy712:
#line 683 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4487 "src/parse/lex.cc"
yy713:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy742;
		goto yy712;
	} else {
		if (yych <= 'F') goto yy742;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy742;
		goto yy712;
	}
yy714:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4505 "src/parse/lex.cc"
yy716:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4510 "src/parse/lex.cc"
yy718:
	++YYCURSOR;
#line 694 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4515 "src/parse/lex.cc"
yy720:
	++YYCURSOR;
#line 695 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4520 "src/parse/lex.cc"
yy722:
	++YYCURSOR;
#line 696 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4525 "src/parse/lex.cc"
yy724:
	++YYCURSOR;
#line 697 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4530 "src/parse/lex.cc"
yy726:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4535 "src/parse/lex.cc"
yy728:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4540 "src/parse/lex.cc"
yy730:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy712;
		if (yych <= '9') goto yy743;
		goto yy712;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy712;
		if (yych <= 'f') goto yy743;
		goto yy712;
	}
yy731:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy705;
yy732:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy696;
		} else {
			goto yy698;
		}
	} else {
		if (yyaccept == 2) {
			goto yy709;
		} else {
			goto yy712;
		}
	}
yy733:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy732;
	if (yych <= 0xBF) goto yy731;
	goto yy732;
yy734:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy731;
	goto yy732;
yy735:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy732;
	if (yych <= 0xBF) goto yy734;
	goto yy732;
yy736:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy734;
	goto yy732;
yy737:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0x8F) goto yy734;
	goto yy732;
yy738:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy690;
	goto yy732;
yy739:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy738;
	goto yy732;
yy740:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy732;
	if (yych <= '7') goto yy744;
	goto yy732;
yy741:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy746;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy746;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy746;
		goto yy732;
	}
yy742:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy747;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy747;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy747;
		goto yy732;
	}
yy743:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy748;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy748;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy748;
		goto yy732;
	}
yy744:
	++YYCURSOR;
#line 692 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4653 "src/parse/lex.cc"
yy746:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy750;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy750;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy750;
		goto yy732;
	}
yy747:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy743;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy743;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy743;
		goto yy732;
	}
yy748:
	++YYCURSOR;
#line 691 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4682 "src/parse/lex.cc"
yy750:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych >= ':') goto yy732;
	} else {
		if (yych <= 'F') goto yy751;
		if (yych <= '`') goto yy732;
		if (yych >= 'g') goto yy732;
	}
yy751:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy732;
		if (yych <= '9') goto yy742;
		goto yy732;
	} else {
		if (yych <= 'F') goto yy742;
		if (yych <= '`') goto yy732;
		if (yych <= 'f') goto yy742;
		goto yy732;
	}
}
#line 711 "../src/parse/lex.re"
 #line 711 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 4730 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy756;
		} else {
			if (yych <= '\n') goto yy758;
			if (yych <= '\f') goto yy756;
			goto yy760;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy756;
			goto yy761;
		} else {
			if (yych <= '0') goto yy756;
			if (yych <= '9') goto yy762;
			goto yy756;
		}
	}
	++YYCURSOR;
#line 754 "../src/parse/lex.re"
	{ --cur; return; }
#line 4790 "src/parse/lex.cc"
yy756:
	++YYCURSOR;
yy757:
#line 755 "../src/parse/lex.re"
	{ goto sourceline; }
#line 4796 "src/parse/lex.cc"
yy758:
	++YYCURSOR;
#line 753 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 4801 "src/parse/lex.cc"
yy760:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy758;
	goto yy757;
yy761:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy757;
	if (yych == '\n') goto yy757;
	goto yy766;
yy762:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy762;
	}
#line 733 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 4828 "src/parse/lex.cc"
yy765:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy766:
	if (yybm[0+yych] & 128) {
		goto yy765;
	}
	if (yych <= '\n') goto yy767;
	if (yych <= '"') goto yy768;
	goto yy770;
yy767:
	YYCURSOR = YYMARKER;
	goto yy757;
yy768:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 4855 "src/parse/lex.cc"
yy770:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy767;
	if (yych == '\n') goto yy767;
	goto yy765;
}
#line 756 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
