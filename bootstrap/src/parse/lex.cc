/* Generated by re2c 2.1.1 on Sun May 23 18:49:14 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 61 "../src/parse/lex.re"


#line 120 "../src/parse/lex.re"


static inline void save_string(std::string &str, const char *s, const char *e)
{
    if (s == NULL) {
        str.clear();
    } else {
        str.assign(s, e);
    }
}

Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 68 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  80,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 80,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  64,  64,  64,  64,  64,  64, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,   0,  64,  64, 192, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 236 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 134 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 256 "../src/parse/lex.re"
	{ goto loop; }
#line 140 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 251 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 154 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		if (yyaccept == 2) {
			yyt1 = yyt2 = NULL;
			goto yy123;
		} else {
			yyt1 = yyt2 = NULL;
			goto yy142;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 212 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 244 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 515 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 167 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 655 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy133;
	yyt1 = yyt2 = NULL;
yy123:
	x = yyt1;
	y = yyt2;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Reuse;
    }
#line 690 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy134;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy136;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy137;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy138;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy139;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy141;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy143;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy145;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	}
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy149;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy150;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy153;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy154;
	goto yy13;
yy139:
	++YYCURSOR;
#line 208 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 772 "src/parse/lex.cc"
yy141:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy155;
	yyt1 = yyt2 = NULL;
yy142:
	x = yyt1;
	y = yyt2;
#line 149 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Rules;
    }
#line 787 "src/parse/lex.cc"
yy143:
	++YYCURSOR;
#line 202 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 796 "src/parse/lex.cc"
yy145:
	++YYCURSOR;
#line 191 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 810 "src/parse/lex.cc"
yy147:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy147;
	}
	yyt2 = YYCURSOR;
	goto yy123;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy156;
	goto yy13;
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy157;
	goto yy13;
yy151:
	++YYCURSOR;
#line 161 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto next;
    }
#line 836 "src/parse/lex.cc"
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy159;
	goto yy13;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	}
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy164;
	goto yy13;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy166;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy167;
	goto yy13;
yy160:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		if (yych <= '9') goto yy160;
		if (yych <= '@') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		goto yy160;
	} else {
		if (yych <= '_') {
			if (yych <= '^') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			goto yy160;
		} else {
			if (yych <= '`') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			if (yych <= 'z') goto yy160;
			yyt2 = YYCURSOR;
			goto yy142;
		}
	}
yy162:
	++YYCURSOR;
#line 181 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 922 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy168;
	if (yych == 'n') goto yy169;
	goto yy13;
yy165:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy166:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy165;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy165;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy171;
		}
		goto yy13;
	}
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy173;
	goto yy13;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy175;
	goto yy13;
yy169:
	++YYCURSOR;
#line 214 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 962 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy171;
	} else {
		if (yych <= '"') goto yy177;
		if (yych == '\\') goto yy178;
		goto yy171;
	}
yy173:
	++YYCURSOR;
#line 174 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 985 "src/parse/lex.cc"
yy175:
	++YYCURSOR;
#line 222 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 996 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy179;
		}
		goto yy13;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy179;
		}
		if (yych == '*') {
			yyt2 = YYCURSOR;
			goto yy181;
		}
		goto yy13;
	}
yy178:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy171;
yy179:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy179;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy179;
		if (yych != '*') goto yy13;
	}
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy13;
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 230 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1046 "src/parse/lex.cc"
}
#line 257 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out)
{
    bool multiline = false;
loop:

#line 1057 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy186;
		if (yych == '\n') goto yy190;
		goto yy188;
	} else {
		if (yych <= '\r') goto yy192;
		if (yych == '*') goto yy193;
		goto yy188;
	}
yy186:
	++YYCURSOR;
#line 266 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 1078 "src/parse/lex.cc"
yy188:
	++YYCURSOR;
yy189:
#line 265 "../src/parse/lex.re"
	{ goto loop; }
#line 1084 "src/parse/lex.cc"
yy190:
	++YYCURSOR;
#line 270 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 1093 "src/parse/lex.cc"
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy190;
	goto yy189;
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy189;
	++YYCURSOR;
#line 275 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1109 "src/parse/lex.cc"
}
#line 281 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1121 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy200;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy203;
		} else {
			if (yych == '\r') goto yy205;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy206;
			if (yych >= 'f') goto yy207;
		} else {
			if (yych == 's') goto yy208;
		}
	}
	++YYCURSOR;
yy199:
#line 290 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1184 "src/parse/lex.cc"
yy200:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy200;
	}
#line 302 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1196 "src/parse/lex.cc"
yy203:
	++YYCURSOR;
#line 305 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1204 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy203;
	goto yy199;
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy209;
	goto yy199;
yy207:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy211;
	goto yy199;
yy208:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy213;
	goto yy199;
yy209:
	++YYCURSOR;
#line 309 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1230 "src/parse/lex.cc"
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy214;
yy212:
	YYCURSOR = YYMARKER;
	goto yy199;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy215;
	goto yy212;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy216;
	goto yy212;
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy217;
	goto yy212;
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy218;
	goto yy212;
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy219;
	goto yy212;
yy218:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy220;
	goto yy212;
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy222;
	goto yy212;
yy220:
	++YYCURSOR;
#line 294 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1272 "src/parse/lex.cc"
yy222:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy212;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy212;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy212;
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1286 "src/parse/lex.cc"
}
#line 315 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1299 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy231;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy229;
				if (yych <= '\n') goto yy234;
				if (yych >= '\r') goto yy236;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy237;
				} else {
					if (yych <= '"') goto yy238;
					if (yych <= '#') goto yy240;
					goto yy241;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy243;
				} else {
					if (yych <= '\'') goto yy244;
					if (yych <= ')') goto yy241;
					goto yy246;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy241;
				} else {
					if (yych <= '.') goto yy247;
					if (yych <= '/') goto yy249;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy250;
				if (yych <= ';') goto yy241;
				if (yych <= '<') goto yy251;
				goto yy253;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy241;
				} else {
					if (yych <= '@') goto yy240;
					if (yych <= 'Z') goto yy254;
					goto yy257;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy241;
				} else {
					if (yych != '`') goto yy254;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy259;
					goto yy254;
				} else {
					if (yych <= '{') goto yy260;
					if (yych <= '|') goto yy241;
				}
			}
		}
	}
yy229:
	++YYCURSOR;
yy230:
#line 456 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1417 "src/parse/lex.cc"
yy231:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy231;
	}
#line 438 "../src/parse/lex.re"
	{ goto scan; }
#line 1427 "src/parse/lex.cc"
yy234:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy235:
#line 445 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1449 "src/parse/lex.cc"
yy236:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy234;
	goto yy230;
yy237:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy267;
	goto yy230;
yy238:
	++YYCURSOR;
#line 341 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1463 "src/parse/lex.cc"
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy230;
		if (yych <= 'Z') goto yy268;
		goto yy230;
	} else {
		if (yych == '`') goto yy230;
		if (yych <= 'z') goto yy268;
		goto yy230;
	}
yy241:
	++YYCURSOR;
yy242:
#line 350 "../src/parse/lex.re"
	{ return *tok; }
#line 1480 "src/parse/lex.cc"
yy243:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy271;
	goto yy230;
yy244:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1489 "src/parse/lex.cc"
yy246:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy271;
	goto yy242;
yy247:
	++YYCURSOR;
#line 433 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1501 "src/parse/lex.cc"
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy273;
	if (yych == '/') goto yy275;
	goto yy242;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy277;
	goto yy230;
yy251:
	++YYCURSOR;
#line 333 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1515 "src/parse/lex.cc"
yy253:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy279;
	goto yy242;
yy254:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy255:
	if (yybm[0+yych] & 32) {
		goto yy254;
	}
#line 399 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1552 "src/parse/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy281;
#line 342 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1558 "src/parse/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy283;
	goto yy255;
yy260:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy286;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy284;
		if (yych >= 'A') goto yy288;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy288;
		} else {
			if (yych <= '`') goto yy261;
			if (yych <= 'z') goto yy288;
		}
	}
yy261:
#line 325 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1583 "src/parse/lex.cc"
yy262:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy262;
	} else {
		if (yych <= ' ') goto yy262;
		if (yych == '#') goto yy265;
	}
yy264:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy235;
			} else {
				goto yy230;
			}
		} else {
			if (yyaccept == 2) {
				goto yy242;
			} else {
				goto yy261;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy278;
			} else {
				goto yy285;
			}
		} else {
			goto yy322;
		}
	}
yy265:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych == 'l') goto yy290;
		goto yy264;
	}
yy267:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy291;
	goto yy264;
yy268:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy270;
		if (yych <= '9') goto yy268;
		if (yych >= 'A') goto yy268;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy268;
		} else {
			if (yych <= '`') goto yy270;
			if (yych <= 'z') goto yy268;
		}
	}
yy270:
#line 345 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1659 "src/parse/lex.cc"
yy271:
	++YYCURSOR;
#line 338 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1664 "src/parse/lex.cc"
yy273:
	++YYCURSOR;
#line 336 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1669 "src/parse/lex.cc"
yy275:
	++YYCURSOR;
#line 335 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1674 "src/parse/lex.cc"
yy277:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy279;
yy278:
#line 326 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1682 "src/parse/lex.cc"
yy279:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
			goto yy279;
		} else {
			if (yych == ' ') goto yy279;
			goto yy264;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy292;
			}
			if (yych <= '^') goto yy264;
			yyt1 = YYCURSOR;
			goto yy292;
		} else {
			if (yych <= '`') goto yy264;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy292;
			}
			goto yy264;
		}
	}
yy281:
	++YYCURSOR;
#line 343 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1717 "src/parse/lex.cc"
yy283:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy295;
	goto yy255;
yy284:
	++YYCURSOR;
yy285:
#line 382 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 1731 "src/parse/lex.cc"
yy286:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy286;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy296;
	}
	if (yych == '}') goto yy297;
	goto yy264;
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy264;
			goto yy288;
		} else {
			if (yych <= '@') goto yy264;
			if (yych <= 'Z') goto yy288;
			goto yy264;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy264;
			goto yy288;
		} else {
			if (yych == '}') goto yy299;
			goto yy264;
		}
	}
yy290:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy301;
	goto yy264;
yy291:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy302;
	goto yy264;
yy292:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy294;
		if (yych <= '9') goto yy292;
		if (yych >= 'A') goto yy292;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy292;
		} else {
			if (yych <= '`') goto yy294;
			if (yych <= 'z') goto yy292;
		}
	}
yy294:
	p = yyt1;
#line 328 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1798 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy303;
	goto yy255;
yy296:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy285;
	if (yych <= '9') goto yy304;
	if (yych == '}') goto yy306;
	goto yy285;
yy297:
	++YYCURSOR;
#line 352 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1821 "src/parse/lex.cc"
yy299:
	++YYCURSOR;
#line 388 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1833 "src/parse/lex.cc"
yy301:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy308;
	goto yy264;
yy302:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy309;
	goto yy264;
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy310;
	goto yy255;
yy304:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy264;
	if (yych <= '9') goto yy304;
	if (yych == '}') goto yy312;
	goto yy264;
yy306:
	++YYCURSOR;
#line 373 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1865 "src/parse/lex.cc"
yy308:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy314;
	goto yy264;
yy309:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy315;
	goto yy264;
yy310:
	++YYCURSOR;
#line 397 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1878 "src/parse/lex.cc"
yy312:
	++YYCURSOR;
	p = yyt1;
#line 361 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 1894 "src/parse/lex.cc"
yy314:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy317;
	if (yych <= '9') goto yy264;
	goto yy317;
yy315:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy318;
	goto yy264;
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy317:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy316;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy316;
		if (yych <= '0') goto yy264;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy319;
		}
		goto yy264;
	}
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy321;
	goto yy264;
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy264;
			goto yy323;
		} else {
			if (yych <= '\n') goto yy325;
			if (yych <= '\f') goto yy264;
			goto yy327;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy264;
			goto yy323;
		} else {
			if (yych <= '/') goto yy264;
			if (yych <= '9') goto yy319;
			goto yy264;
		}
	}
yy321:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy328;
	if (yych == ' ') goto yy328;
yy322:
#line 427 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 1960 "src/parse/lex.cc"
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy323;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy323;
		if (yych == '"') goto yy330;
		goto yy264;
	}
yy325:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 440 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1981 "src/parse/lex.cc"
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy325;
	goto yy264;
yy328:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy328;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy328;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy332;
		}
		goto yy264;
	}
yy330:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy330;
	}
	if (yych <= '\n') goto yy264;
	if (yych <= '"') goto yy334;
	goto yy335;
yy332:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy264;
		if (yych == '\n') goto yy264;
		goto yy332;
	} else {
		if (yych <= '"') goto yy336;
		if (yych == '\\') goto yy337;
		goto yy332;
	}
yy334:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy325;
	if (yych == '\r') goto yy327;
	goto yy264;
yy335:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy264;
	if (yych == '\n') goto yy264;
	goto yy330;
yy336:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy338;
		}
		goto yy264;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy338;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy340;
		}
		goto yy264;
	}
yy337:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy264;
	if (yych == '\n') goto yy264;
	goto yy332;
yy338:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy338;
		goto yy264;
	} else {
		if (yych <= ' ') goto yy338;
		if (yych != ';') goto yy264;
	}
yy340:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy341;
	if (yych == '\r') goto yy343;
	goto yy264;
yy341:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 423 "../src/parse/lex.re"
	{
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2087 "src/parse/lex.cc"
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy341;
	goto yy264;
}
#line 460 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2100 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy347;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy347;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy350;
		}
	}
yy346:
#line 467 "../src/parse/lex.re"
	{ return false; }
#line 2157 "src/parse/lex.cc"
yy347:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy347;
	}
	if (yych == '=') goto yy350;
yy349:
	YYCURSOR = YYMARKER;
	goto yy346;
yy350:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy349;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 466 "../src/parse/lex.re"
	{ return true; }
#line 2176 "src/parse/lex.cc"
}
#line 468 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2185 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy356;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy356;
	}
#line 476 "../src/parse/lex.re"
	{ return false; }
#line 2234 "src/parse/lex.cc"
yy356:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy356;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy359;
	} else {
		if (yych <= '=') goto yy359;
		if (yych == '{') goto yy359;
	}
	YYCURSOR = yyt1;
#line 475 "../src/parse/lex.re"
	{ return true; }
#line 2251 "src/parse/lex.cc"
yy359:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 474 "../src/parse/lex.re"
	{ return false; }
#line 2257 "src/parse/lex.cc"
}
#line 477 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2268 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy361;
yy362:
	++YYCURSOR;
yy361:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy362;
	}
	if (yych <= 0x1F) goto yy364;
	if (yych <= '!') goto yy365;
	if (yych == '>') goto yy368;
yy364:
#line 487 "../src/parse/lex.re"
	{ goto cond; }
#line 2320 "src/parse/lex.cc"
yy365:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy365;
	if (yych == ' ') goto yy365;
#line 485 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2329 "src/parse/lex.cc"
yy368:
	++YYCURSOR;
#line 486 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2334 "src/parse/lex.cc"
}
#line 488 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2341 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy374;
		if (yych >= 'A') goto yy376;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy376;
		} else {
			if (yych <= '`') goto yy372;
			if (yych <= 'z') goto yy376;
		}
	}
yy372:
	++YYCURSOR;
#line 494 "../src/parse/lex.re"
	{ goto error; }
#line 2395 "src/parse/lex.cc"
yy374:
	++YYCURSOR;
#line 493 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2400 "src/parse/lex.cc"
yy376:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy376;
	}
#line 492 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2410 "src/parse/lex.cc"
}
#line 495 "../src/parse/lex.re"

next:

#line 2416 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy383;
		if (yych >= ' ') goto yy383;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy384;
		} else {
			if (yych == '>') goto yy387;
		}
	}
	++YYCURSOR;
yy382:
#line 500 "../src/parse/lex.re"
	{ goto error; }
#line 2469 "src/parse/lex.cc"
yy383:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy389;
		if (yych <= 0x1F) goto yy382;
		goto yy389;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy382;
		} else {
			if (yych == '>') goto yy387;
			goto yy382;
		}
	}
yy384:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy384;
	}
#line 498 "../src/parse/lex.re"
	{ goto cond; }
#line 2493 "src/parse/lex.cc"
yy387:
	++YYCURSOR;
#line 499 "../src/parse/lex.re"
	{ goto end; }
#line 2498 "src/parse/lex.cc"
yy389:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy389;
		if (yych >= ' ') goto yy389;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy384;
		} else {
			if (yych == '>') goto yy387;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy382;
}
#line 501 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2533 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy394;
			if (yych == '\n') goto yy398;
			goto yy396;
		} else {
			if (yych <= '\r') goto yy400;
			if (yych == '"') goto yy401;
			goto yy396;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy401;
			if (yych == '/') goto yy403;
			goto yy396;
		} else {
			if (yych == '|') goto yy396;
			if (yych <= '}') goto yy404;
			goto yy396;
		}
	}
yy394:
	++YYCURSOR;
#line 527 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2563 "src/parse/lex.cc"
yy396:
	++YYCURSOR;
yy397:
#line 535 "../src/parse/lex.re"
	{ goto code; }
#line 2569 "src/parse/lex.cc"
yy398:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy399;
		if (yych <= '\n') goto yy406;
	} else {
		if (yych <= '\r') goto yy406;
		if (yych == ' ') goto yy406;
	}
yy399:
#line 518 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2589 "src/parse/lex.cc"
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy398;
	goto yy397;
yy401:
	++YYCURSOR;
#line 534 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2598 "src/parse/lex.cc"
yy403:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy408;
	if (yych == '/') goto yy410;
	goto yy397;
yy404:
	++YYCURSOR;
#line 528 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2611 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 517 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2617 "src/parse/lex.cc"
yy408:
	++YYCURSOR;
#line 532 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2622 "src/parse/lex.cc"
yy410:
	++YYCURSOR;
#line 533 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2627 "src/parse/lex.cc"
}
#line 536 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 2639 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy414;
			if (yych == '\n') goto yy418;
			goto yy416;
		} else {
			if (yych <= '\r') goto yy420;
			if (yych == '"') goto yy421;
			goto yy416;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy421;
			if (yych == '/') goto yy423;
			goto yy416;
		} else {
			if (yych <= '{') goto yy424;
			if (yych == '}') goto yy426;
			goto yy416;
		}
	}
yy414:
	++YYCURSOR;
#line 556 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2703 "src/parse/lex.cc"
yy416:
	++YYCURSOR;
yy417:
#line 560 "../src/parse/lex.re"
	{ goto code; }
#line 2709 "src/parse/lex.cc"
yy418:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy428;
	}
	if (yych == '#') goto yy431;
yy419:
#line 555 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2719 "src/parse/lex.cc"
yy420:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy418;
	goto yy417;
yy421:
	++YYCURSOR;
#line 559 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2728 "src/parse/lex.cc"
yy423:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy433;
	if (yych == '/') goto yy435;
	goto yy417;
yy424:
	++YYCURSOR;
#line 553 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2738 "src/parse/lex.cc"
yy426:
	++YYCURSOR;
#line 545 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2749 "src/parse/lex.cc"
yy428:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy428;
	}
	if (yych == '#') goto yy431;
yy430:
	YYCURSOR = YYMARKER;
	goto yy419;
yy431:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy431;
		goto yy430;
	} else {
		if (yych <= ' ') goto yy431;
		if (yych == 'l') goto yy437;
		goto yy430;
	}
yy433:
	++YYCURSOR;
#line 557 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2777 "src/parse/lex.cc"
yy435:
	++YYCURSOR;
#line 558 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2782 "src/parse/lex.cc"
yy437:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy430;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy430;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy430;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy442;
	if (yych <= '9') goto yy430;
	goto yy442;
yy441:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy442:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy441;
		goto yy430;
	} else {
		if (yych <= ' ') goto yy441;
		if (yych <= '0') goto yy430;
		if (yych >= ':') goto yy430;
		yyt1 = YYCURSOR;
	}
yy443:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy443;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy430;
		if (yych <= '\t') goto yy445;
		if (yych <= '\n') goto yy447;
		goto yy430;
	} else {
		if (yych <= '\r') goto yy449;
		if (yych != ' ') goto yy430;
	}
yy445:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy445;
		goto yy430;
	} else {
		if (yych <= ' ') goto yy445;
		if (yych == '"') goto yy450;
		goto yy430;
	}
yy447:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 554 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2841 "src/parse/lex.cc"
yy449:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	goto yy430;
yy450:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy450;
	}
	if (yych <= '\n') goto yy430;
	if (yych >= '#') goto yy453;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	if (yych == '\r') goto yy449;
	goto yy430;
yy453:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy430;
	if (yych == '\n') goto yy430;
	goto yy450;
}
#line 561 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2875 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy456;
			if (yych <= '\t') goto yy458;
			goto yy460;
		} else {
			if (yych == '\r') goto yy462;
			goto yy458;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy463;
			if (yych <= '&') goto yy458;
			goto yy463;
		} else {
			if (yych == '\\') goto yy465;
			goto yy458;
		}
	}
yy456:
	++YYCURSOR;
#line 571 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2903 "src/parse/lex.cc"
yy458:
	++YYCURSOR;
yy459:
#line 572 "../src/parse/lex.re"
	{ goto loop; }
#line 2909 "src/parse/lex.cc"
yy460:
	++YYCURSOR;
#line 570 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2914 "src/parse/lex.cc"
yy462:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy460;
	goto yy459;
yy463:
	++YYCURSOR;
#line 568 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2923 "src/parse/lex.cc"
yy465:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy459;
	} else {
		if (yych <= '\'') goto yy466;
		if (yych != '\\') goto yy459;
	}
yy466:
	++YYCURSOR;
#line 569 "../src/parse/lex.re"
	{ goto loop; }
#line 2936 "src/parse/lex.cc"
}
#line 573 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 2946 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy470;
		if (yych == '\n') goto yy474;
		goto yy472;
	} else {
		if (yych <= '\r') goto yy476;
		if (yych == '*') goto yy477;
		goto yy472;
	}
yy470:
	++YYCURSOR;
#line 582 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2964 "src/parse/lex.cc"
yy472:
	++YYCURSOR;
yy473:
#line 583 "../src/parse/lex.re"
	{ goto loop; }
#line 2970 "src/parse/lex.cc"
yy474:
	++YYCURSOR;
#line 581 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2975 "src/parse/lex.cc"
yy476:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy474;
	goto yy473;
yy477:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy473;
	++YYCURSOR;
#line 580 "../src/parse/lex.re"
	{ return; }
#line 2986 "src/parse/lex.cc"
}
#line 584 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2996 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy482;
		if (yych <= '\t') goto yy484;
		goto yy486;
	} else {
		if (yych == '\r') goto yy488;
		goto yy484;
	}
yy482:
	++YYCURSOR;
#line 592 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3013 "src/parse/lex.cc"
yy484:
	++YYCURSOR;
yy485:
#line 593 "../src/parse/lex.re"
	{ goto loop; }
#line 3019 "src/parse/lex.cc"
yy486:
	++YYCURSOR;
#line 591 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3024 "src/parse/lex.cc"
yy488:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy486;
	goto yy485;
}
#line 594 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3043 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy492;
#line 607 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3051 "src/parse/lex.cc"
yy492:
	++YYCURSOR;
#line 606 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3056 "src/parse/lex.cc"
}
#line 608 "../src/parse/lex.re"

snd:

#line 3062 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy497;
yy496:
#line 611 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3071 "src/parse/lex.cc"
yy497:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy499;
	YYCURSOR = YYMARKER;
	goto yy496;
yy499:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 612 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3089 "src/parse/lex.cc"
}
#line 620 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 657 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3107 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy503;
		if (yych == '\n') goto yy507;
		goto yy505;
	} else {
		if (yych <= '\r') goto yy509;
		if (yych == '\\') goto yy510;
		goto yy505;
	}
yy503:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3126 "src/parse/lex.cc"
yy505:
	++YYCURSOR;
yy506:
#line 640 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3132 "src/parse/lex.cc"
yy507:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3137 "src/parse/lex.cc"
yy509:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy507;
	goto yy506;
yy510:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy511;
				if (yych == '\n') goto yy507;
				goto yy512;
			} else {
				if (yych <= '\r') goto yy514;
				if (yych == '-') goto yy515;
				goto yy512;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy517;
				if (yych <= '7') goto yy519;
				if (yych <= 'T') goto yy512;
				goto yy520;
			} else {
				if (yych == 'X') goto yy522;
				if (yych <= '[') goto yy512;
				goto yy523;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy525;
				if (yych <= '`') goto yy512;
				if (yych <= 'a') goto yy527;
				goto yy529;
			} else {
				if (yych == 'f') goto yy531;
				if (yych <= 'm') goto yy512;
				goto yy533;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy535;
				if (yych <= 's') goto yy512;
				goto yy537;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy522;
					goto yy539;
				} else {
					if (yych == 'x') goto yy541;
					goto yy512;
				}
			}
		}
	}
yy511:
#line 635 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3198 "src/parse/lex.cc"
yy512:
	++YYCURSOR;
yy513:
#line 653 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3207 "src/parse/lex.cc"
yy514:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy507;
	goto yy513;
yy515:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3216 "src/parse/lex.cc"
yy517:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy518;
	if (yych <= '7') goto yy542;
yy518:
#line 634 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3225 "src/parse/lex.cc"
yy519:
	++YYCURSOR;
	goto yy518;
yy520:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy544;
	} else {
		if (yych <= 'F') goto yy544;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy544;
	}
yy521:
#line 633 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3243 "src/parse/lex.cc"
yy522:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy545;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy545;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy545;
		goto yy521;
	}
yy523:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3261 "src/parse/lex.cc"
yy525:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3266 "src/parse/lex.cc"
yy527:
	++YYCURSOR;
#line 643 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3271 "src/parse/lex.cc"
yy529:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3276 "src/parse/lex.cc"
yy531:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3281 "src/parse/lex.cc"
yy533:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3286 "src/parse/lex.cc"
yy535:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3291 "src/parse/lex.cc"
yy537:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3296 "src/parse/lex.cc"
yy539:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3301 "src/parse/lex.cc"
yy541:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy521;
		if (yych <= '9') goto yy546;
		goto yy521;
	} else {
		if (yych <= 'F') goto yy546;
		if (yych <= '`') goto yy521;
		if (yych <= 'f') goto yy546;
		goto yy521;
	}
yy542:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy543;
	if (yych <= '7') goto yy547;
yy543:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy518;
	} else {
		goto yy521;
	}
yy544:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy549;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy549;
		goto yy543;
	}
yy545:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy550;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy550;
		goto yy543;
	}
yy546:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy551;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy551;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy551;
		goto yy543;
	}
yy547:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3366 "src/parse/lex.cc"
yy549:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy553;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy553;
		goto yy543;
	}
yy550:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy546;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy546;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy546;
		goto yy543;
	}
yy551:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3395 "src/parse/lex.cc"
yy553:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych >= ':') goto yy543;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy543;
		if (yych >= 'g') goto yy543;
	}
yy554:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy543;
		if (yych <= '9') goto yy545;
		goto yy543;
	} else {
		if (yych <= 'F') goto yy545;
		if (yych <= '`') goto yy543;
		if (yych <= 'f') goto yy545;
		goto yy543;
	}
}
#line 659 "../src/parse/lex.re"

    }
    else {
        
#line 3424 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy557;
			if (yych == '\n') goto yy561;
			goto yy559;
		} else {
			if (yych <= '\r') goto yy563;
			if (yych == '\\') goto yy564;
			goto yy559;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy566;
			if (yych <= 0xDF) goto yy568;
			if (yych <= 0xE0) goto yy569;
			goto yy570;
		} else {
			if (yych <= 0xF0) goto yy571;
			if (yych <= 0xF3) goto yy572;
			if (yych <= 0xF4) goto yy573;
			goto yy566;
		}
	}
yy557:
	++YYCURSOR;
#line 638 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3457 "src/parse/lex.cc"
yy559:
	++YYCURSOR;
yy560:
#line 640 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3463 "src/parse/lex.cc"
yy561:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3468 "src/parse/lex.cc"
yy563:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy561;
	goto yy560;
yy564:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy574;
				} else {
					if (yych <= '\n') goto yy561;
					if (yych <= '\f') goto yy574;
					goto yy576;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy574;
					goto yy577;
				} else {
					if (yych <= '/') goto yy574;
					if (yych <= '3') goto yy579;
					goto yy581;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy574;
					goto yy582;
				} else {
					if (yych == 'X') goto yy584;
					goto yy574;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy585;
					goto yy587;
				} else {
					if (yych <= '`') goto yy574;
					if (yych <= 'a') goto yy589;
					goto yy591;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy574;
					goto yy593;
				} else {
					if (yych == 'n') goto yy595;
					goto yy574;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy597;
					goto yy574;
				} else {
					if (yych <= 't') goto yy599;
					if (yych <= 'u') goto yy584;
					goto yy601;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy574;
					goto yy603;
				} else {
					if (yych <= 0x7F) goto yy574;
					if (yych >= 0xC2) goto yy604;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy606;
					if (yych <= 0xEF) goto yy607;
					goto yy608;
				} else {
					if (yych <= 0xF3) goto yy609;
					if (yych <= 0xF4) goto yy610;
				}
			}
		}
	}
yy565:
#line 635 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3560 "src/parse/lex.cc"
yy566:
	++YYCURSOR;
yy567:
#line 636 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3566 "src/parse/lex.cc"
yy568:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy567;
	if (yych <= 0xBF) goto yy559;
	goto yy567;
yy569:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy567;
	if (yych <= 0xBF) goto yy611;
	goto yy567;
yy570:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy567;
	if (yych <= 0xBF) goto yy611;
	goto yy567;
yy571:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy567;
	if (yych <= 0xBF) goto yy612;
	goto yy567;
yy572:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy567;
	if (yych <= 0xBF) goto yy612;
	goto yy567;
yy573:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy567;
	if (yych <= 0x8F) goto yy612;
	goto yy567;
yy574:
	++YYCURSOR;
yy575:
#line 653 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3610 "src/parse/lex.cc"
yy576:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy561;
	goto yy575;
yy577:
	++YYCURSOR;
#line 651 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3619 "src/parse/lex.cc"
yy579:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy580;
	if (yych <= '7') goto yy613;
yy580:
#line 634 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3628 "src/parse/lex.cc"
yy581:
	++YYCURSOR;
	goto yy580;
yy582:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy583;
		if (yych <= '9') goto yy614;
	} else {
		if (yych <= 'F') goto yy614;
		if (yych <= '`') goto yy583;
		if (yych <= 'f') goto yy614;
	}
yy583:
#line 633 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3646 "src/parse/lex.cc"
yy584:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy583;
		if (yych <= '9') goto yy615;
		goto yy583;
	} else {
		if (yych <= 'F') goto yy615;
		if (yych <= '`') goto yy583;
		if (yych <= 'f') goto yy615;
		goto yy583;
	}
yy585:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3664 "src/parse/lex.cc"
yy587:
	++YYCURSOR;
#line 652 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3669 "src/parse/lex.cc"
yy589:
	++YYCURSOR;
#line 643 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3674 "src/parse/lex.cc"
yy591:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3679 "src/parse/lex.cc"
yy593:
	++YYCURSOR;
#line 645 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3684 "src/parse/lex.cc"
yy595:
	++YYCURSOR;
#line 646 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3689 "src/parse/lex.cc"
yy597:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3694 "src/parse/lex.cc"
yy599:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3699 "src/parse/lex.cc"
yy601:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3704 "src/parse/lex.cc"
yy603:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy583;
		if (yych <= '9') goto yy616;
		goto yy583;
	} else {
		if (yych <= 'F') goto yy616;
		if (yych <= '`') goto yy583;
		if (yych <= 'f') goto yy616;
		goto yy583;
	}
yy604:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0xBF) goto yy574;
yy605:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy565;
		} else {
			goto yy567;
		}
	} else {
		if (yyaccept == 2) {
			goto yy580;
		} else {
			goto yy583;
		}
	}
yy606:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy605;
	if (yych <= 0xBF) goto yy604;
	goto yy605;
yy607:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0xBF) goto yy604;
	goto yy605;
yy608:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy605;
	if (yych <= 0xBF) goto yy607;
	goto yy605;
yy609:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0xBF) goto yy607;
	goto yy605;
yy610:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0x8F) goto yy607;
	goto yy605;
yy611:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0xBF) goto yy559;
	goto yy605;
yy612:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy605;
	if (yych <= 0xBF) goto yy611;
	goto yy605;
yy613:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy605;
	if (yych <= '7') goto yy617;
	goto yy605;
yy614:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy619;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy619;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy619;
		goto yy605;
	}
yy615:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy620;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy620;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy620;
		goto yy605;
	}
yy616:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy621;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy621;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy621;
		goto yy605;
	}
yy617:
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3817 "src/parse/lex.cc"
yy619:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy623;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy623;
		goto yy605;
	}
yy620:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy616;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy616;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy616;
		goto yy605;
	}
yy621:
	++YYCURSOR;
#line 641 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3846 "src/parse/lex.cc"
yy623:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych >= ':') goto yy605;
	} else {
		if (yych <= 'F') goto yy624;
		if (yych <= '`') goto yy605;
		if (yych >= 'g') goto yy605;
	}
yy624:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy605;
		if (yych <= '9') goto yy615;
		goto yy605;
	} else {
		if (yych <= 'F') goto yy615;
		if (yych <= '`') goto yy605;
		if (yych <= 'f') goto yy615;
		goto yy605;
	}
}
#line 662 "../src/parse/lex.re"
 #line 662 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 696 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3885 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy627;
		if (yych == '\n') goto yy631;
		goto yy629;
	} else {
		if (yych <= '\r') goto yy633;
		if (yych == '\\') goto yy634;
		goto yy629;
	}
yy627:
	++YYCURSOR;
#line 678 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3904 "src/parse/lex.cc"
yy629:
	++YYCURSOR;
yy630:
#line 680 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3910 "src/parse/lex.cc"
yy631:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 3915 "src/parse/lex.cc"
yy633:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy631;
	goto yy630;
yy634:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy635;
				if (yych <= '\t') goto yy636;
				goto yy631;
			} else {
				if (yych == '\r') goto yy638;
				if (yych <= '/') goto yy636;
				goto yy639;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy641;
				if (yych == 'U') goto yy642;
				goto yy636;
			} else {
				if (yych <= 'X') goto yy644;
				if (yych == '\\') goto yy645;
				goto yy636;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy647;
				if (yych <= 'b') goto yy649;
				goto yy636;
			} else {
				if (yych <= 'f') goto yy651;
				if (yych == 'n') goto yy653;
				goto yy636;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy655;
				if (yych <= 's') goto yy636;
				if (yych <= 't') goto yy657;
				goto yy644;
			} else {
				if (yych <= 'v') goto yy659;
				if (yych == 'x') goto yy661;
				goto yy636;
			}
		}
	}
yy635:
#line 675 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 3971 "src/parse/lex.cc"
yy636:
	++YYCURSOR;
yy637:
#line 691 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 3981 "src/parse/lex.cc"
yy638:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy631;
	goto yy637;
yy639:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy640;
	if (yych <= '7') goto yy662;
yy640:
#line 674 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 3994 "src/parse/lex.cc"
yy641:
	++YYCURSOR;
	goto yy640;
yy642:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy664;
	} else {
		if (yych <= 'F') goto yy664;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy664;
	}
yy643:
#line 673 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4012 "src/parse/lex.cc"
yy644:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy665;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy665;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy665;
		goto yy643;
	}
yy645:
	++YYCURSOR;
#line 690 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4030 "src/parse/lex.cc"
yy647:
	++YYCURSOR;
#line 683 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4035 "src/parse/lex.cc"
yy649:
	++YYCURSOR;
#line 684 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4040 "src/parse/lex.cc"
yy651:
	++YYCURSOR;
#line 685 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4045 "src/parse/lex.cc"
yy653:
	++YYCURSOR;
#line 686 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4050 "src/parse/lex.cc"
yy655:
	++YYCURSOR;
#line 687 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4055 "src/parse/lex.cc"
yy657:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4060 "src/parse/lex.cc"
yy659:
	++YYCURSOR;
#line 689 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4065 "src/parse/lex.cc"
yy661:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy643;
		if (yych <= '9') goto yy666;
		goto yy643;
	} else {
		if (yych <= 'F') goto yy666;
		if (yych <= '`') goto yy643;
		if (yych <= 'f') goto yy666;
		goto yy643;
	}
yy662:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy663;
	if (yych <= '7') goto yy667;
yy663:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy640;
	} else {
		goto yy643;
	}
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy669;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy669;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy669;
		goto yy663;
	}
yy665:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy670;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy670;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy670;
		goto yy663;
	}
yy666:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy671;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy671;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy671;
		goto yy663;
	}
yy667:
	++YYCURSOR;
#line 682 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4130 "src/parse/lex.cc"
yy669:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy673;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy673;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy673;
		goto yy663;
	}
yy670:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy666;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy666;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy666;
		goto yy663;
	}
yy671:
	++YYCURSOR;
#line 681 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4159 "src/parse/lex.cc"
yy673:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych >= ':') goto yy663;
	} else {
		if (yych <= 'F') goto yy674;
		if (yych <= '`') goto yy663;
		if (yych >= 'g') goto yy663;
	}
yy674:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy663;
		if (yych <= '9') goto yy665;
		goto yy663;
	} else {
		if (yych <= 'F') goto yy665;
		if (yych <= '`') goto yy663;
		if (yych <= 'f') goto yy665;
		goto yy663;
	}
}
#line 698 "../src/parse/lex.re"

    }
    else {
        
#line 4188 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy677;
			if (yych == '\n') goto yy681;
			goto yy679;
		} else {
			if (yych <= '\r') goto yy683;
			if (yych == '\\') goto yy684;
			goto yy679;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy686;
			if (yych <= 0xDF) goto yy688;
			if (yych <= 0xE0) goto yy689;
			goto yy690;
		} else {
			if (yych <= 0xF0) goto yy691;
			if (yych <= 0xF3) goto yy692;
			if (yych <= 0xF4) goto yy693;
			goto yy686;
		}
	}
yy677:
	++YYCURSOR;
#line 678 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4221 "src/parse/lex.cc"
yy679:
	++YYCURSOR;
yy680:
#line 680 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4227 "src/parse/lex.cc"
yy681:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4232 "src/parse/lex.cc"
yy683:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy681;
	goto yy680;
yy684:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy685;
				if (yych == '\n') goto yy681;
				goto yy694;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy696;
					goto yy694;
				} else {
					if (yych <= '3') goto yy697;
					if (yych <= '7') goto yy699;
					goto yy694;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy700;
					goto yy694;
				} else {
					if (yych <= 'X') goto yy702;
					if (yych <= '[') goto yy694;
					goto yy703;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy694;
					goto yy705;
				} else {
					if (yych <= 'b') goto yy707;
					if (yych <= 'e') goto yy694;
					goto yy709;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy711;
				if (yych <= 'q') goto yy694;
				goto yy713;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy694;
					goto yy715;
				} else {
					if (yych <= 'u') goto yy702;
					if (yych <= 'v') goto yy717;
					goto yy694;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy719;
					goto yy694;
				} else {
					if (yych <= 0xC1) goto yy685;
					if (yych <= 0xDF) goto yy720;
					goto yy722;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy723;
					goto yy724;
				} else {
					if (yych <= 0xF3) goto yy725;
					if (yych <= 0xF4) goto yy726;
				}
			}
		}
	}
yy685:
#line 675 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4317 "src/parse/lex.cc"
yy686:
	++YYCURSOR;
yy687:
#line 676 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4323 "src/parse/lex.cc"
yy688:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy687;
	if (yych <= 0xBF) goto yy679;
	goto yy687;
yy689:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy687;
	if (yych <= 0xBF) goto yy727;
	goto yy687;
yy690:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy687;
	if (yych <= 0xBF) goto yy727;
	goto yy687;
yy691:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy687;
	if (yych <= 0xBF) goto yy728;
	goto yy687;
yy692:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy687;
	if (yych <= 0xBF) goto yy728;
	goto yy687;
yy693:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy687;
	if (yych <= 0x8F) goto yy728;
	goto yy687;
yy694:
	++YYCURSOR;
yy695:
#line 691 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4368 "src/parse/lex.cc"
yy696:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy681;
	goto yy695;
yy697:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy698;
	if (yych <= '7') goto yy729;
yy698:
#line 674 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4381 "src/parse/lex.cc"
yy699:
	++YYCURSOR;
	goto yy698;
yy700:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy730;
	} else {
		if (yych <= 'F') goto yy730;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy730;
	}
yy701:
#line 673 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4399 "src/parse/lex.cc"
yy702:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy731;
		goto yy701;
	} else {
		if (yych <= 'F') goto yy731;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy731;
		goto yy701;
	}
yy703:
	++YYCURSOR;
#line 690 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4417 "src/parse/lex.cc"
yy705:
	++YYCURSOR;
#line 683 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4422 "src/parse/lex.cc"
yy707:
	++YYCURSOR;
#line 684 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4427 "src/parse/lex.cc"
yy709:
	++YYCURSOR;
#line 685 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4432 "src/parse/lex.cc"
yy711:
	++YYCURSOR;
#line 686 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4437 "src/parse/lex.cc"
yy713:
	++YYCURSOR;
#line 687 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4442 "src/parse/lex.cc"
yy715:
	++YYCURSOR;
#line 688 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4447 "src/parse/lex.cc"
yy717:
	++YYCURSOR;
#line 689 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4452 "src/parse/lex.cc"
yy719:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy701;
		if (yych <= '9') goto yy732;
		goto yy701;
	} else {
		if (yych <= 'F') goto yy732;
		if (yych <= '`') goto yy701;
		if (yych <= 'f') goto yy732;
		goto yy701;
	}
yy720:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0xBF) goto yy694;
yy721:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy685;
		} else {
			goto yy687;
		}
	} else {
		if (yyaccept == 2) {
			goto yy698;
		} else {
			goto yy701;
		}
	}
yy722:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy721;
	if (yych <= 0xBF) goto yy720;
	goto yy721;
yy723:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0xBF) goto yy720;
	goto yy721;
yy724:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy721;
	if (yych <= 0xBF) goto yy723;
	goto yy721;
yy725:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0xBF) goto yy723;
	goto yy721;
yy726:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0x8F) goto yy723;
	goto yy721;
yy727:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0xBF) goto yy679;
	goto yy721;
yy728:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy721;
	if (yych <= 0xBF) goto yy727;
	goto yy721;
yy729:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy721;
	if (yych <= '7') goto yy733;
	goto yy721;
yy730:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy735;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy735;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy735;
		goto yy721;
	}
yy731:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy736;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy736;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy736;
		goto yy721;
	}
yy732:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy737;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy737;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy737;
		goto yy721;
	}
yy733:
	++YYCURSOR;
#line 682 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4565 "src/parse/lex.cc"
yy735:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy739;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy739;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy739;
		goto yy721;
	}
yy736:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy732;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy732;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy732;
		goto yy721;
	}
yy737:
	++YYCURSOR;
#line 681 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4594 "src/parse/lex.cc"
yy739:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych >= ':') goto yy721;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy721;
		if (yych >= 'g') goto yy721;
	}
yy740:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy721;
		if (yych <= '9') goto yy731;
		goto yy721;
	} else {
		if (yych <= 'F') goto yy731;
		if (yych <= '`') goto yy721;
		if (yych <= 'f') goto yy731;
		goto yy721;
	}
}
#line 701 "../src/parse/lex.re"
 #line 701 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 4642 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy745;
		} else {
			if (yych <= '\n') goto yy747;
			if (yych <= '\f') goto yy745;
			goto yy749;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy745;
			goto yy750;
		} else {
			if (yych <= '0') goto yy745;
			if (yych <= '9') goto yy751;
			goto yy745;
		}
	}
	++YYCURSOR;
#line 744 "../src/parse/lex.re"
	{ --cur; return; }
#line 4702 "src/parse/lex.cc"
yy745:
	++YYCURSOR;
yy746:
#line 745 "../src/parse/lex.re"
	{ goto sourceline; }
#line 4708 "src/parse/lex.cc"
yy747:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 4713 "src/parse/lex.cc"
yy749:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy747;
	goto yy746;
yy750:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy746;
	if (yych == '\n') goto yy746;
	goto yy755;
yy751:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy751;
	}
#line 723 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 4740 "src/parse/lex.cc"
yy754:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy755:
	if (yybm[0+yych] & 128) {
		goto yy754;
	}
	if (yych <= '\n') goto yy756;
	if (yych <= '"') goto yy757;
	goto yy759;
yy756:
	YYCURSOR = YYMARKER;
	goto yy746;
yy757:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 4767 "src/parse/lex.cc"
yy759:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy756;
	if (yych == '\n') goto yy756;
	goto yy754;
}
#line 746 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
