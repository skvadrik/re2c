/* Generated by re2c 2.1.1 on Tue Jul  6 22:15:25 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/file_utils.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 62 "../src/parse/lex.re"


#line 121 "../src/parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    BlockNameList *block_list;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 61 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 272 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 127 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 292 "../src/parse/lex.re"
	{ goto loop; }
#line 133 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 287 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 147 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy7;
			} else {
				goto yy5;
			}
		} else {
			goto yy161;
		}
	} else {
		if (yyaccept == 3) {
			goto yy163;
		} else {
			goto yy172;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 138 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 208 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'l':	goto yy25;
	case 'm':	goto yy26;
	case 'r':	goto yy27;
	case 's':	goto yy28;
	case 't':	goto yy29;
	case 'u':	goto yy30;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy31;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy33;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy41;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy42;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy43;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy44;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy45;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy47;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy48;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy49;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy50;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy52;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy53;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy54;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy55;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy58;
	if (yych <= '9') goto yy13;
	goto yy58;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy59;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy60;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy63;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy64;
	if (yych == 'n') goto yy65;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy66;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy67;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy69;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy70;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy71;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy72;
	goto yy13;
yy57:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy58:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy57;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy57;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy73;
		}
		goto yy13;
	}
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy75;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy76;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy77;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy78;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy79;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy80;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy81;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy82;
	goto yy13;
yy67:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_GLOBAL;
    }
#line 437 "src/parse/lex.cc"
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy84;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy85;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy73:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy73;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy87;
		if (yych <= '\n') goto yy89;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy91;
		if (yych == ' ') goto yy87;
		goto yy13;
	}
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy92;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy95;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy97;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy98;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy101;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy102;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy87:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy87;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy87;
		if (yych == '"') goto yy104;
		goto yy13;
	}
yy89:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 280 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 541 "src/parse/lex.cc"
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy89;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy106;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy107;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy108;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy109;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy110;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy111;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy112;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy114;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy115;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy104:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy118;
	goto yy119;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy123;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy124;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy127;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy128;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy129;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy130;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy131;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy132;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy91;
	goto yy13;
yy119:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy104;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy134;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy135;
	goto yy13;
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy136;
	goto yy13;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy137;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy138;
	goto yy13;
yy125:
	++YYCURSOR;
#line 168 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        out.wdelay_stmt(0, code_yymaxfill(alc, block_list));
        // historically allows garbage before the end of the comment
        if (!lex_end_of_block(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 695 "src/parse/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy139;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy140;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy141;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy142;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy143;
	goto yy13;
yy132:
	++YYCURSOR;
#line 162 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 724 "src/parse/lex.cc"
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy144;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy145;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy146;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy147;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy148;
	goto yy13;
yy139:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy150;
	goto yy13;
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy141:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy153;
	goto yy13;
yy142:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy155;
	goto yy13;
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy157;
	goto yy13;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy159;
	goto yy13;
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy160;
	goto yy13;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy164;
	goto yy13;
yy148:
	++YYCURSOR;
#line 150 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 789 "src/parse/lex.cc"
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy165;
	goto yy13;
yy151:
	++YYCURSOR;
#line 219 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_tags(out, block_list, true)) return INPUT_ERROR;
        goto next;
    }
#line 803 "src/parse/lex.cc"
yy153:
	++YYCURSOR;
#line 156 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 812 "src/parse/lex.cc"
yy155:
	++YYCURSOR;
#line 212 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_tags(out, block_list, false)) return INPUT_ERROR;
        goto next;
    }
#line 822 "src/parse/lex.cc"
yy157:
	++YYCURSOR;
#line 200 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc, block_list));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 837 "src/parse/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy166;
	goto yy13;
yy160:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy167;
yy161:
#line 241 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 854 "src/parse/lex.cc"
yy162:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy163;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy168;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy168;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy168;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy170;
			}
		}
	}
yy163:
#line 266 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 888 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy171;
	goto yy13;
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy173;
	goto yy13;
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy174;
	goto yy13;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy176;
	goto yy13;
yy168:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 260 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_end_of_block(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 915 "src/parse/lex.cc"
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy168;
	goto yy13;
yy171:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy177;
	if (yych == ' ') goto yy177;
yy172:
#line 254 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 932 "src/parse/lex.cc"
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy179;
	goto yy13;
yy174:
	++YYCURSOR;
#line 185 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        } else if (opts->target == TARGET_CODE) {
            // User-defined state switch is generated as many times as needed.
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc, block_list));
            out.state_goto = true;
        }
        goto next;
    }
#line 954 "src/parse/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy180;
	if (yych == 'n') goto yy181;
	goto yy13;
yy177:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy177;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy177;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy183;
		}
		goto yy13;
	}
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy185;
	goto yy13;
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy187;
	goto yy13;
yy181:
	++YYCURSOR;
#line 226 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        goto next;
    }
#line 993 "src/parse/lex.cc"
yy183:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy183;
	} else {
		if (yych <= '"') goto yy189;
		if (yych == '\\') goto yy190;
		goto yy183;
	}
yy185:
	++YYCURSOR;
#line 177 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_name_list(alc, &block_list)) return INPUT_ERROR;
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        out.wdelay_stmt(0, code_yymaxnmatch(alc, block_list));
        goto next;
    }
#line 1017 "src/parse/lex.cc"
yy187:
	++YYCURSOR;
#line 234 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        goto next;
    }
#line 1028 "src/parse/lex.cc"
yy189:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = YYCURSOR;
			goto yy191;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = YYCURSOR;
		goto yy191;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = YYCURSOR;
			goto yy191;
		} else {
			if (yych == '*') {
				yyt2 = YYCURSOR;
				goto yy193;
			}
			goto yy13;
		}
	}
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy183;
yy191:
	++YYCURSOR;
	x = yyt1;
	YYCURSOR = yyt2;
	y = yyt2;
#line 248 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_end_of_block(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1072 "src/parse/lex.cc"
yy193:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy191;
	goto yy13;
}
#line 293 "../src/parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1086 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy197;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy199;
			}
		} else {
			if (yych == ':') goto yy201;
		}
	}
yy196:
#line 300 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1159 "src/parse/lex.cc"
yy197:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 307 "../src/parse/lex.re"
	{ name.clear();              return true; }
#line 1165 "src/parse/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy197;
yy200:
	YYCURSOR = YYMARKER;
	goto yy196;
yy201:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy200;
		if (yych >= '[') goto yy200;
	} else {
		if (yych == '`') goto yy200;
		if (yych >= '{') goto yy200;
	}
yy202:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy202;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy200;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy204;
		}
		if (yych <= '\f') goto yy200;
		yyt1 = YYCURSOR;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy200;
			yyt1 = YYCURSOR;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy206;
			}
			goto yy200;
		}
	}
yy204:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 308 "../src/parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1213 "src/parse/lex.cc"
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy204;
	goto yy200;
}
#line 309 "../src/parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1229 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
		} else {
			if (yych == '\r') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = YYCURSOR;
				goto yy210;
			}
			if (yych >= '*') {
				yyt1 = YYCURSOR;
				goto yy212;
			}
		} else {
			if (yych == ':') goto yy214;
		}
	}
yy209:
#line 318 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1302 "src/parse/lex.cc"
yy210:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 325 "../src/parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1311 "src/parse/lex.cc"
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy210;
yy213:
	YYCURSOR = YYMARKER;
	goto yy209;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy213;
		if (yych >= '[') goto yy213;
	} else {
		if (yych == '`') goto yy213;
		if (yych >= '{') goto yy213;
	}
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy215;
	}
#line 330 "../src/parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1352 "src/parse/lex.cc"
}
#line 347 "../src/parse/lex.re"

}

bool Scanner::lex_end_of_block(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1363 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy222;
		} else {
			if (yych <= '\n') goto yy224;
			if (yych >= '\r') goto yy226;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy222;
		} else {
			if (yych == '*') goto yy227;
		}
	}
	++YYCURSOR;
yy221:
#line 355 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1391 "src/parse/lex.cc"
yy222:
	++YYCURSOR;
#line 361 "../src/parse/lex.re"
	{ goto loop; }
#line 1396 "src/parse/lex.cc"
yy224:
	++YYCURSOR;
#line 362 "../src/parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1401 "src/parse/lex.cc"
yy226:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy224;
	goto yy221;
yy227:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy221;
	++YYCURSOR;
#line 363 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return true;
    }
#line 1417 "src/parse/lex.cc"
}
#line 369 "../src/parse/lex.re"

}

bool Scanner::lex_tags(Output &out, BlockNameList *blocks, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1429 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy234;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy237;
		} else {
			if (yych == '\r') goto yy239;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy240;
			if (yych >= 'f') goto yy241;
		} else {
			if (yych == 's') goto yy242;
		}
	}
	++YYCURSOR;
yy233:
#line 378 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        return false;
    }
#line 1492 "src/parse/lex.cc"
yy234:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy234;
	}
#line 386 "../src/parse/lex.re"
	{ goto loop; }
#line 1502 "src/parse/lex.cc"
yy237:
	++YYCURSOR;
#line 387 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 1507 "src/parse/lex.cc"
yy239:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy237;
	goto yy233;
yy240:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy243;
	goto yy233;
yy241:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy245;
	goto yy233;
yy242:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy247;
	goto yy233;
yy243:
	++YYCURSOR;
#line 388 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent,
                code_tags(out.allocator, fmt, sep, blocks, mtags));
        }
        return true;
    }
#line 1534 "src/parse/lex.cc"
yy245:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy248;
yy246:
	YYCURSOR = YYMARKER;
	goto yy233;
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy249;
	goto yy246;
yy248:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy250;
	goto yy246;
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy251;
	goto yy246;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy252;
	goto yy246;
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy253;
	goto yy246;
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy254;
	goto yy246;
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy256;
	goto yy246;
yy254:
	++YYCURSOR;
#line 383 "../src/parse/lex.re"
	{ fmt = lex_conf_string(); goto loop; }
#line 1573 "src/parse/lex.cc"
yy256:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy246;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy246;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy246;
	++YYCURSOR;
#line 384 "../src/parse/lex.re"
	{ sep = lex_conf_string(); goto loop; }
#line 1584 "src/parse/lex.cc"
}
#line 395 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1597 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy265;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy263;
				if (yych <= '\n') goto yy268;
				if (yych >= '\r') goto yy270;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy271;
				} else {
					if (yych <= '"') goto yy272;
					if (yych <= '#') goto yy274;
					goto yy275;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy277;
				} else {
					if (yych <= '\'') goto yy278;
					if (yych <= ')') goto yy275;
					goto yy280;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy275;
				} else {
					if (yych <= '.') goto yy281;
					if (yych <= '/') goto yy283;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy284;
				if (yych <= ';') goto yy275;
				if (yych <= '<') goto yy285;
				goto yy287;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy275;
				} else {
					if (yych <= '@') goto yy274;
					if (yych <= 'Z') goto yy288;
					goto yy291;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy275;
				} else {
					if (yych != '`') goto yy288;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy293;
					goto yy288;
				} else {
					if (yych <= '{') goto yy294;
					if (yych <= '|') goto yy275;
				}
			}
		}
	}
yy263:
	++YYCURSOR;
yy264:
#line 547 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1715 "src/parse/lex.cc"
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy265;
	}
#line 529 "../src/parse/lex.re"
	{ goto scan; }
#line 1725 "src/parse/lex.cc"
yy268:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy296;
	} else {
		if (yych <= ' ') goto yy296;
		if (yych == '#') goto yy299;
	}
yy269:
#line 536 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1747 "src/parse/lex.cc"
yy270:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy268;
	goto yy264;
yy271:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy301;
	if (yych == 'u') goto yy302;
	goto yy264;
yy272:
	++YYCURSOR;
#line 421 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1762 "src/parse/lex.cc"
yy274:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy264;
		if (yych <= 'Z') goto yy303;
		goto yy264;
	} else {
		if (yych == '`') goto yy264;
		if (yych <= 'z') goto yy303;
		goto yy264;
	}
yy275:
	++YYCURSOR;
yy276:
#line 430 "../src/parse/lex.re"
	{ return *tok; }
#line 1779 "src/parse/lex.cc"
yy277:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy306;
	goto yy264;
yy278:
	++YYCURSOR;
#line 420 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1788 "src/parse/lex.cc"
yy280:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy306;
	goto yy276;
yy281:
	++YYCURSOR;
#line 524 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1800 "src/parse/lex.cc"
yy283:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy308;
	if (yych == '/') goto yy310;
	goto yy276;
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy312;
	goto yy264;
yy285:
	++YYCURSOR;
#line 413 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1814 "src/parse/lex.cc"
yy287:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy314;
	goto yy276;
yy288:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy289:
	if (yybm[0+yych] & 32) {
		goto yy288;
	}
#line 479 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1851 "src/parse/lex.cc"
yy291:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy316;
#line 422 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1857 "src/parse/lex.cc"
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy318;
	goto yy289;
yy294:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy321;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy319;
		if (yych >= 'A') goto yy323;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy323;
		} else {
			if (yych <= '`') goto yy295;
			if (yych <= 'z') goto yy323;
		}
	}
yy295:
#line 405 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1882 "src/parse/lex.cc"
yy296:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy296;
	} else {
		if (yych <= ' ') goto yy296;
		if (yych == '#') goto yy299;
	}
yy298:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy269;
			} else {
				goto yy264;
			}
		} else {
			if (yyaccept == 2) {
				goto yy276;
			} else {
				goto yy295;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy313;
			} else {
				goto yy320;
			}
		} else {
			if (yyaccept == 6) {
				goto yy340;
			} else {
				goto yy364;
			}
		}
	}
yy299:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy299;
		goto yy298;
	} else {
		if (yych <= ' ') goto yy299;
		if (yych == 'l') goto yy325;
		goto yy298;
	}
yy301:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy326;
	goto yy298;
yy302:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy327;
	goto yy298;
yy303:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy305;
		if (yych <= '9') goto yy303;
		if (yych >= 'A') goto yy303;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy303;
		} else {
			if (yych <= '`') goto yy305;
			if (yych <= 'z') goto yy303;
		}
	}
yy305:
#line 425 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1966 "src/parse/lex.cc"
yy306:
	++YYCURSOR;
#line 418 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1971 "src/parse/lex.cc"
yy308:
	++YYCURSOR;
#line 416 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1976 "src/parse/lex.cc"
yy310:
	++YYCURSOR;
#line 415 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1981 "src/parse/lex.cc"
yy312:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy314;
yy313:
#line 406 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1989 "src/parse/lex.cc"
yy314:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy298;
			goto yy314;
		} else {
			if (yych == ' ') goto yy314;
			goto yy298;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy328;
			}
			if (yych <= '^') goto yy298;
			yyt1 = YYCURSOR;
			goto yy328;
		} else {
			if (yych <= '`') goto yy298;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy328;
			}
			goto yy298;
		}
	}
yy316:
	++YYCURSOR;
#line 423 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2024 "src/parse/lex.cc"
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy331;
	goto yy289;
yy319:
	++YYCURSOR;
yy320:
#line 462 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2038 "src/parse/lex.cc"
yy321:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy321;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy332;
	}
	if (yych == '}') goto yy333;
	goto yy298;
yy323:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy298;
			goto yy323;
		} else {
			if (yych <= '@') goto yy298;
			if (yych <= 'Z') goto yy323;
			goto yy298;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy298;
			goto yy323;
		} else {
			if (yych == '}') goto yy335;
			goto yy298;
		}
	}
yy325:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy337;
	goto yy298;
yy326:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy338;
	goto yy298;
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy339;
	goto yy298;
yy328:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy330;
		if (yych <= '9') goto yy328;
		if (yych >= 'A') goto yy328;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy328;
		} else {
			if (yych <= '`') goto yy330;
			if (yych <= 'z') goto yy328;
		}
	}
yy330:
	p = yyt1;
#line 408 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2109 "src/parse/lex.cc"
yy331:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy341;
	goto yy289;
yy332:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy320;
	if (yych <= '9') goto yy342;
	if (yych == '}') goto yy344;
	goto yy320;
yy333:
	++YYCURSOR;
#line 432 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2132 "src/parse/lex.cc"
yy335:
	++YYCURSOR;
#line 468 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2144 "src/parse/lex.cc"
yy337:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy346;
	goto yy298;
yy338:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy347;
	goto yy298;
yy339:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy348;
yy340:
#line 518 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 2164 "src/parse/lex.cc"
yy341:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy349;
	goto yy289;
yy342:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy298;
	if (yych <= '9') goto yy342;
	if (yych == '}') goto yy351;
	goto yy298;
yy344:
	++YYCURSOR;
#line 453 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2188 "src/parse/lex.cc"
yy346:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy353;
	goto yy298;
yy347:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy354;
	goto yy298;
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy298;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy355;
		}
		goto yy298;
	} else {
		if (yych == '`') goto yy298;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy355;
		}
		goto yy298;
	}
yy349:
	++YYCURSOR;
#line 477 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2218 "src/parse/lex.cc"
yy351:
	++YYCURSOR;
	p = yyt1;
#line 441 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2234 "src/parse/lex.cc"
yy353:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy358;
	if (yych <= '9') goto yy298;
	goto yy358;
yy354:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy359;
	goto yy298;
yy355:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy298;
			goto yy355;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy360;
			}
			goto yy298;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy355;
			if (yych <= '^') goto yy298;
			goto yy355;
		} else {
			if (yych <= '`') goto yy298;
			if (yych <= 'z') goto yy355;
			goto yy298;
		}
	}
yy357:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy358:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy357;
		goto yy298;
	} else {
		if (yych <= ' ') goto yy357;
		if (yych <= '0') goto yy298;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy361;
		}
		goto yy298;
	}
yy359:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy363;
	goto yy298;
yy360:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy365;
	if (yych == '\r') goto yy367;
	goto yy298;
yy361:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy298;
			goto yy368;
		} else {
			if (yych <= '\n') goto yy370;
			if (yych <= '\f') goto yy298;
			goto yy372;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy298;
			goto yy368;
		} else {
			if (yych <= '/') goto yy298;
			if (yych <= '9') goto yy361;
			goto yy298;
		}
	}
yy363:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy373;
	if (yych == ' ') goto yy373;
yy364:
#line 507 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2331 "src/parse/lex.cc"
yy365:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 513 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2342 "src/parse/lex.cc"
yy367:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy365;
	goto yy298;
yy368:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy368;
		goto yy298;
	} else {
		if (yych <= ' ') goto yy368;
		if (yych == '"') goto yy375;
		goto yy298;
	}
yy370:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 531 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2367 "src/parse/lex.cc"
yy372:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy370;
	goto yy298;
yy373:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy373;
		goto yy298;
	} else {
		if (yych <= ' ') goto yy373;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy377;
		}
		goto yy298;
	}
yy375:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy375;
	}
	if (yych <= '\n') goto yy298;
	if (yych <= '"') goto yy379;
	goto yy380;
yy377:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy298;
		if (yych == '\n') goto yy298;
		goto yy377;
	} else {
		if (yych <= '"') goto yy381;
		if (yych == '\\') goto yy382;
		goto yy377;
	}
yy379:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy370;
	if (yych == '\r') goto yy372;
	goto yy298;
yy380:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy298;
	if (yych == '\n') goto yy298;
	goto yy375;
yy381:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy383;
		}
		goto yy298;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy383;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy385;
		}
		goto yy298;
	}
yy382:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy298;
	if (yych == '\n') goto yy298;
	goto yy377;
yy383:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy383;
		goto yy298;
	} else {
		if (yych <= ' ') goto yy383;
		if (yych != ';') goto yy298;
	}
yy385:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy386;
	if (yych == '\r') goto yy388;
	goto yy298;
yy386:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 502 "../src/parse/lex.re"
	{
        next_line();
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2474 "src/parse/lex.cc"
yy388:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy386;
	goto yy298;
}
#line 551 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2487 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy392;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy392;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy395;
		}
	}
yy391:
#line 558 "../src/parse/lex.re"
	{ return false; }
#line 2544 "src/parse/lex.cc"
yy392:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy392;
	}
	if (yych == '=') goto yy395;
yy394:
	YYCURSOR = YYMARKER;
	goto yy391;
yy395:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy394;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 557 "../src/parse/lex.re"
	{ return true; }
#line 2563 "src/parse/lex.cc"
}
#line 559 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2572 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy401;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy401;
	}
#line 567 "../src/parse/lex.re"
	{ return false; }
#line 2621 "src/parse/lex.cc"
yy401:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy401;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy404;
	} else {
		if (yych <= '=') goto yy404;
		if (yych == '{') goto yy404;
	}
	YYCURSOR = yyt1;
#line 566 "../src/parse/lex.re"
	{ return true; }
#line 2638 "src/parse/lex.cc"
yy404:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 565 "../src/parse/lex.re"
	{ return false; }
#line 2644 "src/parse/lex.cc"
}
#line 568 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2655 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy406;
yy407:
	++YYCURSOR;
yy406:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy407;
	}
	if (yych <= 0x1F) goto yy409;
	if (yych <= '!') goto yy410;
	if (yych == '>') goto yy413;
yy409:
#line 578 "../src/parse/lex.re"
	{ goto cond; }
#line 2707 "src/parse/lex.cc"
yy410:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy410;
	if (yych == ' ') goto yy410;
#line 576 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2716 "src/parse/lex.cc"
yy413:
	++YYCURSOR;
#line 577 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2721 "src/parse/lex.cc"
}
#line 579 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2728 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy419;
		if (yych >= 'A') goto yy421;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy421;
		} else {
			if (yych <= '`') goto yy417;
			if (yych <= 'z') goto yy421;
		}
	}
yy417:
	++YYCURSOR;
#line 585 "../src/parse/lex.re"
	{ goto error; }
#line 2782 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
#line 584 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2787 "src/parse/lex.cc"
yy421:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy421;
	}
#line 583 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2797 "src/parse/lex.cc"
}
#line 586 "../src/parse/lex.re"

next:

#line 2803 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy428;
		if (yych >= ' ') goto yy428;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy429;
		} else {
			if (yych == '>') goto yy432;
		}
	}
	++YYCURSOR;
yy427:
#line 591 "../src/parse/lex.re"
	{ goto error; }
#line 2856 "src/parse/lex.cc"
yy428:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy434;
		if (yych <= 0x1F) goto yy427;
		goto yy434;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy427;
		} else {
			if (yych == '>') goto yy432;
			goto yy427;
		}
	}
yy429:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy429;
	}
#line 589 "../src/parse/lex.re"
	{ goto cond; }
#line 2880 "src/parse/lex.cc"
yy432:
	++YYCURSOR;
#line 590 "../src/parse/lex.re"
	{ goto end; }
#line 2885 "src/parse/lex.cc"
yy434:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy434;
		if (yych >= ' ') goto yy434;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy429;
		} else {
			if (yych == '>') goto yy432;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy427;
}
#line 592 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2920 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy439;
			if (yych == '\n') goto yy443;
			goto yy441;
		} else {
			if (yych <= '\r') goto yy445;
			if (yych == '"') goto yy446;
			goto yy441;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy446;
			if (yych == '/') goto yy448;
			goto yy441;
		} else {
			if (yych == '|') goto yy441;
			if (yych <= '}') goto yy449;
			goto yy441;
		}
	}
yy439:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2950 "src/parse/lex.cc"
yy441:
	++YYCURSOR;
yy442:
#line 626 "../src/parse/lex.re"
	{ goto code; }
#line 2956 "src/parse/lex.cc"
yy443:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy444;
		if (yych <= '\n') goto yy451;
	} else {
		if (yych <= '\r') goto yy451;
		if (yych == ' ') goto yy451;
	}
yy444:
#line 609 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2976 "src/parse/lex.cc"
yy445:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy443;
	goto yy442;
yy446:
	++YYCURSOR;
#line 625 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2985 "src/parse/lex.cc"
yy448:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy453;
	if (yych == '/') goto yy455;
	goto yy442;
yy449:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2998 "src/parse/lex.cc"
yy451:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 608 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3004 "src/parse/lex.cc"
yy453:
	++YYCURSOR;
#line 623 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3009 "src/parse/lex.cc"
yy455:
	++YYCURSOR;
#line 624 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3014 "src/parse/lex.cc"
}
#line 627 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3026 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy459;
			if (yych == '\n') goto yy463;
			goto yy461;
		} else {
			if (yych <= '\r') goto yy465;
			if (yych == '"') goto yy466;
			goto yy461;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy466;
			if (yych == '/') goto yy468;
			goto yy461;
		} else {
			if (yych <= '{') goto yy469;
			if (yych == '}') goto yy471;
			goto yy461;
		}
	}
yy459:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3090 "src/parse/lex.cc"
yy461:
	++YYCURSOR;
yy462:
#line 651 "../src/parse/lex.re"
	{ goto code; }
#line 3096 "src/parse/lex.cc"
yy463:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy473;
	}
	if (yych == '#') goto yy476;
yy464:
#line 646 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3106 "src/parse/lex.cc"
yy465:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy463;
	goto yy462;
yy466:
	++YYCURSOR;
#line 650 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3115 "src/parse/lex.cc"
yy468:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy478;
	if (yych == '/') goto yy480;
	goto yy462;
yy469:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3125 "src/parse/lex.cc"
yy471:
	++YYCURSOR;
#line 636 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3136 "src/parse/lex.cc"
yy473:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy473;
	}
	if (yych == '#') goto yy476;
yy475:
	YYCURSOR = YYMARKER;
	goto yy464;
yy476:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy476;
		goto yy475;
	} else {
		if (yych <= ' ') goto yy476;
		if (yych == 'l') goto yy482;
		goto yy475;
	}
yy478:
	++YYCURSOR;
#line 648 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3164 "src/parse/lex.cc"
yy480:
	++YYCURSOR;
#line 649 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3169 "src/parse/lex.cc"
yy482:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy475;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy475;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy475;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy487;
	if (yych <= '9') goto yy475;
	goto yy487;
yy486:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy487:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy486;
		goto yy475;
	} else {
		if (yych <= ' ') goto yy486;
		if (yych <= '0') goto yy475;
		if (yych >= ':') goto yy475;
		yyt1 = YYCURSOR;
	}
yy488:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy488;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy475;
		if (yych <= '\t') goto yy490;
		if (yych <= '\n') goto yy492;
		goto yy475;
	} else {
		if (yych <= '\r') goto yy494;
		if (yych != ' ') goto yy475;
	}
yy490:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy490;
		goto yy475;
	} else {
		if (yych <= ' ') goto yy490;
		if (yych == '"') goto yy495;
		goto yy475;
	}
yy492:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 645 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3228 "src/parse/lex.cc"
yy494:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy492;
	goto yy475;
yy495:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy495;
	}
	if (yych <= '\n') goto yy475;
	if (yych >= '#') goto yy498;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy492;
	if (yych == '\r') goto yy494;
	goto yy475;
yy498:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy475;
	if (yych == '\n') goto yy475;
	goto yy495;
}
#line 652 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3262 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy501;
			if (yych <= '\t') goto yy503;
			goto yy505;
		} else {
			if (yych == '\r') goto yy507;
			goto yy503;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy508;
			if (yych <= '&') goto yy503;
			goto yy508;
		} else {
			if (yych == '\\') goto yy510;
			goto yy503;
		}
	}
yy501:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3290 "src/parse/lex.cc"
yy503:
	++YYCURSOR;
yy504:
#line 663 "../src/parse/lex.re"
	{ goto loop; }
#line 3296 "src/parse/lex.cc"
yy505:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3301 "src/parse/lex.cc"
yy507:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy505;
	goto yy504;
yy508:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3310 "src/parse/lex.cc"
yy510:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy504;
	} else {
		if (yych <= '\'') goto yy511;
		if (yych != '\\') goto yy504;
	}
yy511:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ goto loop; }
#line 3323 "src/parse/lex.cc"
}
#line 664 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3333 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy515;
		if (yych == '\n') goto yy519;
		goto yy517;
	} else {
		if (yych <= '\r') goto yy521;
		if (yych == '*') goto yy522;
		goto yy517;
	}
yy515:
	++YYCURSOR;
#line 673 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3351 "src/parse/lex.cc"
yy517:
	++YYCURSOR;
yy518:
#line 674 "../src/parse/lex.re"
	{ goto loop; }
#line 3357 "src/parse/lex.cc"
yy519:
	++YYCURSOR;
#line 672 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3362 "src/parse/lex.cc"
yy521:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy519;
	goto yy518;
yy522:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy518;
	++YYCURSOR;
#line 671 "../src/parse/lex.re"
	{ return; }
#line 3373 "src/parse/lex.cc"
}
#line 675 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3383 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy527;
		if (yych <= '\t') goto yy529;
		goto yy531;
	} else {
		if (yych == '\r') goto yy533;
		goto yy529;
	}
yy527:
	++YYCURSOR;
#line 683 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3400 "src/parse/lex.cc"
yy529:
	++YYCURSOR;
yy530:
#line 684 "../src/parse/lex.re"
	{ goto loop; }
#line 3406 "src/parse/lex.cc"
yy531:
	++YYCURSOR;
#line 682 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3411 "src/parse/lex.cc"
yy533:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy531;
	goto yy530;
}
#line 685 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3430 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy537;
#line 698 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3438 "src/parse/lex.cc"
yy537:
	++YYCURSOR;
#line 697 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3443 "src/parse/lex.cc"
}
#line 699 "../src/parse/lex.re"

snd:

#line 3449 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy542;
yy541:
#line 702 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3458 "src/parse/lex.cc"
yy542:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy544;
	YYCURSOR = YYMARKER;
	goto yy541;
yy544:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 703 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3476 "src/parse/lex.cc"
}
#line 711 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 748 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3494 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy548;
		if (yych == '\n') goto yy552;
		goto yy550;
	} else {
		if (yych <= '\r') goto yy554;
		if (yych == '\\') goto yy555;
		goto yy550;
	}
yy548:
	++YYCURSOR;
#line 729 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3513 "src/parse/lex.cc"
yy550:
	++YYCURSOR;
yy551:
#line 731 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3519 "src/parse/lex.cc"
yy552:
	++YYCURSOR;
#line 723 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3524 "src/parse/lex.cc"
yy554:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy552;
	goto yy551;
yy555:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy556;
				if (yych == '\n') goto yy552;
				goto yy557;
			} else {
				if (yych <= '\r') goto yy559;
				if (yych == '-') goto yy560;
				goto yy557;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy562;
				if (yych <= '7') goto yy564;
				if (yych <= 'T') goto yy557;
				goto yy565;
			} else {
				if (yych == 'X') goto yy567;
				if (yych <= '[') goto yy557;
				goto yy568;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy570;
				if (yych <= '`') goto yy557;
				if (yych <= 'a') goto yy572;
				goto yy574;
			} else {
				if (yych == 'f') goto yy576;
				if (yych <= 'm') goto yy557;
				goto yy578;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy580;
				if (yych <= 's') goto yy557;
				goto yy582;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy567;
					goto yy584;
				} else {
					if (yych == 'x') goto yy586;
					goto yy557;
				}
			}
		}
	}
yy556:
#line 726 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3585 "src/parse/lex.cc"
yy557:
	++YYCURSOR;
yy558:
#line 744 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3594 "src/parse/lex.cc"
yy559:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy552;
	goto yy558;
yy560:
	++YYCURSOR;
#line 742 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3603 "src/parse/lex.cc"
yy562:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy563;
	if (yych <= '7') goto yy587;
yy563:
#line 725 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3612 "src/parse/lex.cc"
yy564:
	++YYCURSOR;
	goto yy563;
yy565:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy589;
	} else {
		if (yych <= 'F') goto yy589;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy589;
	}
yy566:
#line 724 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3630 "src/parse/lex.cc"
yy567:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy590;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy590;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy590;
		goto yy566;
	}
yy568:
	++YYCURSOR;
#line 741 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3648 "src/parse/lex.cc"
yy570:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3653 "src/parse/lex.cc"
yy572:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3658 "src/parse/lex.cc"
yy574:
	++YYCURSOR;
#line 735 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3663 "src/parse/lex.cc"
yy576:
	++YYCURSOR;
#line 736 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3668 "src/parse/lex.cc"
yy578:
	++YYCURSOR;
#line 737 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3673 "src/parse/lex.cc"
yy580:
	++YYCURSOR;
#line 738 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3678 "src/parse/lex.cc"
yy582:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3683 "src/parse/lex.cc"
yy584:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3688 "src/parse/lex.cc"
yy586:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy566;
		if (yych <= '9') goto yy591;
		goto yy566;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy566;
		if (yych <= 'f') goto yy591;
		goto yy566;
	}
yy587:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy588;
	if (yych <= '7') goto yy592;
yy588:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy563;
	} else {
		goto yy566;
	}
yy589:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy594;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy594;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy594;
		goto yy588;
	}
yy590:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy595;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy595;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy595;
		goto yy588;
	}
yy591:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy596;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy596;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy596;
		goto yy588;
	}
yy592:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3753 "src/parse/lex.cc"
yy594:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy598;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy598;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy598;
		goto yy588;
	}
yy595:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy591;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy591;
		goto yy588;
	}
yy596:
	++YYCURSOR;
#line 732 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3782 "src/parse/lex.cc"
yy598:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych >= ':') goto yy588;
	} else {
		if (yych <= 'F') goto yy599;
		if (yych <= '`') goto yy588;
		if (yych >= 'g') goto yy588;
	}
yy599:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy588;
		if (yych <= '9') goto yy590;
		goto yy588;
	} else {
		if (yych <= 'F') goto yy590;
		if (yych <= '`') goto yy588;
		if (yych <= 'f') goto yy590;
		goto yy588;
	}
}
#line 750 "../src/parse/lex.re"

    }
    else {
        
#line 3811 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy602;
			if (yych == '\n') goto yy606;
			goto yy604;
		} else {
			if (yych <= '\r') goto yy608;
			if (yych == '\\') goto yy609;
			goto yy604;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy611;
			if (yych <= 0xDF) goto yy613;
			if (yych <= 0xE0) goto yy614;
			goto yy615;
		} else {
			if (yych <= 0xF0) goto yy616;
			if (yych <= 0xF3) goto yy617;
			if (yych <= 0xF4) goto yy618;
			goto yy611;
		}
	}
yy602:
	++YYCURSOR;
#line 729 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3844 "src/parse/lex.cc"
yy604:
	++YYCURSOR;
yy605:
#line 731 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3850 "src/parse/lex.cc"
yy606:
	++YYCURSOR;
#line 723 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3855 "src/parse/lex.cc"
yy608:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy606;
	goto yy605;
yy609:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy619;
				} else {
					if (yych <= '\n') goto yy606;
					if (yych <= '\f') goto yy619;
					goto yy621;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy619;
					goto yy622;
				} else {
					if (yych <= '/') goto yy619;
					if (yych <= '3') goto yy624;
					goto yy626;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy619;
					goto yy627;
				} else {
					if (yych == 'X') goto yy629;
					goto yy619;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy630;
					goto yy632;
				} else {
					if (yych <= '`') goto yy619;
					if (yych <= 'a') goto yy634;
					goto yy636;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy619;
					goto yy638;
				} else {
					if (yych == 'n') goto yy640;
					goto yy619;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy642;
					goto yy619;
				} else {
					if (yych <= 't') goto yy644;
					if (yych <= 'u') goto yy629;
					goto yy646;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy619;
					goto yy648;
				} else {
					if (yych <= 0x7F) goto yy619;
					if (yych >= 0xC2) goto yy649;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy651;
					if (yych <= 0xEF) goto yy652;
					goto yy653;
				} else {
					if (yych <= 0xF3) goto yy654;
					if (yych <= 0xF4) goto yy655;
				}
			}
		}
	}
yy610:
#line 726 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3947 "src/parse/lex.cc"
yy611:
	++YYCURSOR;
yy612:
#line 727 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3953 "src/parse/lex.cc"
yy613:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy612;
	if (yych <= 0xBF) goto yy604;
	goto yy612;
yy614:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy612;
	if (yych <= 0xBF) goto yy656;
	goto yy612;
yy615:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy612;
	if (yych <= 0xBF) goto yy656;
	goto yy612;
yy616:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy612;
	if (yych <= 0xBF) goto yy657;
	goto yy612;
yy617:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy612;
	if (yych <= 0xBF) goto yy657;
	goto yy612;
yy618:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy612;
	if (yych <= 0x8F) goto yy657;
	goto yy612;
yy619:
	++YYCURSOR;
yy620:
#line 744 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3997 "src/parse/lex.cc"
yy621:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy606;
	goto yy620;
yy622:
	++YYCURSOR;
#line 742 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4006 "src/parse/lex.cc"
yy624:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy625;
	if (yych <= '7') goto yy658;
yy625:
#line 725 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4015 "src/parse/lex.cc"
yy626:
	++YYCURSOR;
	goto yy625;
yy627:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy628;
		if (yych <= '9') goto yy659;
	} else {
		if (yych <= 'F') goto yy659;
		if (yych <= '`') goto yy628;
		if (yych <= 'f') goto yy659;
	}
yy628:
#line 724 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4033 "src/parse/lex.cc"
yy629:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy628;
		if (yych <= '9') goto yy660;
		goto yy628;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy628;
		if (yych <= 'f') goto yy660;
		goto yy628;
	}
yy630:
	++YYCURSOR;
#line 741 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4051 "src/parse/lex.cc"
yy632:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4056 "src/parse/lex.cc"
yy634:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4061 "src/parse/lex.cc"
yy636:
	++YYCURSOR;
#line 735 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4066 "src/parse/lex.cc"
yy638:
	++YYCURSOR;
#line 736 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4071 "src/parse/lex.cc"
yy640:
	++YYCURSOR;
#line 737 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4076 "src/parse/lex.cc"
yy642:
	++YYCURSOR;
#line 738 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4081 "src/parse/lex.cc"
yy644:
	++YYCURSOR;
#line 739 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4086 "src/parse/lex.cc"
yy646:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4091 "src/parse/lex.cc"
yy648:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy628;
		if (yych <= '9') goto yy661;
		goto yy628;
	} else {
		if (yych <= 'F') goto yy661;
		if (yych <= '`') goto yy628;
		if (yych <= 'f') goto yy661;
		goto yy628;
	}
yy649:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0xBF) goto yy619;
yy650:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy610;
		} else {
			goto yy612;
		}
	} else {
		if (yyaccept == 2) {
			goto yy625;
		} else {
			goto yy628;
		}
	}
yy651:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy650;
	if (yych <= 0xBF) goto yy649;
	goto yy650;
yy652:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0xBF) goto yy649;
	goto yy650;
yy653:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy650;
	if (yych <= 0xBF) goto yy652;
	goto yy650;
yy654:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0xBF) goto yy652;
	goto yy650;
yy655:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0x8F) goto yy652;
	goto yy650;
yy656:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0xBF) goto yy604;
	goto yy650;
yy657:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy650;
	if (yych <= 0xBF) goto yy656;
	goto yy650;
yy658:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy650;
	if (yych <= '7') goto yy662;
	goto yy650;
yy659:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy664;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy664;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy664;
		goto yy650;
	}
yy660:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy665;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy665;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy665;
		goto yy650;
	}
yy661:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy666;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy666;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy666;
		goto yy650;
	}
yy662:
	++YYCURSOR;
#line 733 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4204 "src/parse/lex.cc"
yy664:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy668;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy668;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy668;
		goto yy650;
	}
yy665:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy661;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy661;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy661;
		goto yy650;
	}
yy666:
	++YYCURSOR;
#line 732 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4233 "src/parse/lex.cc"
yy668:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych >= ':') goto yy650;
	} else {
		if (yych <= 'F') goto yy669;
		if (yych <= '`') goto yy650;
		if (yych >= 'g') goto yy650;
	}
yy669:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy650;
		if (yych <= '9') goto yy660;
		goto yy650;
	} else {
		if (yych <= 'F') goto yy660;
		if (yych <= '`') goto yy650;
		if (yych <= 'f') goto yy660;
		goto yy650;
	}
}
#line 753 "../src/parse/lex.re"
 #line 753 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 787 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4272 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy672;
		if (yych == '\n') goto yy676;
		goto yy674;
	} else {
		if (yych <= '\r') goto yy678;
		if (yych == '\\') goto yy679;
		goto yy674;
	}
yy672:
	++YYCURSOR;
#line 769 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4291 "src/parse/lex.cc"
yy674:
	++YYCURSOR;
yy675:
#line 771 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4297 "src/parse/lex.cc"
yy676:
	++YYCURSOR;
#line 763 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4302 "src/parse/lex.cc"
yy678:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy676;
	goto yy675;
yy679:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy680;
				if (yych <= '\t') goto yy681;
				goto yy676;
			} else {
				if (yych == '\r') goto yy683;
				if (yych <= '/') goto yy681;
				goto yy684;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy686;
				if (yych == 'U') goto yy687;
				goto yy681;
			} else {
				if (yych <= 'X') goto yy689;
				if (yych == '\\') goto yy690;
				goto yy681;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy692;
				if (yych <= 'b') goto yy694;
				goto yy681;
			} else {
				if (yych <= 'f') goto yy696;
				if (yych == 'n') goto yy698;
				goto yy681;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy700;
				if (yych <= 's') goto yy681;
				if (yych <= 't') goto yy702;
				goto yy689;
			} else {
				if (yych <= 'v') goto yy704;
				if (yych == 'x') goto yy706;
				goto yy681;
			}
		}
	}
yy680:
#line 766 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4358 "src/parse/lex.cc"
yy681:
	++YYCURSOR;
yy682:
#line 782 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4368 "src/parse/lex.cc"
yy683:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy676;
	goto yy682;
yy684:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy685;
	if (yych <= '7') goto yy707;
yy685:
#line 765 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4381 "src/parse/lex.cc"
yy686:
	++YYCURSOR;
	goto yy685;
yy687:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy688;
		if (yych <= '9') goto yy709;
	} else {
		if (yych <= 'F') goto yy709;
		if (yych <= '`') goto yy688;
		if (yych <= 'f') goto yy709;
	}
yy688:
#line 764 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4399 "src/parse/lex.cc"
yy689:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy688;
		if (yych <= '9') goto yy710;
		goto yy688;
	} else {
		if (yych <= 'F') goto yy710;
		if (yych <= '`') goto yy688;
		if (yych <= 'f') goto yy710;
		goto yy688;
	}
yy690:
	++YYCURSOR;
#line 781 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4417 "src/parse/lex.cc"
yy692:
	++YYCURSOR;
#line 774 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4422 "src/parse/lex.cc"
yy694:
	++YYCURSOR;
#line 775 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4427 "src/parse/lex.cc"
yy696:
	++YYCURSOR;
#line 776 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4432 "src/parse/lex.cc"
yy698:
	++YYCURSOR;
#line 777 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4437 "src/parse/lex.cc"
yy700:
	++YYCURSOR;
#line 778 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4442 "src/parse/lex.cc"
yy702:
	++YYCURSOR;
#line 779 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4447 "src/parse/lex.cc"
yy704:
	++YYCURSOR;
#line 780 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4452 "src/parse/lex.cc"
yy706:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy688;
		if (yych <= '9') goto yy711;
		goto yy688;
	} else {
		if (yych <= 'F') goto yy711;
		if (yych <= '`') goto yy688;
		if (yych <= 'f') goto yy711;
		goto yy688;
	}
yy707:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy708;
	if (yych <= '7') goto yy712;
yy708:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy685;
	} else {
		goto yy688;
	}
yy709:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy714;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy714;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy714;
		goto yy708;
	}
yy710:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy715;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy715;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy715;
		goto yy708;
	}
yy711:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy716;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy716;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy716;
		goto yy708;
	}
yy712:
	++YYCURSOR;
#line 773 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4517 "src/parse/lex.cc"
yy714:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy718;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy718;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy718;
		goto yy708;
	}
yy715:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy711;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy711;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy711;
		goto yy708;
	}
yy716:
	++YYCURSOR;
#line 772 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4546 "src/parse/lex.cc"
yy718:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych >= ':') goto yy708;
	} else {
		if (yych <= 'F') goto yy719;
		if (yych <= '`') goto yy708;
		if (yych >= 'g') goto yy708;
	}
yy719:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy708;
		if (yych <= '9') goto yy710;
		goto yy708;
	} else {
		if (yych <= 'F') goto yy710;
		if (yych <= '`') goto yy708;
		if (yych <= 'f') goto yy710;
		goto yy708;
	}
}
#line 789 "../src/parse/lex.re"

    }
    else {
        
#line 4575 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy722;
			if (yych == '\n') goto yy726;
			goto yy724;
		} else {
			if (yych <= '\r') goto yy728;
			if (yych == '\\') goto yy729;
			goto yy724;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy731;
			if (yych <= 0xDF) goto yy733;
			if (yych <= 0xE0) goto yy734;
			goto yy735;
		} else {
			if (yych <= 0xF0) goto yy736;
			if (yych <= 0xF3) goto yy737;
			if (yych <= 0xF4) goto yy738;
			goto yy731;
		}
	}
yy722:
	++YYCURSOR;
#line 769 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4608 "src/parse/lex.cc"
yy724:
	++YYCURSOR;
yy725:
#line 771 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4614 "src/parse/lex.cc"
yy726:
	++YYCURSOR;
#line 763 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4619 "src/parse/lex.cc"
yy728:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy726;
	goto yy725;
yy729:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy730;
				if (yych == '\n') goto yy726;
				goto yy739;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy741;
					goto yy739;
				} else {
					if (yych <= '3') goto yy742;
					if (yych <= '7') goto yy744;
					goto yy739;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy745;
					goto yy739;
				} else {
					if (yych <= 'X') goto yy747;
					if (yych <= '[') goto yy739;
					goto yy748;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy739;
					goto yy750;
				} else {
					if (yych <= 'b') goto yy752;
					if (yych <= 'e') goto yy739;
					goto yy754;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy756;
				if (yych <= 'q') goto yy739;
				goto yy758;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy739;
					goto yy760;
				} else {
					if (yych <= 'u') goto yy747;
					if (yych <= 'v') goto yy762;
					goto yy739;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy764;
					goto yy739;
				} else {
					if (yych <= 0xC1) goto yy730;
					if (yych <= 0xDF) goto yy765;
					goto yy767;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy768;
					goto yy769;
				} else {
					if (yych <= 0xF3) goto yy770;
					if (yych <= 0xF4) goto yy771;
				}
			}
		}
	}
yy730:
#line 766 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4704 "src/parse/lex.cc"
yy731:
	++YYCURSOR;
yy732:
#line 767 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4710 "src/parse/lex.cc"
yy733:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy724;
	goto yy732;
yy734:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy732;
	if (yych <= 0xBF) goto yy772;
	goto yy732;
yy735:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy772;
	goto yy732;
yy736:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy732;
	if (yych <= 0xBF) goto yy773;
	goto yy732;
yy737:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0xBF) goto yy773;
	goto yy732;
yy738:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy732;
	if (yych <= 0x8F) goto yy773;
	goto yy732;
yy739:
	++YYCURSOR;
yy740:
#line 782 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4755 "src/parse/lex.cc"
yy741:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy726;
	goto yy740;
yy742:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy743;
	if (yych <= '7') goto yy774;
yy743:
#line 765 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4768 "src/parse/lex.cc"
yy744:
	++YYCURSOR;
	goto yy743;
yy745:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy746;
		if (yych <= '9') goto yy775;
	} else {
		if (yych <= 'F') goto yy775;
		if (yych <= '`') goto yy746;
		if (yych <= 'f') goto yy775;
	}
yy746:
#line 764 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4786 "src/parse/lex.cc"
yy747:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy746;
		if (yych <= '9') goto yy776;
		goto yy746;
	} else {
		if (yych <= 'F') goto yy776;
		if (yych <= '`') goto yy746;
		if (yych <= 'f') goto yy776;
		goto yy746;
	}
yy748:
	++YYCURSOR;
#line 781 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4804 "src/parse/lex.cc"
yy750:
	++YYCURSOR;
#line 774 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4809 "src/parse/lex.cc"
yy752:
	++YYCURSOR;
#line 775 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4814 "src/parse/lex.cc"
yy754:
	++YYCURSOR;
#line 776 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4819 "src/parse/lex.cc"
yy756:
	++YYCURSOR;
#line 777 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4824 "src/parse/lex.cc"
yy758:
	++YYCURSOR;
#line 778 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4829 "src/parse/lex.cc"
yy760:
	++YYCURSOR;
#line 779 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4834 "src/parse/lex.cc"
yy762:
	++YYCURSOR;
#line 780 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4839 "src/parse/lex.cc"
yy764:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy746;
		if (yych <= '9') goto yy777;
		goto yy746;
	} else {
		if (yych <= 'F') goto yy777;
		if (yych <= '`') goto yy746;
		if (yych <= 'f') goto yy777;
		goto yy746;
	}
yy765:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0xBF) goto yy739;
yy766:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy730;
		} else {
			goto yy732;
		}
	} else {
		if (yyaccept == 2) {
			goto yy743;
		} else {
			goto yy746;
		}
	}
yy767:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy766;
	if (yych <= 0xBF) goto yy765;
	goto yy766;
yy768:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0xBF) goto yy765;
	goto yy766;
yy769:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy766;
	if (yych <= 0xBF) goto yy768;
	goto yy766;
yy770:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0xBF) goto yy768;
	goto yy766;
yy771:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0x8F) goto yy768;
	goto yy766;
yy772:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0xBF) goto yy724;
	goto yy766;
yy773:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy766;
	if (yych <= 0xBF) goto yy772;
	goto yy766;
yy774:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy766;
	if (yych <= '7') goto yy778;
	goto yy766;
yy775:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy780;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy780;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy780;
		goto yy766;
	}
yy776:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy781;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy781;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy781;
		goto yy766;
	}
yy777:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy782;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy782;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy782;
		goto yy766;
	}
yy778:
	++YYCURSOR;
#line 773 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4952 "src/parse/lex.cc"
yy780:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy784;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy784;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy784;
		goto yy766;
	}
yy781:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy777;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy777;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy777;
		goto yy766;
	}
yy782:
	++YYCURSOR;
#line 772 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4981 "src/parse/lex.cc"
yy784:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych >= ':') goto yy766;
	} else {
		if (yych <= 'F') goto yy785;
		if (yych <= '`') goto yy766;
		if (yych >= 'g') goto yy766;
	}
yy785:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy766;
		if (yych <= '9') goto yy776;
		goto yy766;
	} else {
		if (yych <= 'F') goto yy776;
		if (yych <= '`') goto yy766;
		if (yych <= 'f') goto yy776;
		goto yy766;
	}
}
#line 792 "../src/parse/lex.re"
 #line 792 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5029 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy790;
		} else {
			if (yych <= '\n') goto yy792;
			if (yych <= '\f') goto yy790;
			goto yy794;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy790;
			goto yy795;
		} else {
			if (yych <= '0') goto yy790;
			if (yych <= '9') goto yy796;
			goto yy790;
		}
	}
	++YYCURSOR;
#line 834 "../src/parse/lex.re"
	{ --cur; return; }
#line 5089 "src/parse/lex.cc"
yy790:
	++YYCURSOR;
yy791:
#line 835 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5095 "src/parse/lex.cc"
yy792:
	++YYCURSOR;
#line 833 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5100 "src/parse/lex.cc"
yy794:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy792;
	goto yy791;
yy795:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy791;
	if (yych == '\n') goto yy791;
	goto yy800;
yy796:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy796;
	}
#line 814 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5127 "src/parse/lex.cc"
yy799:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy800:
	if (yybm[0+yych] & 128) {
		goto yy799;
	}
	if (yych <= '\n') goto yy801;
	if (yych <= '"') goto yy802;
	goto yy804;
yy801:
	YYCURSOR = YYMARKER;
	goto yy791;
yy802:
	++YYCURSOR;
#line 824 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5153 "src/parse/lex.cc"
yy804:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy801;
	if (yych == '\n') goto yy801;
	goto yy799;
}
#line 836 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
