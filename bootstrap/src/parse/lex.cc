/* Generated by re2c 2.1.1 on Mon May 24 08:57:12 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 61 "../src/parse/lex.re"


#line 120 "../src/parse/lex.re"


static inline void save_string(std::string &str, const char *s, const char *e)
{
    if (s == NULL) {
        str.clear();
    } else {
        str.assign(s, e);
    }
}

Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 68 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  80,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 80,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  64,  64,  64,  64,  64,  64, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,   0,  64,  64, 192, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};
	if ((YYLIMIT - YYCURSOR) < 18) YYFILL(18);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 239 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 134 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 259 "../src/parse/lex.re"
	{ goto loop; }
#line 140 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 254 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 154 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		if (yyaccept == 2) {
			yyt1 = yyt2 = NULL;
			goto yy123;
		} else {
			yyt1 = yyt2 = NULL;
			goto yy142;
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 144 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 212 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy63;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy64;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy66;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy67;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy69;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy70;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy71;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy72;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy74;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy75;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy76;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy78;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy79;
	goto yy13;
yy67:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy67;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy80;
		if (yych <= '\n') goto yy82;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy84;
		if (yych == ' ') goto yy80;
		goto yy13;
	}
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy85;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy86;
	goto yy13;
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy87;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy88;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy89;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy91;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy92;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy93;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy94;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy95;
	goto yy13;
yy80:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy80;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy80;
		if (yych == '"') goto yy96;
		goto yy13;
	}
yy82:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 247 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 515 "src/parse/lex.cc"
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	goto yy13;
yy85:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy98;
	goto yy13;
yy86:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy100;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy101;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy102;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy108;
	goto yy13;
yy96:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy96;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy109;
	goto yy110;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy113;
	goto yy13;
yy101:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy114;
	goto yy13;
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy115;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy117;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy118;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy119;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy120;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy121;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy82;
	if (yych == '\r') goto yy84;
	goto yy13;
yy110:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy96;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy124;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy127;
	goto yy13;
yy115:
	++YYCURSOR;
#line 168 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        // historically allows garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 656 "src/parse/lex.cc"
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy129;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy130;
	goto yy13;
yy120:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy121:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy132;
	goto yy13;
yy122:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy133;
	yyt1 = yyt2 = NULL;
yy123:
	x = yyt1;
	y = yyt2;
#line 155 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Reuse;
    }
#line 691 "src/parse/lex.cc"
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy134;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy136;
	goto yy13;
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy137;
	goto yy13;
yy128:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy138;
	goto yy13;
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy139;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy141;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy143;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy145;
	goto yy13;
yy133:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy147;
		}
		goto yy13;
	}
yy134:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy149;
	goto yy13;
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy150;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy151;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy153;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy154;
	goto yy13;
yy139:
	++YYCURSOR;
#line 210 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 773 "src/parse/lex.cc"
yy141:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy155;
	yyt1 = yyt2 = NULL;
yy142:
	x = yyt1;
	y = yyt2;
#line 149 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Rules;
    }
#line 788 "src/parse/lex.cc"
yy143:
	++YYCURSOR;
#line 204 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 797 "src/parse/lex.cc"
yy145:
	++YYCURSOR;
#line 193 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 811 "src/parse/lex.cc"
yy147:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy147;
	}
	yyt2 = YYCURSOR;
	goto yy123;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy156;
	goto yy13;
yy150:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy157;
	goto yy13;
yy151:
	++YYCURSOR;
#line 161 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 838 "src/parse/lex.cc"
yy153:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy158;
	goto yy13;
yy154:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy159;
	goto yy13;
yy155:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy160;
		}
		goto yy13;
	}
yy156:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy162;
	goto yy13;
yy157:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy164;
	goto yy13;
yy158:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '"') goto yy13;
	goto yy166;
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy167;
	goto yy13;
yy160:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		if (yych <= '9') goto yy160;
		if (yych <= '@') {
			yyt2 = YYCURSOR;
			goto yy142;
		}
		goto yy160;
	} else {
		if (yych <= '_') {
			if (yych <= '^') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			goto yy160;
		} else {
			if (yych <= '`') {
				yyt2 = YYCURSOR;
				goto yy142;
			}
			if (yych <= 'z') goto yy160;
			yyt2 = YYCURSOR;
			goto yy142;
		}
	}
yy162:
	++YYCURSOR;
#line 183 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 924 "src/parse/lex.cc"
yy164:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy168;
	if (yych == 'n') goto yy169;
	goto yy13;
yy165:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy166:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy165;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy165;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy171;
		}
		goto yy13;
	}
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy173;
	goto yy13;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy175;
	goto yy13;
yy169:
	++YYCURSOR;
#line 216 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 964 "src/parse/lex.cc"
yy171:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy171;
	} else {
		if (yych <= '"') goto yy177;
		if (yych == '\\') goto yy179;
		goto yy171;
	}
yy173:
	++YYCURSOR;
#line 176 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 987 "src/parse/lex.cc"
yy175:
	++YYCURSOR;
#line 224 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 998 "src/parse/lex.cc"
yy177:
	yych = (YYCTYPE)*++YYCURSOR;
	yyt2 = YYCURSOR;
	goto yy181;
yy178:
	x = yyt1;
	y = yyt2;
#line 232 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1013 "src/parse/lex.cc"
yy179:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy171;
yy180:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy181:
	if (yych == '\t') goto yy180;
	if (yych == ' ') goto yy180;
	goto yy178;
}
#line 260 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1039 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy186;
		} else {
			if (yych <= '\n') goto yy188;
			if (yych >= '\r') goto yy190;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy186;
		} else {
			if (yych == '*') goto yy191;
		}
	}
	++YYCURSOR;
yy185:
#line 268 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 1066 "src/parse/lex.cc"
yy186:
	++YYCURSOR;
#line 273 "../src/parse/lex.re"
	{ goto loop; }
#line 1071 "src/parse/lex.cc"
yy188:
	++YYCURSOR;
#line 274 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 1080 "src/parse/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy188;
	goto yy185;
yy191:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy185;
	++YYCURSOR;
#line 279 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1096 "src/parse/lex.cc"
}
#line 285 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1108 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy198;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy201;
		} else {
			if (yych == '\r') goto yy203;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy204;
			if (yych >= 'f') goto yy205;
		} else {
			if (yych == 's') goto yy206;
		}
	}
	++YYCURSOR;
yy197:
#line 294 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1171 "src/parse/lex.cc"
yy198:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy198;
	}
#line 306 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1183 "src/parse/lex.cc"
yy201:
	++YYCURSOR;
#line 309 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1191 "src/parse/lex.cc"
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy201;
	goto yy197;
yy204:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy207;
	goto yy197;
yy205:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy209;
	goto yy197;
yy206:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy211;
	goto yy197;
yy207:
	++YYCURSOR;
#line 313 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1217 "src/parse/lex.cc"
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy212;
yy210:
	YYCURSOR = YYMARKER;
	goto yy197;
yy211:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy213;
	goto yy210;
yy212:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy214;
	goto yy210;
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy215;
	goto yy210;
yy214:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy216;
	goto yy210;
yy215:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy217;
	goto yy210;
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy218;
	goto yy210;
yy217:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy220;
	goto yy210;
yy218:
	++YYCURSOR;
#line 298 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1259 "src/parse/lex.cc"
yy220:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy210;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy210;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy210;
	++YYCURSOR;
#line 302 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1273 "src/parse/lex.cc"
}
#line 319 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1286 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy229;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy227;
				if (yych <= '\n') goto yy232;
				if (yych >= '\r') goto yy234;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy235;
				} else {
					if (yych <= '"') goto yy236;
					if (yych <= '#') goto yy238;
					goto yy239;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy241;
				} else {
					if (yych <= '\'') goto yy242;
					if (yych <= ')') goto yy239;
					goto yy244;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy239;
				} else {
					if (yych <= '.') goto yy245;
					if (yych <= '/') goto yy247;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy248;
				if (yych <= ';') goto yy239;
				if (yych <= '<') goto yy249;
				goto yy251;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy239;
				} else {
					if (yych <= '@') goto yy238;
					if (yych <= 'Z') goto yy252;
					goto yy255;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy239;
				} else {
					if (yych != '`') goto yy252;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy257;
					goto yy252;
				} else {
					if (yych <= '{') goto yy258;
					if (yych <= '|') goto yy239;
				}
			}
		}
	}
yy227:
	++YYCURSOR;
yy228:
#line 471 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1404 "src/parse/lex.cc"
yy229:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy229;
	}
#line 453 "../src/parse/lex.re"
	{ goto scan; }
#line 1414 "src/parse/lex.cc"
yy232:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy260;
	} else {
		if (yych <= ' ') goto yy260;
		if (yych == '#') goto yy263;
	}
yy233:
#line 460 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1436 "src/parse/lex.cc"
yy234:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy232;
	goto yy228;
yy235:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy265;
	if (yych == 'u') goto yy266;
	goto yy228;
yy236:
	++YYCURSOR;
#line 345 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1451 "src/parse/lex.cc"
yy238:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy228;
		if (yych <= 'Z') goto yy267;
		goto yy228;
	} else {
		if (yych == '`') goto yy228;
		if (yych <= 'z') goto yy267;
		goto yy228;
	}
yy239:
	++YYCURSOR;
yy240:
#line 354 "../src/parse/lex.re"
	{ return *tok; }
#line 1468 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy270;
	goto yy228;
yy242:
	++YYCURSOR;
#line 344 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1477 "src/parse/lex.cc"
yy244:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy270;
	goto yy240;
yy245:
	++YYCURSOR;
#line 448 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1489 "src/parse/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy272;
	if (yych == '/') goto yy274;
	goto yy240;
yy248:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy276;
	goto yy228;
yy249:
	++YYCURSOR;
#line 337 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 1503 "src/parse/lex.cc"
yy251:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy278;
	goto yy240;
yy252:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy253:
	if (yybm[0+yych] & 32) {
		goto yy252;
	}
#line 403 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1540 "src/parse/lex.cc"
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy280;
#line 346 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1546 "src/parse/lex.cc"
yy257:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy282;
	goto yy253;
yy258:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy285;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy283;
		if (yych >= 'A') goto yy287;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy287;
		} else {
			if (yych <= '`') goto yy259;
			if (yych <= 'z') goto yy287;
		}
	}
yy259:
#line 329 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1571 "src/parse/lex.cc"
yy260:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy260;
	} else {
		if (yych <= ' ') goto yy260;
		if (yych == '#') goto yy263;
	}
yy262:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy233;
			} else {
				goto yy228;
			}
		} else {
			if (yyaccept == 2) {
				goto yy240;
			} else {
				goto yy259;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy277;
			} else {
				goto yy284;
			}
		} else {
			if (yyaccept == 6) {
				goto yy304;
			} else {
				goto yy328;
			}
		}
	}
yy263:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy263;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy263;
		if (yych == 'l') goto yy289;
		goto yy262;
	}
yy265:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy290;
	goto yy262;
yy266:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy291;
	goto yy262;
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy269;
		if (yych <= '9') goto yy267;
		if (yych >= 'A') goto yy267;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy267;
		} else {
			if (yych <= '`') goto yy269;
			if (yych <= 'z') goto yy267;
		}
	}
yy269:
#line 349 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1655 "src/parse/lex.cc"
yy270:
	++YYCURSOR;
#line 342 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 1660 "src/parse/lex.cc"
yy272:
	++YYCURSOR;
#line 340 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1665 "src/parse/lex.cc"
yy274:
	++YYCURSOR;
#line 339 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1670 "src/parse/lex.cc"
yy276:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy278;
yy277:
#line 330 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1678 "src/parse/lex.cc"
yy278:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy262;
			goto yy278;
		} else {
			if (yych == ' ') goto yy278;
			goto yy262;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy292;
			}
			if (yych <= '^') goto yy262;
			yyt1 = YYCURSOR;
			goto yy292;
		} else {
			if (yych <= '`') goto yy262;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy292;
			}
			goto yy262;
		}
	}
yy280:
	++YYCURSOR;
#line 347 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1713 "src/parse/lex.cc"
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy295;
	goto yy253;
yy283:
	++YYCURSOR;
yy284:
#line 386 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 1727 "src/parse/lex.cc"
yy285:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy285;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy296;
	}
	if (yych == '}') goto yy297;
	goto yy262;
yy287:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy262;
			goto yy287;
		} else {
			if (yych <= '@') goto yy262;
			if (yych <= 'Z') goto yy287;
			goto yy262;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy262;
			goto yy287;
		} else {
			if (yych == '}') goto yy299;
			goto yy262;
		}
	}
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy301;
	goto yy262;
yy290:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy302;
	goto yy262;
yy291:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy303;
	goto yy262;
yy292:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy294;
		if (yych <= '9') goto yy292;
		if (yych >= 'A') goto yy292;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy292;
		} else {
			if (yych <= '`') goto yy294;
			if (yych <= 'z') goto yy292;
		}
	}
yy294:
	p = yyt1;
#line 332 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 1798 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy305;
	goto yy253;
yy296:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy284;
	if (yych <= '9') goto yy306;
	if (yych == '}') goto yy308;
	goto yy284;
yy297:
	++YYCURSOR;
#line 356 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1821 "src/parse/lex.cc"
yy299:
	++YYCURSOR;
#line 392 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 1833 "src/parse/lex.cc"
yy301:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy310;
	goto yy262;
yy302:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy311;
	goto yy262;
yy303:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy312;
yy304:
#line 442 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 1853 "src/parse/lex.cc"
yy305:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy313;
	goto yy253;
yy306:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy262;
	if (yych <= '9') goto yy306;
	if (yych == '}') goto yy315;
	goto yy262;
yy308:
	++YYCURSOR;
#line 377 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1877 "src/parse/lex.cc"
yy310:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy317;
	goto yy262;
yy311:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy318;
	goto yy262;
yy312:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy262;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy319;
		}
		goto yy262;
	} else {
		if (yych == '`') goto yy262;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy319;
		}
		goto yy262;
	}
yy313:
	++YYCURSOR;
#line 401 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 1907 "src/parse/lex.cc"
yy315:
	++YYCURSOR;
	p = yyt1;
#line 365 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 1923 "src/parse/lex.cc"
yy317:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy322;
	if (yych <= '9') goto yy262;
	goto yy322;
yy318:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy323;
	goto yy262;
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy262;
			goto yy319;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy324;
			}
			goto yy262;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy319;
			if (yych <= '^') goto yy262;
			goto yy319;
		} else {
			if (yych <= '`') goto yy262;
			if (yych <= 'z') goto yy319;
			goto yy262;
		}
	}
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy322:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy321;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy321;
		if (yych <= '0') goto yy262;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy325;
		}
		goto yy262;
	}
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy327;
	goto yy262;
yy324:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy329;
	if (yych == '\r') goto yy331;
	goto yy262;
yy325:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy262;
			goto yy332;
		} else {
			if (yych <= '\n') goto yy334;
			if (yych <= '\f') goto yy262;
			goto yy336;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy262;
			goto yy332;
		} else {
			if (yych <= '/') goto yy262;
			if (yych <= '9') goto yy325;
			goto yy262;
		}
	}
yy327:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy337;
	if (yych == ' ') goto yy337;
yy328:
#line 431 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2020 "src/parse/lex.cc"
yy329:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 437 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2031 "src/parse/lex.cc"
yy331:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy329;
	goto yy262;
yy332:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy332;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy332;
		if (yych == '"') goto yy339;
		goto yy262;
	}
yy334:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 455 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2056 "src/parse/lex.cc"
yy336:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy334;
	goto yy262;
yy337:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy337;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy337;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy341;
		}
		goto yy262;
	}
yy339:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy339;
	}
	if (yych <= '\n') goto yy262;
	if (yych <= '"') goto yy343;
	goto yy344;
yy341:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy262;
		if (yych == '\n') goto yy262;
		goto yy341;
	} else {
		if (yych <= '"') goto yy345;
		if (yych == '\\') goto yy346;
		goto yy341;
	}
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy334;
	if (yych == '\r') goto yy336;
	goto yy262;
yy344:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy262;
	if (yych == '\n') goto yy262;
	goto yy339;
yy345:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy347;
		}
		goto yy262;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy347;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy349;
		}
		goto yy262;
	}
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy262;
	if (yych == '\n') goto yy262;
	goto yy341;
yy347:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy347;
		goto yy262;
	} else {
		if (yych <= ' ') goto yy347;
		if (yych != ';') goto yy262;
	}
yy349:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	if (yych == '\r') goto yy352;
	goto yy262;
yy350:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 426 "../src/parse/lex.re"
	{
        next_line();
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2163 "src/parse/lex.cc"
yy352:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy350;
	goto yy262;
}
#line 475 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2176 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy356;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy356;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy359;
		}
	}
yy355:
#line 482 "../src/parse/lex.re"
	{ return false; }
#line 2233 "src/parse/lex.cc"
yy356:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy356;
	}
	if (yych == '=') goto yy359;
yy358:
	YYCURSOR = YYMARKER;
	goto yy355;
yy359:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy358;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 481 "../src/parse/lex.re"
	{ return true; }
#line 2252 "src/parse/lex.cc"
}
#line 483 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2261 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy365;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy365;
	}
#line 491 "../src/parse/lex.re"
	{ return false; }
#line 2310 "src/parse/lex.cc"
yy365:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy365;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy368;
	} else {
		if (yych <= '=') goto yy368;
		if (yych == '{') goto yy368;
	}
	YYCURSOR = yyt1;
#line 490 "../src/parse/lex.re"
	{ return true; }
#line 2327 "src/parse/lex.cc"
yy368:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 489 "../src/parse/lex.re"
	{ return false; }
#line 2333 "src/parse/lex.cc"
}
#line 492 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2344 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy370;
yy371:
	++YYCURSOR;
yy370:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy371;
	}
	if (yych <= 0x1F) goto yy373;
	if (yych <= '!') goto yy374;
	if (yych == '>') goto yy377;
yy373:
#line 502 "../src/parse/lex.re"
	{ goto cond; }
#line 2396 "src/parse/lex.cc"
yy374:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy374;
	if (yych == ' ') goto yy374;
#line 500 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2405 "src/parse/lex.cc"
yy377:
	++YYCURSOR;
#line 501 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2410 "src/parse/lex.cc"
}
#line 503 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2417 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy383;
		if (yych >= 'A') goto yy385;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy385;
		} else {
			if (yych <= '`') goto yy381;
			if (yych <= 'z') goto yy385;
		}
	}
yy381:
	++YYCURSOR;
#line 509 "../src/parse/lex.re"
	{ goto error; }
#line 2471 "src/parse/lex.cc"
yy383:
	++YYCURSOR;
#line 508 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2476 "src/parse/lex.cc"
yy385:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy385;
	}
#line 507 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2486 "src/parse/lex.cc"
}
#line 510 "../src/parse/lex.re"

next:

#line 2492 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy392;
		if (yych >= ' ') goto yy392;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy393;
		} else {
			if (yych == '>') goto yy396;
		}
	}
	++YYCURSOR;
yy391:
#line 515 "../src/parse/lex.re"
	{ goto error; }
#line 2545 "src/parse/lex.cc"
yy392:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy398;
		if (yych <= 0x1F) goto yy391;
		goto yy398;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy391;
		} else {
			if (yych == '>') goto yy396;
			goto yy391;
		}
	}
yy393:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy393;
	}
#line 513 "../src/parse/lex.re"
	{ goto cond; }
#line 2569 "src/parse/lex.cc"
yy396:
	++YYCURSOR;
#line 514 "../src/parse/lex.re"
	{ goto end; }
#line 2574 "src/parse/lex.cc"
yy398:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy398;
		if (yych >= ' ') goto yy398;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy393;
		} else {
			if (yych == '>') goto yy396;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy391;
}
#line 516 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 2609 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy403;
			if (yych == '\n') goto yy407;
			goto yy405;
		} else {
			if (yych <= '\r') goto yy409;
			if (yych == '"') goto yy410;
			goto yy405;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy410;
			if (yych == '/') goto yy412;
			goto yy405;
		} else {
			if (yych == '|') goto yy405;
			if (yych <= '}') goto yy413;
			goto yy405;
		}
	}
yy403:
	++YYCURSOR;
#line 542 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2639 "src/parse/lex.cc"
yy405:
	++YYCURSOR;
yy406:
#line 550 "../src/parse/lex.re"
	{ goto code; }
#line 2645 "src/parse/lex.cc"
yy407:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy408;
		if (yych <= '\n') goto yy415;
	} else {
		if (yych <= '\r') goto yy415;
		if (yych == ' ') goto yy415;
	}
yy408:
#line 533 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 2665 "src/parse/lex.cc"
yy409:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy407;
	goto yy406;
yy410:
	++YYCURSOR;
#line 549 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2674 "src/parse/lex.cc"
yy412:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy417;
	if (yych == '/') goto yy419;
	goto yy406;
yy413:
	++YYCURSOR;
#line 543 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 2687 "src/parse/lex.cc"
yy415:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 532 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2693 "src/parse/lex.cc"
yy417:
	++YYCURSOR;
#line 547 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2698 "src/parse/lex.cc"
yy419:
	++YYCURSOR;
#line 548 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2703 "src/parse/lex.cc"
}
#line 551 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 2715 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy423;
			if (yych == '\n') goto yy427;
			goto yy425;
		} else {
			if (yych <= '\r') goto yy429;
			if (yych == '"') goto yy430;
			goto yy425;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy430;
			if (yych == '/') goto yy432;
			goto yy425;
		} else {
			if (yych <= '{') goto yy433;
			if (yych == '}') goto yy435;
			goto yy425;
		}
	}
yy423:
	++YYCURSOR;
#line 571 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 2779 "src/parse/lex.cc"
yy425:
	++YYCURSOR;
yy426:
#line 575 "../src/parse/lex.re"
	{ goto code; }
#line 2785 "src/parse/lex.cc"
yy427:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy437;
	}
	if (yych == '#') goto yy440;
yy428:
#line 570 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 2795 "src/parse/lex.cc"
yy429:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy427;
	goto yy426;
yy430:
	++YYCURSOR;
#line 574 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 2804 "src/parse/lex.cc"
yy432:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy442;
	if (yych == '/') goto yy444;
	goto yy426;
yy433:
	++YYCURSOR;
#line 568 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 2814 "src/parse/lex.cc"
yy435:
	++YYCURSOR;
#line 560 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 2825 "src/parse/lex.cc"
yy437:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy437;
	}
	if (yych == '#') goto yy440;
yy439:
	YYCURSOR = YYMARKER;
	goto yy428;
yy440:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy440;
		goto yy439;
	} else {
		if (yych <= ' ') goto yy440;
		if (yych == 'l') goto yy446;
		goto yy439;
	}
yy442:
	++YYCURSOR;
#line 572 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 2853 "src/parse/lex.cc"
yy444:
	++YYCURSOR;
#line 573 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 2858 "src/parse/lex.cc"
yy446:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy439;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy439;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy439;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy451;
	if (yych <= '9') goto yy439;
	goto yy451;
yy450:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy451:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy450;
		goto yy439;
	} else {
		if (yych <= ' ') goto yy450;
		if (yych <= '0') goto yy439;
		if (yych >= ':') goto yy439;
		yyt1 = YYCURSOR;
	}
yy452:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy452;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy439;
		if (yych <= '\t') goto yy454;
		if (yych <= '\n') goto yy456;
		goto yy439;
	} else {
		if (yych <= '\r') goto yy458;
		if (yych != ' ') goto yy439;
	}
yy454:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy454;
		goto yy439;
	} else {
		if (yych <= ' ') goto yy454;
		if (yych == '"') goto yy459;
		goto yy439;
	}
yy456:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 569 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 2917 "src/parse/lex.cc"
yy458:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy456;
	goto yy439;
yy459:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy459;
	}
	if (yych <= '\n') goto yy439;
	if (yych >= '#') goto yy462;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy456;
	if (yych == '\r') goto yy458;
	goto yy439;
yy462:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy439;
	if (yych == '\n') goto yy439;
	goto yy459;
}
#line 576 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 2951 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy465;
			if (yych <= '\t') goto yy467;
			goto yy469;
		} else {
			if (yych == '\r') goto yy471;
			goto yy467;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy472;
			if (yych <= '&') goto yy467;
			goto yy472;
		} else {
			if (yych == '\\') goto yy474;
			goto yy467;
		}
	}
yy465:
	++YYCURSOR;
#line 586 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2979 "src/parse/lex.cc"
yy467:
	++YYCURSOR;
yy468:
#line 587 "../src/parse/lex.re"
	{ goto loop; }
#line 2985 "src/parse/lex.cc"
yy469:
	++YYCURSOR;
#line 585 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 2990 "src/parse/lex.cc"
yy471:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy469;
	goto yy468;
yy472:
	++YYCURSOR;
#line 583 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 2999 "src/parse/lex.cc"
yy474:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy468;
	} else {
		if (yych <= '\'') goto yy475;
		if (yych != '\\') goto yy468;
	}
yy475:
	++YYCURSOR;
#line 584 "../src/parse/lex.re"
	{ goto loop; }
#line 3012 "src/parse/lex.cc"
}
#line 588 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3022 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy479;
		if (yych == '\n') goto yy483;
		goto yy481;
	} else {
		if (yych <= '\r') goto yy485;
		if (yych == '*') goto yy486;
		goto yy481;
	}
yy479:
	++YYCURSOR;
#line 597 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3040 "src/parse/lex.cc"
yy481:
	++YYCURSOR;
yy482:
#line 598 "../src/parse/lex.re"
	{ goto loop; }
#line 3046 "src/parse/lex.cc"
yy483:
	++YYCURSOR;
#line 596 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3051 "src/parse/lex.cc"
yy485:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy483;
	goto yy482;
yy486:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy482;
	++YYCURSOR;
#line 595 "../src/parse/lex.re"
	{ return; }
#line 3062 "src/parse/lex.cc"
}
#line 599 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3072 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy491;
		if (yych <= '\t') goto yy493;
		goto yy495;
	} else {
		if (yych == '\r') goto yy497;
		goto yy493;
	}
yy491:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3089 "src/parse/lex.cc"
yy493:
	++YYCURSOR;
yy494:
#line 608 "../src/parse/lex.re"
	{ goto loop; }
#line 3095 "src/parse/lex.cc"
yy495:
	++YYCURSOR;
#line 606 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3100 "src/parse/lex.cc"
yy497:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy495;
	goto yy494;
}
#line 609 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3119 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy501;
#line 622 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3127 "src/parse/lex.cc"
yy501:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3132 "src/parse/lex.cc"
}
#line 623 "../src/parse/lex.re"

snd:

#line 3138 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy506;
yy505:
#line 626 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3147 "src/parse/lex.cc"
yy506:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy508;
	YYCURSOR = YYMARKER;
	goto yy505;
yy508:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 627 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3165 "src/parse/lex.cc"
}
#line 635 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 672 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3183 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy512;
		if (yych == '\n') goto yy516;
		goto yy514;
	} else {
		if (yych <= '\r') goto yy518;
		if (yych == '\\') goto yy519;
		goto yy514;
	}
yy512:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3202 "src/parse/lex.cc"
yy514:
	++YYCURSOR;
yy515:
#line 655 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3208 "src/parse/lex.cc"
yy516:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3213 "src/parse/lex.cc"
yy518:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy516;
	goto yy515;
yy519:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy520;
				if (yych == '\n') goto yy516;
				goto yy521;
			} else {
				if (yych <= '\r') goto yy523;
				if (yych == '-') goto yy524;
				goto yy521;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy526;
				if (yych <= '7') goto yy528;
				if (yych <= 'T') goto yy521;
				goto yy529;
			} else {
				if (yych == 'X') goto yy531;
				if (yych <= '[') goto yy521;
				goto yy532;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy534;
				if (yych <= '`') goto yy521;
				if (yych <= 'a') goto yy536;
				goto yy538;
			} else {
				if (yych == 'f') goto yy540;
				if (yych <= 'm') goto yy521;
				goto yy542;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy544;
				if (yych <= 's') goto yy521;
				goto yy546;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy531;
					goto yy548;
				} else {
					if (yych == 'x') goto yy550;
					goto yy521;
				}
			}
		}
	}
yy520:
#line 650 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3274 "src/parse/lex.cc"
yy521:
	++YYCURSOR;
yy522:
#line 668 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3283 "src/parse/lex.cc"
yy523:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy516;
	goto yy522;
yy524:
	++YYCURSOR;
#line 666 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3292 "src/parse/lex.cc"
yy526:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy527;
	if (yych <= '7') goto yy551;
yy527:
#line 649 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3301 "src/parse/lex.cc"
yy528:
	++YYCURSOR;
	goto yy527;
yy529:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy553;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy553;
	}
yy530:
#line 648 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3319 "src/parse/lex.cc"
yy531:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy554;
		goto yy530;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy554;
		goto yy530;
	}
yy532:
	++YYCURSOR;
#line 665 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3337 "src/parse/lex.cc"
yy534:
	++YYCURSOR;
#line 667 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3342 "src/parse/lex.cc"
yy536:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3347 "src/parse/lex.cc"
yy538:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3352 "src/parse/lex.cc"
yy540:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3357 "src/parse/lex.cc"
yy542:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3362 "src/parse/lex.cc"
yy544:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3367 "src/parse/lex.cc"
yy546:
	++YYCURSOR;
#line 663 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3372 "src/parse/lex.cc"
yy548:
	++YYCURSOR;
#line 664 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3377 "src/parse/lex.cc"
yy550:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy530;
		if (yych <= '9') goto yy555;
		goto yy530;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy530;
		if (yych <= 'f') goto yy555;
		goto yy530;
	}
yy551:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy552;
	if (yych <= '7') goto yy556;
yy552:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy527;
	} else {
		goto yy530;
	}
yy553:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy558;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy558;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy558;
		goto yy552;
	}
yy554:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy559;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy559;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy559;
		goto yy552;
	}
yy555:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy560;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy560;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy560;
		goto yy552;
	}
yy556:
	++YYCURSOR;
#line 657 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3442 "src/parse/lex.cc"
yy558:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy562;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy562;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy562;
		goto yy552;
	}
yy559:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy555;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy555;
		goto yy552;
	}
yy560:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3471 "src/parse/lex.cc"
yy562:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych >= ':') goto yy552;
	} else {
		if (yych <= 'F') goto yy563;
		if (yych <= '`') goto yy552;
		if (yych >= 'g') goto yy552;
	}
yy563:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy552;
		if (yych <= '9') goto yy554;
		goto yy552;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy552;
		if (yych <= 'f') goto yy554;
		goto yy552;
	}
}
#line 674 "../src/parse/lex.re"

    }
    else {
        
#line 3500 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy566;
			if (yych == '\n') goto yy570;
			goto yy568;
		} else {
			if (yych <= '\r') goto yy572;
			if (yych == '\\') goto yy573;
			goto yy568;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy575;
			if (yych <= 0xDF) goto yy577;
			if (yych <= 0xE0) goto yy578;
			goto yy579;
		} else {
			if (yych <= 0xF0) goto yy580;
			if (yych <= 0xF3) goto yy581;
			if (yych <= 0xF4) goto yy582;
			goto yy575;
		}
	}
yy566:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3533 "src/parse/lex.cc"
yy568:
	++YYCURSOR;
yy569:
#line 655 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3539 "src/parse/lex.cc"
yy570:
	++YYCURSOR;
#line 647 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3544 "src/parse/lex.cc"
yy572:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy570;
	goto yy569;
yy573:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy583;
				} else {
					if (yych <= '\n') goto yy570;
					if (yych <= '\f') goto yy583;
					goto yy585;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy583;
					goto yy586;
				} else {
					if (yych <= '/') goto yy583;
					if (yych <= '3') goto yy588;
					goto yy590;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy583;
					goto yy591;
				} else {
					if (yych == 'X') goto yy593;
					goto yy583;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy594;
					goto yy596;
				} else {
					if (yych <= '`') goto yy583;
					if (yych <= 'a') goto yy598;
					goto yy600;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy583;
					goto yy602;
				} else {
					if (yych == 'n') goto yy604;
					goto yy583;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy606;
					goto yy583;
				} else {
					if (yych <= 't') goto yy608;
					if (yych <= 'u') goto yy593;
					goto yy610;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy583;
					goto yy612;
				} else {
					if (yych <= 0x7F) goto yy583;
					if (yych >= 0xC2) goto yy613;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy615;
					if (yych <= 0xEF) goto yy616;
					goto yy617;
				} else {
					if (yych <= 0xF3) goto yy618;
					if (yych <= 0xF4) goto yy619;
				}
			}
		}
	}
yy574:
#line 650 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3636 "src/parse/lex.cc"
yy575:
	++YYCURSOR;
yy576:
#line 651 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 3642 "src/parse/lex.cc"
yy577:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy576;
	if (yych <= 0xBF) goto yy568;
	goto yy576;
yy578:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy576;
	if (yych <= 0xBF) goto yy620;
	goto yy576;
yy579:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy576;
	if (yych <= 0xBF) goto yy620;
	goto yy576;
yy580:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy576;
	if (yych <= 0xBF) goto yy621;
	goto yy576;
yy581:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy576;
	if (yych <= 0xBF) goto yy621;
	goto yy576;
yy582:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy576;
	if (yych <= 0x8F) goto yy621;
	goto yy576;
yy583:
	++YYCURSOR;
yy584:
#line 668 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3686 "src/parse/lex.cc"
yy585:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy570;
	goto yy584;
yy586:
	++YYCURSOR;
#line 666 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3695 "src/parse/lex.cc"
yy588:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy589;
	if (yych <= '7') goto yy622;
yy589:
#line 649 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3704 "src/parse/lex.cc"
yy590:
	++YYCURSOR;
	goto yy589;
yy591:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy623;
	} else {
		if (yych <= 'F') goto yy623;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy623;
	}
yy592:
#line 648 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3722 "src/parse/lex.cc"
yy593:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy624;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy624;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy624;
		goto yy592;
	}
yy594:
	++YYCURSOR;
#line 665 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3740 "src/parse/lex.cc"
yy596:
	++YYCURSOR;
#line 667 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3745 "src/parse/lex.cc"
yy598:
	++YYCURSOR;
#line 658 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3750 "src/parse/lex.cc"
yy600:
	++YYCURSOR;
#line 659 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3755 "src/parse/lex.cc"
yy602:
	++YYCURSOR;
#line 660 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3760 "src/parse/lex.cc"
yy604:
	++YYCURSOR;
#line 661 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3765 "src/parse/lex.cc"
yy606:
	++YYCURSOR;
#line 662 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3770 "src/parse/lex.cc"
yy608:
	++YYCURSOR;
#line 663 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3775 "src/parse/lex.cc"
yy610:
	++YYCURSOR;
#line 664 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3780 "src/parse/lex.cc"
yy612:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy625;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy625;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy625;
		goto yy592;
	}
yy613:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy583;
yy614:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy574;
		} else {
			goto yy576;
		}
	} else {
		if (yyaccept == 2) {
			goto yy589;
		} else {
			goto yy592;
		}
	}
yy615:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy614;
	if (yych <= 0xBF) goto yy613;
	goto yy614;
yy616:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy613;
	goto yy614;
yy617:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy614;
	if (yych <= 0xBF) goto yy616;
	goto yy614;
yy618:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy616;
	goto yy614;
yy619:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0x8F) goto yy616;
	goto yy614;
yy620:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy568;
	goto yy614;
yy621:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy620;
	goto yy614;
yy622:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy614;
	if (yych <= '7') goto yy626;
	goto yy614;
yy623:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy628;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy628;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy628;
		goto yy614;
	}
yy624:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy629;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy629;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy629;
		goto yy614;
	}
yy625:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy630;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy630;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy630;
		goto yy614;
	}
yy626:
	++YYCURSOR;
#line 657 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3893 "src/parse/lex.cc"
yy628:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy632;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy632;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy632;
		goto yy614;
	}
yy629:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy625;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy625;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy625;
		goto yy614;
	}
yy630:
	++YYCURSOR;
#line 656 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 3922 "src/parse/lex.cc"
yy632:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych >= ':') goto yy614;
	} else {
		if (yych <= 'F') goto yy633;
		if (yych <= '`') goto yy614;
		if (yych >= 'g') goto yy614;
	}
yy633:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy614;
		if (yych <= '9') goto yy624;
		goto yy614;
	} else {
		if (yych <= 'F') goto yy624;
		if (yych <= '`') goto yy614;
		if (yych <= 'f') goto yy624;
		goto yy614;
	}
}
#line 677 "../src/parse/lex.re"
 #line 677 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 711 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3961 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy636;
		if (yych == '\n') goto yy640;
		goto yy638;
	} else {
		if (yych <= '\r') goto yy642;
		if (yych == '\\') goto yy643;
		goto yy638;
	}
yy636:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 3980 "src/parse/lex.cc"
yy638:
	++YYCURSOR;
yy639:
#line 695 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 3986 "src/parse/lex.cc"
yy640:
	++YYCURSOR;
#line 687 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 3991 "src/parse/lex.cc"
yy642:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy640;
	goto yy639;
yy643:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy644;
				if (yych <= '\t') goto yy645;
				goto yy640;
			} else {
				if (yych == '\r') goto yy647;
				if (yych <= '/') goto yy645;
				goto yy648;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy650;
				if (yych == 'U') goto yy651;
				goto yy645;
			} else {
				if (yych <= 'X') goto yy653;
				if (yych == '\\') goto yy654;
				goto yy645;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy656;
				if (yych <= 'b') goto yy658;
				goto yy645;
			} else {
				if (yych <= 'f') goto yy660;
				if (yych == 'n') goto yy662;
				goto yy645;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy664;
				if (yych <= 's') goto yy645;
				if (yych <= 't') goto yy666;
				goto yy653;
			} else {
				if (yych <= 'v') goto yy668;
				if (yych == 'x') goto yy670;
				goto yy645;
			}
		}
	}
yy644:
#line 690 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4047 "src/parse/lex.cc"
yy645:
	++YYCURSOR;
yy646:
#line 706 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4057 "src/parse/lex.cc"
yy647:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy640;
	goto yy646;
yy648:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy649;
	if (yych <= '7') goto yy671;
yy649:
#line 689 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4070 "src/parse/lex.cc"
yy650:
	++YYCURSOR;
	goto yy649;
yy651:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy673;
	} else {
		if (yych <= 'F') goto yy673;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy673;
	}
yy652:
#line 688 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4088 "src/parse/lex.cc"
yy653:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy674;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy674;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy674;
		goto yy652;
	}
yy654:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4106 "src/parse/lex.cc"
yy656:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4111 "src/parse/lex.cc"
yy658:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4116 "src/parse/lex.cc"
yy660:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4121 "src/parse/lex.cc"
yy662:
	++YYCURSOR;
#line 701 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4126 "src/parse/lex.cc"
yy664:
	++YYCURSOR;
#line 702 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4131 "src/parse/lex.cc"
yy666:
	++YYCURSOR;
#line 703 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4136 "src/parse/lex.cc"
yy668:
	++YYCURSOR;
#line 704 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4141 "src/parse/lex.cc"
yy670:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy675;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy675;
		goto yy652;
	}
yy671:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy672;
	if (yych <= '7') goto yy676;
yy672:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy649;
	} else {
		goto yy652;
	}
yy673:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy678;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy678;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy678;
		goto yy672;
	}
yy674:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy679;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy679;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy679;
		goto yy672;
	}
yy675:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy680;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy680;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy680;
		goto yy672;
	}
yy676:
	++YYCURSOR;
#line 697 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4206 "src/parse/lex.cc"
yy678:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy682;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy682;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy682;
		goto yy672;
	}
yy679:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy675;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy675;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy675;
		goto yy672;
	}
yy680:
	++YYCURSOR;
#line 696 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4235 "src/parse/lex.cc"
yy682:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych >= ':') goto yy672;
	} else {
		if (yych <= 'F') goto yy683;
		if (yych <= '`') goto yy672;
		if (yych >= 'g') goto yy672;
	}
yy683:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy672;
		if (yych <= '9') goto yy674;
		goto yy672;
	} else {
		if (yych <= 'F') goto yy674;
		if (yych <= '`') goto yy672;
		if (yych <= 'f') goto yy674;
		goto yy672;
	}
}
#line 713 "../src/parse/lex.re"

    }
    else {
        
#line 4264 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy686;
			if (yych == '\n') goto yy690;
			goto yy688;
		} else {
			if (yych <= '\r') goto yy692;
			if (yych == '\\') goto yy693;
			goto yy688;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy695;
			if (yych <= 0xDF) goto yy697;
			if (yych <= 0xE0) goto yy698;
			goto yy699;
		} else {
			if (yych <= 0xF0) goto yy700;
			if (yych <= 0xF3) goto yy701;
			if (yych <= 0xF4) goto yy702;
			goto yy695;
		}
	}
yy686:
	++YYCURSOR;
#line 693 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4297 "src/parse/lex.cc"
yy688:
	++YYCURSOR;
yy689:
#line 695 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4303 "src/parse/lex.cc"
yy690:
	++YYCURSOR;
#line 687 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4308 "src/parse/lex.cc"
yy692:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy690;
	goto yy689;
yy693:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy694;
				if (yych == '\n') goto yy690;
				goto yy703;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy705;
					goto yy703;
				} else {
					if (yych <= '3') goto yy706;
					if (yych <= '7') goto yy708;
					goto yy703;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy709;
					goto yy703;
				} else {
					if (yych <= 'X') goto yy711;
					if (yych <= '[') goto yy703;
					goto yy712;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy703;
					goto yy714;
				} else {
					if (yych <= 'b') goto yy716;
					if (yych <= 'e') goto yy703;
					goto yy718;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy720;
				if (yych <= 'q') goto yy703;
				goto yy722;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy703;
					goto yy724;
				} else {
					if (yych <= 'u') goto yy711;
					if (yych <= 'v') goto yy726;
					goto yy703;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy728;
					goto yy703;
				} else {
					if (yych <= 0xC1) goto yy694;
					if (yych <= 0xDF) goto yy729;
					goto yy731;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy732;
					goto yy733;
				} else {
					if (yych <= 0xF3) goto yy734;
					if (yych <= 0xF4) goto yy735;
				}
			}
		}
	}
yy694:
#line 690 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4393 "src/parse/lex.cc"
yy695:
	++YYCURSOR;
yy696:
#line 691 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4399 "src/parse/lex.cc"
yy697:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy688;
	goto yy696;
yy698:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy696;
	if (yych <= 0xBF) goto yy736;
	goto yy696;
yy699:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy736;
	goto yy696;
yy700:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy696;
	if (yych <= 0xBF) goto yy737;
	goto yy696;
yy701:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0xBF) goto yy737;
	goto yy696;
yy702:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy696;
	if (yych <= 0x8F) goto yy737;
	goto yy696;
yy703:
	++YYCURSOR;
yy704:
#line 706 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4444 "src/parse/lex.cc"
yy705:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy690;
	goto yy704;
yy706:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy707;
	if (yych <= '7') goto yy738;
yy707:
#line 689 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4457 "src/parse/lex.cc"
yy708:
	++YYCURSOR;
	goto yy707;
yy709:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy739;
	} else {
		if (yych <= 'F') goto yy739;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy739;
	}
yy710:
#line 688 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4475 "src/parse/lex.cc"
yy711:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy740;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy740;
		goto yy710;
	}
yy712:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4493 "src/parse/lex.cc"
yy714:
	++YYCURSOR;
#line 698 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4498 "src/parse/lex.cc"
yy716:
	++YYCURSOR;
#line 699 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4503 "src/parse/lex.cc"
yy718:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4508 "src/parse/lex.cc"
yy720:
	++YYCURSOR;
#line 701 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4513 "src/parse/lex.cc"
yy722:
	++YYCURSOR;
#line 702 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4518 "src/parse/lex.cc"
yy724:
	++YYCURSOR;
#line 703 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4523 "src/parse/lex.cc"
yy726:
	++YYCURSOR;
#line 704 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4528 "src/parse/lex.cc"
yy728:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy741;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy741;
		goto yy710;
	}
yy729:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy703;
yy730:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy694;
		} else {
			goto yy696;
		}
	} else {
		if (yyaccept == 2) {
			goto yy707;
		} else {
			goto yy710;
		}
	}
yy731:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy730;
	if (yych <= 0xBF) goto yy729;
	goto yy730;
yy732:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy729;
	goto yy730;
yy733:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy730;
	if (yych <= 0xBF) goto yy732;
	goto yy730;
yy734:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy732;
	goto yy730;
yy735:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0x8F) goto yy732;
	goto yy730;
yy736:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy688;
	goto yy730;
yy737:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy730;
	if (yych <= 0xBF) goto yy736;
	goto yy730;
yy738:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy730;
	if (yych <= '7') goto yy742;
	goto yy730;
yy739:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy744;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy744;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy744;
		goto yy730;
	}
yy740:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy745;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy745;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy745;
		goto yy730;
	}
yy741:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy746;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy746;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy746;
		goto yy730;
	}
yy742:
	++YYCURSOR;
#line 697 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4641 "src/parse/lex.cc"
yy744:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy748;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy748;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy748;
		goto yy730;
	}
yy745:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy741;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy741;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy741;
		goto yy730;
	}
yy746:
	++YYCURSOR;
#line 696 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4670 "src/parse/lex.cc"
yy748:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych >= ':') goto yy730;
	} else {
		if (yych <= 'F') goto yy749;
		if (yych <= '`') goto yy730;
		if (yych >= 'g') goto yy730;
	}
yy749:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy730;
		if (yych <= '9') goto yy740;
		goto yy730;
	} else {
		if (yych <= 'F') goto yy740;
		if (yych <= '`') goto yy730;
		if (yych <= 'f') goto yy740;
		goto yy730;
	}
}
#line 716 "../src/parse/lex.re"
 #line 716 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 4718 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy754;
		} else {
			if (yych <= '\n') goto yy756;
			if (yych <= '\f') goto yy754;
			goto yy758;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy754;
			goto yy759;
		} else {
			if (yych <= '0') goto yy754;
			if (yych <= '9') goto yy760;
			goto yy754;
		}
	}
	++YYCURSOR;
#line 759 "../src/parse/lex.re"
	{ --cur; return; }
#line 4778 "src/parse/lex.cc"
yy754:
	++YYCURSOR;
yy755:
#line 760 "../src/parse/lex.re"
	{ goto sourceline; }
#line 4784 "src/parse/lex.cc"
yy756:
	++YYCURSOR;
#line 758 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 4789 "src/parse/lex.cc"
yy758:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy756;
	goto yy755;
yy759:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy755;
	if (yych == '\n') goto yy755;
	goto yy764;
yy760:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy760;
	}
#line 738 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 4816 "src/parse/lex.cc"
yy763:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy764:
	if (yybm[0+yych] & 128) {
		goto yy763;
	}
	if (yych <= '\n') goto yy765;
	if (yych <= '"') goto yy766;
	goto yy768;
yy765:
	YYCURSOR = YYMARKER;
	goto yy755;
yy766:
	++YYCURSOR;
#line 748 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 4843 "src/parse/lex.cc"
yy768:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy765;
	if (yych == '\n') goto yy765;
	goto yy763;
}
#line 761 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
