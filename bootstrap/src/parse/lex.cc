/* Generated by re2c 2.1.1 on Fri May 28 10:53:19 2021 */
#line 1 "../src/parse/lex.re"
#include <ctype.h>
#include "src/util/c99_stdint.h"
#include <algorithm>
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "src/codegen/code.h"
#include "src/encoding/enc.h"
#include "src/msg/location.h"
#include "src/msg/msg.h"
#include "src/msg/warn.h"
#include "src/options/opt.h"
#include "src/parse/ast.h"
#include "src/parse/input.h"
#include "src/parse/lex.h"
#include "src/parse/scanner.h"
#include "src/parse/parse.h" // needed by "parser.h"
#include "src/parse/unescape.h"
#include "src/regexp/rule.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "parser.h"


extern YYSTYPE yylval;

namespace re2c {

#define YYCTYPE   unsigned char
#define YYCURSOR  cur
#define YYLIMIT   lim
#define YYMARKER  mar
#define YYFILL(n) do { if (!fill(n)) { error("unexpected end of input"); exit(1); }} while(0)

#line 62 "../src/parse/lex.re"


#line 121 "../src/parse/lex.re"


static inline void save_string(std::string &str, const char *s, const char *e)
{
    if (s == NULL) {
        str.clear();
    } else {
        str.assign(s, e);
    }
}

void Scanner::error_block_start(const char *block) const
{
    msg.error(cur_loc(), "ill-formed start of a block: expected `/*!%s`"
        " followed by a space, a newline or the end of block `*/`", block);
}

void Scanner::error_named_block_start(const char *block) const
{
    msg.error(cur_loc(), "ill-formed start of a block: expected `/*!%s`"
        ", optionally followed by a name of the form `:[a-zA-Z_][a-zA-Z0-9_]*`"
        ", followed by a space, a newline or the end of block `*/`", block);
}

void Scanner::error_include_directive() const
{
    msg.error(cur_loc(), "ill-formed include directive: expected `/*"
        // split string to prevent re2c from lexing this as a real directive
        "!include:re2c \"<file>\" */`");
}

void Scanner::error_header_directive() const
{
    msg.error(cur_loc(), "ill-formed header directive: expected `/*"
        // split string to prevent re2c from lexing this as a real directive
        "!header:re2c:<on|off>`"
        " followed by a space, a newline or the end of block `*/`");
}

Scanner::ParseMode Scanner::echo(Output &out)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;
    if (is_eof()) return Stop;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 96 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0,  64,  64,  64,  64,  64,  64,  64, 
		 64,  80,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 80,  64,   0,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224,  64,  64,  64,  64,  64,  64, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,   0,  64,  64, 192, 
		 64, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
		 64,  64,  64,  64,  64,  64,  64,  64, 
	};
	if ((YYLIMIT - YYCURSOR) < 20) YYFILL(20);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 286 "../src/parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return Stop;
        }
        goto loop;
    }
#line 162 "src/parse/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 306 "../src/parse/lex.re"
	{ goto loop; }
#line 168 "src/parse/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 301 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 182 "src/parse/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 6) {
		if (yyaccept <= 3) {
			if (yyaccept <= 1) {
				if (yyaccept == 0) {
					goto yy7;
				} else {
					goto yy5;
				}
			} else {
				if (yyaccept == 2) {
					goto yy64;
				} else {
					goto yy121;
				}
			}
		} else {
			if (yyaccept <= 5) {
				if (yyaccept == 4) {
					goto yy128;
				} else {
					goto yy151;
				}
			} else {
				goto yy153;
			}
		}
	} else {
		if (yyaccept <= 10) {
			if (yyaccept <= 8) {
				if (yyaccept == 7) {
					goto yy155;
				} else {
					goto yy157;
				}
			} else {
				if (yyaccept == 9) {
					goto yy162;
				} else {
					goto yy164;
				}
			}
		} else {
			if (yyaccept <= 12) {
				if (yyaccept == 11) {
					goto yy186;
				} else {
					goto yy191;
				}
			} else {
				goto yy204;
			}
		}
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 173 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 278 "src/parse/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'h':	goto yy23;
	case 'i':	goto yy24;
	case 'm':	goto yy25;
	case 'r':	goto yy26;
	case 's':	goto yy27;
	case 't':	goto yy28;
	case 'u':	goto yy29;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy30;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy31;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy32;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy33;
	if (yych == 'n') goto yy34;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy35;
	if (yych == 't') goto yy36;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy37;
	if (yych == 'u') goto yy38;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy39;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy40;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy41;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy42;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy43;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy44;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy45;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy46;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy47;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy48;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy49;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy50;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy51;
	goto yy13;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy52;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy53;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy55;
	if (yych <= '9') goto yy13;
	goto yy55;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy56;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy57;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy58;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy59;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy60;
	if (yych == 'n') goto yy61;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy62;
	goto yy13;
yy49:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy63;
	goto yy13;
yy50:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy65;
	goto yy13;
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy66;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy67;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy68;
	goto yy13;
yy54:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy55:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy54;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy54;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy69;
		}
		goto yy13;
	}
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy71;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy72;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy73;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy74;
	goto yy13;
yy60:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy75;
	goto yy13;
yy61:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy76;
	goto yy13;
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy77;
	goto yy13;
yy63:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy64;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy78;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy78;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy78;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy80;
			}
		}
	}
yy64:
#line 273 "../src/parse/lex.re"
	{ error_block_start("re2c");             exit(1); }
#line 511 "src/parse/lex.cc"
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy81;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy82;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy83;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy84;
	goto yy13;
yy69:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy69;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy85;
		if (yych <= '\n') goto yy87;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy89;
		if (yych == ' ') goto yy85;
		goto yy13;
	}
yy71:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy90;
	goto yy13;
yy72:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy91;
	goto yy13;
yy73:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy92;
	goto yy13;
yy74:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy93;
	goto yy13;
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy94;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy95;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy96;
	goto yy13;
yy78:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 178 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 581 "src/parse/lex.cc"
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy78;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy97;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy98;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy99;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy100;
	goto yy13;
yy85:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy85;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy85;
		if (yych == '"') goto yy101;
		goto yy13;
	}
yy87:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 294 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 624 "src/parse/lex.cc"
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy87;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy103;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy104;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy105;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy107;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy108;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy109;
	goto yy13;
yy97:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy110;
	goto yy13;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy111;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy112;
	goto yy13;
yy100:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy101:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy101;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy114;
	goto yy115;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy116;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy117;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy118;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy119;
	goto yy13;
yy107:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy120;
	goto yy13;
yy108:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy122;
	goto yy13;
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy123;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy124;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy125;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy126;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy127;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy89;
	goto yy13;
yy115:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy101;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy129;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy130;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy131;
	goto yy13;
yy119:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy132;
	goto yy13;
yy120:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy121;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy133;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy133;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy133;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy135;
			}
		}
	}
yy121:
#line 275 "../src/parse/lex.re"
	{ error_block_start("max:re2c");         exit(1); }
#line 784 "src/parse/lex.cc"
yy122:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy136;
	goto yy13;
yy123:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy137;
	goto yy13;
yy124:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy138;
	goto yy13;
yy125:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy139;
	goto yy13;
yy126:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy140;
	goto yy13;
yy127:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy141;
			}
		} else {
			if (yych == '\r') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy141;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy141;
			}
			if (yych >= '*') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy143;
			}
		} else {
			if (yych == ':') goto yy144;
		}
	}
yy128:
#line 282 "../src/parse/lex.re"
	{ error_named_block_start("use:re2c");   exit(1); }
#line 841 "src/parse/lex.cc"
yy129:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy145;
	goto yy13;
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy146;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy147;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy148;
	goto yy13;
yy133:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 202 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxfill(alc));
        // historically allows garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 869 "src/parse/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy133;
	goto yy13;
yy136:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy149;
	goto yy13;
yy137:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy150;
	goto yy13;
yy138:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy152;
	goto yy13;
yy139:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy154;
	goto yy13;
yy140:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy156;
	goto yy13;
yy141:
	++YYCURSOR;
	x = yyt3;
	y = yyt1;
	YYCURSOR = yyt2;
#line 189 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Reuse;
    }
#line 905 "src/parse/lex.cc"
yy143:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy141;
	goto yy13;
yy144:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt3 = YYCURSOR;
			goto yy158;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt3 = YYCURSOR;
			goto yy158;
		}
		goto yy13;
	}
yy145:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy160;
	goto yy13;
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy161;
	goto yy13;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy163;
	goto yy13;
yy148:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy165;
	goto yy13;
yy149:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy166;
	goto yy13;
yy150:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy151;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy167;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy167;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy167;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy169;
			}
		}
	}
yy151:
#line 280 "../src/parse/lex.re"
	{ error_block_start("mtags:re2c");       exit(1); }
#line 976 "src/parse/lex.cc"
yy152:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy170;
			}
		} else {
			if (yych == '\r') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy170;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy170;
			}
			if (yych >= '*') {
				yyt1 = yyt3 = NULL;
				yyt2 = YYCURSOR;
				goto yy172;
			}
		} else {
			if (yych == ':') goto yy173;
		}
	}
yy153:
#line 281 "../src/parse/lex.re"
	{ error_named_block_start("rules:re2c"); exit(1); }
#line 1013 "src/parse/lex.cc"
yy154:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy155;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy174;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy174;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy174;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy176;
			}
		}
	}
yy155:
#line 279 "../src/parse/lex.re"
	{ error_block_start("stags:re2c");       exit(1); }
#line 1043 "src/parse/lex.cc"
yy156:
	yyaccept = 8;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy157;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy177;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy177;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy177;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy179;
			}
		}
	}
yy157:
#line 278 "../src/parse/lex.re"
	{ error_block_start("types:re2c");       exit(1); }
#line 1073 "src/parse/lex.cc"
yy158:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy158;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = yyt2 = YYCURSOR;
			goto yy141;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = yyt2 = YYCURSOR;
		goto yy141;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy141;
		} else {
			if (yych == '*') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy143;
			}
			goto yy13;
		}
	}
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy180;
	goto yy13;
yy161:
	yyaccept = 9;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy181;
yy162:
#line 284 "../src/parse/lex.re"
	{ error_header_directive();              exit(1); }
#line 1114 "src/parse/lex.cc"
yy163:
	yyaccept = 10;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy164;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy182;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy182;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy182;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy184;
			}
		}
	}
yy164:
#line 274 "../src/parse/lex.re"
	{ error_block_start("ignore:re2c");      exit(1); }
#line 1144 "src/parse/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy185;
	goto yy13;
yy166:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy187;
	goto yy13;
yy167:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 244 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto next;
    }
#line 1162 "src/parse/lex.cc"
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy167;
	goto yy13;
yy170:
	++YYCURSOR;
	x = yyt3;
	y = yyt1;
	YYCURSOR = yyt2;
#line 183 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        save_string(out.rules_block_name, x, y);
        return Rules;
    }
#line 1178 "src/parse/lex.cc"
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy170;
	goto yy13;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy13;
		if (yych <= 'Z') {
			yyt3 = YYCURSOR;
			goto yy188;
		}
		goto yy13;
	} else {
		if (yych == '`') goto yy13;
		if (yych <= 'z') {
			yyt3 = YYCURSOR;
			goto yy188;
		}
		goto yy13;
	}
yy174:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 238 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto next;
    }
#line 1209 "src/parse/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy174;
	goto yy13;
yy177:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 227 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(opts->topIndent, code_cond_enum(alc));
        out.cond_enum_in_hdr = out.in_header();
        out.warn_condition_order = false; // see note [condition order]
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 1228 "src/parse/lex.cc"
yy179:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy177;
	goto yy13;
yy180:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy190;
	goto yy13;
yy181:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy192;
	goto yy13;
yy182:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 195 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        lex_end_of_comment(out, true);
        goto next;
    }
#line 1251 "src/parse/lex.cc"
yy184:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy182;
	goto yy13;
yy185:
	yyaccept = 11;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy193;
	if (yych == ' ') goto yy193;
yy186:
#line 283 "../src/parse/lex.re"
	{ error_include_directive();             exit(1); }
#line 1264 "src/parse/lex.cc"
yy187:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy195;
	goto yy13;
yy188:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '*') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy13;
			if (yych <= '\n') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy170;
			}
			if (yych <= '\f') goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy170;
		} else {
			if (yych == ' ') {
				yyt1 = yyt2 = YYCURSOR;
				goto yy170;
			}
			if (yych <= ')') goto yy13;
			yyt1 = yyt2 = YYCURSOR;
			goto yy172;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '/') goto yy13;
			if (yych <= '9') goto yy188;
			if (yych <= '@') goto yy13;
			goto yy188;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy13;
				goto yy188;
			} else {
				if (yych <= '`') goto yy13;
				if (yych <= 'z') goto yy188;
				goto yy13;
			}
		}
	}
yy190:
	yyaccept = 12;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy191;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy196;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy196;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy196;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy198;
			}
		}
	}
yy191:
#line 277 "../src/parse/lex.re"
	{ error_block_start("getstate:re2c");    exit(1); }
#line 1338 "src/parse/lex.cc"
yy192:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy199;
	if (yych == 'n') goto yy200;
	goto yy13;
yy193:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy193;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy193;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy201;
		}
		goto yy13;
	}
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy203;
	goto yy13;
yy196:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 217 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (opts->fFlag && opts->target == TARGET_CODE && !out.state_goto) {
            out.wdelay_stmt(opts->topIndent, code_state_goto(alc));
            out.state_goto = true;
        }
        lex_end_of_comment(out);
        goto next;
    }
#line 1376 "src/parse/lex.cc"
yy198:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy196;
	goto yy13;
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'f') goto yy205;
	goto yy13;
yy200:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy206;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = YYCURSOR;
		goto yy206;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = YYCURSOR;
			goto yy206;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy208;
			}
			goto yy13;
		}
	}
yy201:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy13;
		if (yych == '\n') goto yy13;
		goto yy201;
	} else {
		if (yych <= '"') goto yy209;
		if (yych == '\\') goto yy210;
		goto yy201;
	}
yy203:
	yyaccept = 13;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy204;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy211;
		}
		if (yych >= '\r') {
			yyt1 = YYCURSOR;
			goto yy211;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = YYCURSOR;
				goto yy211;
			}
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy213;
			}
		}
	}
yy204:
#line 276 "../src/parse/lex.re"
	{ error_block_start("maxnmatch:re2c");   exit(1); }
#line 1451 "src/parse/lex.cc"
yy205:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt1 = YYCURSOR;
			goto yy214;
		}
		if (yych <= '\f') goto yy13;
		yyt1 = YYCURSOR;
		goto yy214;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt1 = YYCURSOR;
			goto yy214;
		} else {
			if (yych == '*') {
				yyt1 = YYCURSOR;
				goto yy216;
			}
			goto yy13;
		}
	}
yy206:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 250 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = opts->target == TARGET_CODE;
        lex_end_of_comment(out);
        goto next;
    }
#line 1487 "src/parse/lex.cc"
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy206;
	goto yy13;
yy209:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\n') {
			yyt2 = YYCURSOR;
			goto yy217;
		}
		if (yych <= '\f') goto yy13;
		yyt2 = YYCURSOR;
		goto yy217;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy13;
			yyt2 = YYCURSOR;
			goto yy217;
		} else {
			if (yych == '*') {
				yyt2 = YYCURSOR;
				goto yy219;
			}
			goto yy13;
		}
	}
yy210:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy201;
yy211:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 210 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_yymaxnmatch(alc));
        lex_end_of_comment(out);
        goto next;
    }
#line 1533 "src/parse/lex.cc"
yy213:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy211;
	goto yy13;
yy214:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 258 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        lex_end_of_comment(out);
        goto next;
    }
#line 1549 "src/parse/lex.cc"
yy216:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy214;
	goto yy13;
yy217:
	++YYCURSOR;
	x = yyt1;
	YYCURSOR = yyt2;
	y = yyt2;
#line 266 "../src/parse/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        include(getstr(x + 1, y - 1));
        goto next;
    }
#line 1566 "src/parse/lex.cc"
yy219:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy217;
	goto yy13;
}
#line 307 "../src/parse/lex.re"

}

void Scanner::lex_end_of_comment(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1581 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy224;
		} else {
			if (yych <= '\n') goto yy226;
			if (yych >= '\r') goto yy228;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy224;
		} else {
			if (yych == '*') goto yy229;
		}
	}
	++YYCURSOR;
yy223:
#line 315 "../src/parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "expected end of block");
        exit(1);
    }
#line 1608 "src/parse/lex.cc"
yy224:
	++YYCURSOR;
#line 320 "../src/parse/lex.re"
	{ goto loop; }
#line 1613 "src/parse/lex.cc"
yy226:
	++YYCURSOR;
#line 321 "../src/parse/lex.re"
	{
        next_line();
        multiline = true;
        goto loop;
    }
#line 1622 "src/parse/lex.cc"
yy228:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy226;
	goto yy223;
yy229:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy223;
	++YYCURSOR;
#line 326 "../src/parse/lex.re"
	{
        if (multiline) {
            out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        }
        return;
    }
#line 1638 "src/parse/lex.cc"
}
#line 332 "../src/parse/lex.re"

}

void Scanner::lex_tags(Output &out, bool mtags)
{
    const opt_t *opts = out.block().opts;
    std::string fmt, sep;
loop:

#line 1650 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy236;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy239;
		} else {
			if (yych == '\r') goto yy241;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy242;
			if (yych >= 'f') goto yy243;
		} else {
			if (yych == 's') goto yy244;
		}
	}
	++YYCURSOR;
yy235:
#line 341 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "unrecognized configuration");
        exit(1);
    }
#line 1713 "src/parse/lex.cc"
yy236:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy236;
	}
#line 353 "../src/parse/lex.re"
	{
        goto loop;
    }
#line 1725 "src/parse/lex.cc"
yy239:
	++YYCURSOR;
#line 356 "../src/parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 1733 "src/parse/lex.cc"
yy241:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy239;
	goto yy235;
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy245;
	goto yy235;
yy243:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy247;
	goto yy235;
yy244:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy249;
	goto yy235;
yy245:
	++YYCURSOR;
#line 360 "../src/parse/lex.re"
	{
        if (opts->target == TARGET_CODE) {
            out.wdelay_stmt(opts->topIndent, code_tags(out.allocator, fmt, sep, mtags));
        }
        return;
    }
#line 1759 "src/parse/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy250;
yy248:
	YYCURSOR = YYMARKER;
	goto yy235;
yy249:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy251;
	goto yy248;
yy250:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy252;
	goto yy248;
yy251:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy253;
	goto yy248;
yy252:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy254;
	goto yy248;
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy255;
	goto yy248;
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy256;
	goto yy248;
yy255:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy258;
	goto yy248;
yy256:
	++YYCURSOR;
#line 345 "../src/parse/lex.re"
	{
        fmt = lex_conf_string();
        goto loop;
    }
#line 1801 "src/parse/lex.cc"
yy258:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy248;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy248;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy248;
	++YYCURSOR;
#line 349 "../src/parse/lex.re"
	{
        sep = lex_conf_string();
        goto loop;
    }
#line 1815 "src/parse/lex.cc"
}
#line 366 "../src/parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1828 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy267;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy265;
				if (yych <= '\n') goto yy270;
				if (yych >= '\r') goto yy272;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy273;
				} else {
					if (yych <= '"') goto yy274;
					if (yych <= '#') goto yy276;
					goto yy277;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy279;
				} else {
					if (yych <= '\'') goto yy280;
					if (yych <= ')') goto yy277;
					goto yy282;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy277;
				} else {
					if (yych <= '.') goto yy283;
					if (yych <= '/') goto yy285;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy286;
				if (yych <= ';') goto yy277;
				if (yych <= '<') goto yy287;
				goto yy289;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy277;
				} else {
					if (yych <= '@') goto yy276;
					if (yych <= 'Z') goto yy290;
					goto yy293;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy277;
				} else {
					if (yych != '`') goto yy290;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy295;
					goto yy290;
				} else {
					if (yych <= '{') goto yy296;
					if (yych <= '|') goto yy277;
				}
			}
		}
	}
yy265:
	++YYCURSOR;
yy266:
#line 518 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1946 "src/parse/lex.cc"
yy267:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy267;
	}
#line 500 "../src/parse/lex.re"
	{ goto scan; }
#line 1956 "src/parse/lex.cc"
yy270:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy298;
	} else {
		if (yych <= ' ') goto yy298;
		if (yych == '#') goto yy301;
	}
yy271:
#line 507 "../src/parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1978 "src/parse/lex.cc"
yy272:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy270;
	goto yy266;
yy273:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'i') goto yy303;
	if (yych == 'u') goto yy304;
	goto yy266;
yy274:
	++YYCURSOR;
#line 392 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1993 "src/parse/lex.cc"
yy276:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy266;
		if (yych <= 'Z') goto yy305;
		goto yy266;
	} else {
		if (yych == '`') goto yy266;
		if (yych <= 'z') goto yy305;
		goto yy266;
	}
yy277:
	++YYCURSOR;
yy278:
#line 401 "../src/parse/lex.re"
	{ return *tok; }
#line 2010 "src/parse/lex.cc"
yy279:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy308;
	goto yy266;
yy280:
	++YYCURSOR;
#line 391 "../src/parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 2019 "src/parse/lex.cc"
yy282:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy308;
	goto yy278;
yy283:
	++YYCURSOR;
#line 495 "../src/parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 2031 "src/parse/lex.cc"
yy285:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy310;
	if (yych == '/') goto yy312;
	goto yy278;
yy286:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy314;
	goto yy266;
yy287:
	++YYCURSOR;
#line 384 "../src/parse/lex.re"
	{ return lex_clist(); }
#line 2045 "src/parse/lex.cc"
yy289:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy316;
	goto yy278;
yy290:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy291:
	if (yybm[0+yych] & 32) {
		goto yy290;
	}
#line 450 "../src/parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 2082 "src/parse/lex.cc"
yy293:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy318;
#line 393 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 2088 "src/parse/lex.cc"
yy295:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy320;
	goto yy291;
yy296:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy323;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy321;
		if (yych >= 'A') goto yy325;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy325;
		} else {
			if (yych <= '`') goto yy297;
			if (yych <= 'z') goto yy325;
		}
	}
yy297:
#line 376 "../src/parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 2113 "src/parse/lex.cc"
yy298:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy298;
	} else {
		if (yych <= ' ') goto yy298;
		if (yych == '#') goto yy301;
	}
yy300:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy271;
			} else {
				goto yy266;
			}
		} else {
			if (yyaccept == 2) {
				goto yy278;
			} else {
				goto yy297;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy315;
			} else {
				goto yy322;
			}
		} else {
			if (yyaccept == 6) {
				goto yy342;
			} else {
				goto yy366;
			}
		}
	}
yy301:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy301;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy301;
		if (yych == 'l') goto yy327;
		goto yy300;
	}
yy303:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy328;
	goto yy300;
yy304:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy329;
	goto yy300;
yy305:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy307;
		if (yych <= '9') goto yy305;
		if (yych >= 'A') goto yy305;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy305;
		} else {
			if (yych <= '`') goto yy307;
			if (yych <= 'z') goto yy305;
		}
	}
yy307:
#line 396 "../src/parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2197 "src/parse/lex.cc"
yy308:
	++YYCURSOR;
#line 389 "../src/parse/lex.re"
	{ tok = cur; return 0; }
#line 2202 "src/parse/lex.cc"
yy310:
	++YYCURSOR;
#line 387 "../src/parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2207 "src/parse/lex.cc"
yy312:
	++YYCURSOR;
#line 386 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2212 "src/parse/lex.cc"
yy314:
	yyaccept = 4;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '>') goto yy316;
yy315:
#line 377 "../src/parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2220 "src/parse/lex.cc"
yy316:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy300;
			goto yy316;
		} else {
			if (yych == ' ') goto yy316;
			goto yy300;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = YYCURSOR;
				goto yy330;
			}
			if (yych <= '^') goto yy300;
			yyt1 = YYCURSOR;
			goto yy330;
		} else {
			if (yych <= '`') goto yy300;
			if (yych <= 'z') {
				yyt1 = YYCURSOR;
				goto yy330;
			}
			goto yy300;
		}
	}
yy318:
	++YYCURSOR;
#line 394 "../src/parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2255 "src/parse/lex.cc"
yy320:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy333;
	goto yy291;
yy321:
	++YYCURSOR;
yy322:
#line 433 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2269 "src/parse/lex.cc"
yy323:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy323;
	}
	if (yych == ',') {
		yyt1 = YYCURSOR;
		goto yy334;
	}
	if (yych == '}') goto yy335;
	goto yy300;
yy325:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy300;
			goto yy325;
		} else {
			if (yych <= '@') goto yy300;
			if (yych <= 'Z') goto yy325;
			goto yy300;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy300;
			goto yy325;
		} else {
			if (yych == '}') goto yy337;
			goto yy300;
		}
	}
yy327:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy339;
	goto yy300;
yy328:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy340;
	goto yy300;
yy329:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy341;
	goto yy300;
yy330:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy332;
		if (yych <= '9') goto yy330;
		if (yych >= 'A') goto yy330;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy330;
		} else {
			if (yych <= '`') goto yy332;
			if (yych <= 'z') goto yy330;
		}
	}
yy332:
	p = yyt1;
#line 379 "../src/parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2340 "src/parse/lex.cc"
yy333:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy343;
	goto yy291;
yy334:
	yyaccept = 5;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy322;
	if (yych <= '9') goto yy344;
	if (yych == '}') goto yy346;
	goto yy322;
yy335:
	++YYCURSOR;
#line 403 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2363 "src/parse/lex.cc"
yy337:
	++YYCURSOR;
#line 439 "../src/parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2375 "src/parse/lex.cc"
yy339:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy348;
	goto yy300;
yy340:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy349;
	goto yy300;
yy341:
	yyaccept = 6;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == ':') goto yy350;
yy342:
#line 489 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive"
            ", expected format: `!use:<block-name> ; <newline>`");
        exit(1);
    }
#line 2395 "src/parse/lex.cc"
yy343:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy351;
	goto yy291;
yy344:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy300;
	if (yych <= '9') goto yy344;
	if (yych == '}') goto yy353;
	goto yy300;
yy346:
	++YYCURSOR;
#line 424 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2419 "src/parse/lex.cc"
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy355;
	goto yy300;
yy349:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'u') goto yy356;
	goto yy300;
yy350:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy300;
		if (yych <= 'Z') {
			yyt1 = YYCURSOR;
			goto yy357;
		}
		goto yy300;
	} else {
		if (yych == '`') goto yy300;
		if (yych <= 'z') {
			yyt1 = YYCURSOR;
			goto yy357;
		}
		goto yy300;
	}
yy351:
	++YYCURSOR;
#line 448 "../src/parse/lex.re"
	{ return TOKEN_CONF; }
#line 2449 "src/parse/lex.cc"
yy353:
	++YYCURSOR;
	p = yyt1;
#line 412 "../src/parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2465 "src/parse/lex.cc"
yy355:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy360;
	if (yych <= '9') goto yy300;
	goto yy360;
yy356:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'd') goto yy361;
	goto yy300;
yy357:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych <= '/') goto yy300;
			goto yy357;
		} else {
			if (yych == ';') {
				yyt2 = YYCURSOR;
				goto yy362;
			}
			goto yy300;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy357;
			if (yych <= '^') goto yy300;
			goto yy357;
		} else {
			if (yych <= '`') goto yy300;
			if (yych <= 'z') goto yy357;
			goto yy300;
		}
	}
yy359:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy360:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy359;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy359;
		if (yych <= '0') goto yy300;
		if (yych <= '9') {
			yyt1 = YYCURSOR;
			goto yy363;
		}
		goto yy300;
	}
yy361:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy365;
	goto yy300;
yy362:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy367;
	if (yych == '\r') goto yy369;
	goto yy300;
yy363:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy300;
			goto yy370;
		} else {
			if (yych <= '\n') goto yy372;
			if (yych <= '\f') goto yy300;
			goto yy374;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy300;
			goto yy370;
		} else {
			if (yych <= '/') goto yy300;
			if (yych <= '9') goto yy363;
			goto yy300;
		}
	}
yy365:
	yyaccept = 7;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '\t') goto yy375;
	if (yych == ' ') goto yy375;
yy366:
#line 478 "../src/parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive"
            ", expected format: `!include \"<file>\" ; <newline>`");
        exit(1);
    }
#line 2562 "src/parse/lex.cc"
yy367:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 484 "../src/parse/lex.re"
	{
        next_line();
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2573 "src/parse/lex.cc"
yy369:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy367;
	goto yy300;
yy370:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy370;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy370;
		if (yych == '"') goto yy377;
		goto yy300;
	}
yy372:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 502 "../src/parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2598 "src/parse/lex.cc"
yy374:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy372;
	goto yy300;
yy375:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy375;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy375;
		if (yych == '"') {
			yyt1 = YYCURSOR;
			goto yy379;
		}
		goto yy300;
	}
yy377:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy377;
	}
	if (yych <= '\n') goto yy300;
	if (yych <= '"') goto yy381;
	goto yy382;
yy379:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy300;
		if (yych == '\n') goto yy300;
		goto yy379;
	} else {
		if (yych <= '"') goto yy383;
		if (yych == '\\') goto yy384;
		goto yy379;
	}
yy381:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy372;
	if (yych == '\r') goto yy374;
	goto yy300;
yy382:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy300;
	if (yych == '\n') goto yy300;
	goto yy377;
yy383:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = YYCURSOR;
			goto yy385;
		}
		goto yy300;
	} else {
		if (yych <= ' ') {
			yyt2 = YYCURSOR;
			goto yy385;
		}
		if (yych == ';') {
			yyt2 = YYCURSOR;
			goto yy387;
		}
		goto yy300;
	}
yy384:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy300;
	if (yych == '\n') goto yy300;
	goto yy379;
yy385:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy385;
		goto yy300;
	} else {
		if (yych <= ' ') goto yy385;
		if (yych != ';') goto yy300;
	}
yy387:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy388;
	if (yych == '\r') goto yy390;
	goto yy300;
yy388:
	++YYCURSOR;
	x = yyt1;
	y = yyt2;
#line 473 "../src/parse/lex.re"
	{
        next_line();
        include(getstr(x + 1, y - 1));
        goto scan;
    }
#line 2705 "src/parse/lex.cc"
yy390:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy388;
	goto yy300;
}
#line 522 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2718 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = YYCURSOR;
			goto yy394;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = YYCURSOR;
			goto yy394;
		}
		if (yych == '=') {
			yyt1 = YYCURSOR;
			goto yy397;
		}
	}
yy393:
#line 529 "../src/parse/lex.re"
	{ return false; }
#line 2775 "src/parse/lex.cc"
yy394:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy394;
	}
	if (yych == '=') goto yy397;
yy396:
	YYCURSOR = YYMARKER;
	goto yy393;
yy397:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy396;
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 528 "../src/parse/lex.re"
	{ return true; }
#line 2794 "src/parse/lex.cc"
}
#line 530 "../src/parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2803 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') {
		yyt1 = YYCURSOR;
		goto yy403;
	}
	if (yych == ' ') {
		yyt1 = YYCURSOR;
		goto yy403;
	}
#line 538 "../src/parse/lex.re"
	{ return false; }
#line 2852 "src/parse/lex.cc"
yy403:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy403;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy406;
	} else {
		if (yych <= '=') goto yy406;
		if (yych == '{') goto yy406;
	}
	YYCURSOR = yyt1;
#line 537 "../src/parse/lex.re"
	{ return true; }
#line 2869 "src/parse/lex.cc"
yy406:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 536 "../src/parse/lex.re"
	{ return false; }
#line 2875 "src/parse/lex.cc"
}
#line 539 "../src/parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2886 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy408;
yy409:
	++YYCURSOR;
yy408:
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy409;
	}
	if (yych <= 0x1F) goto yy411;
	if (yych <= '!') goto yy412;
	if (yych == '>') goto yy415;
yy411:
#line 549 "../src/parse/lex.re"
	{ goto cond; }
#line 2938 "src/parse/lex.cc"
yy412:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == '\t') goto yy412;
	if (yych == ' ') goto yy412;
#line 547 "../src/parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2947 "src/parse/lex.cc"
yy415:
	++YYCURSOR;
#line 548 "../src/parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2952 "src/parse/lex.cc"
}
#line 550 "../src/parse/lex.re"

cond:
    tok = cur;

#line 2959 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych == '*') goto yy421;
		if (yych >= 'A') goto yy423;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy423;
		} else {
			if (yych <= '`') goto yy419;
			if (yych <= 'z') goto yy423;
		}
	}
yy419:
	++YYCURSOR;
#line 556 "../src/parse/lex.re"
	{ goto error; }
#line 3013 "src/parse/lex.cc"
yy421:
	++YYCURSOR;
#line 555 "../src/parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 3018 "src/parse/lex.cc"
yy423:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy423;
	}
#line 554 "../src/parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 3028 "src/parse/lex.cc"
}
#line 557 "../src/parse/lex.re"

next:

#line 3034 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy430;
		if (yych >= ' ') goto yy430;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy431;
		} else {
			if (yych == '>') goto yy434;
		}
	}
	++YYCURSOR;
yy429:
#line 562 "../src/parse/lex.re"
	{ goto error; }
#line 3087 "src/parse/lex.cc"
yy430:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= ' ') {
		if (yych == '\t') goto yy436;
		if (yych <= 0x1F) goto yy429;
		goto yy436;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy429;
		} else {
			if (yych == '>') goto yy434;
			goto yy429;
		}
	}
yy431:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy431;
	}
#line 560 "../src/parse/lex.re"
	{ goto cond; }
#line 3111 "src/parse/lex.cc"
yy434:
	++YYCURSOR;
#line 561 "../src/parse/lex.re"
	{ goto end; }
#line 3116 "src/parse/lex.cc"
yy436:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy436;
		if (yych >= ' ') goto yy436;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy431;
		} else {
			if (yych == '>') goto yy434;
		}
	}
	YYCURSOR = YYMARKER;
	goto yy429;
}
#line 563 "../src/parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented()
{
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3151 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy441;
			if (yych == '\n') goto yy445;
			goto yy443;
		} else {
			if (yych <= '\r') goto yy447;
			if (yych == '"') goto yy448;
			goto yy443;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy448;
			if (yych == '/') goto yy450;
			goto yy443;
		} else {
			if (yych == '|') goto yy443;
			if (yych <= '}') goto yy451;
			goto yy443;
		}
	}
yy441:
	++YYCURSOR;
#line 589 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3181 "src/parse/lex.cc"
yy443:
	++YYCURSOR;
yy444:
#line 597 "../src/parse/lex.re"
	{ goto code; }
#line 3187 "src/parse/lex.cc"
yy445:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy446;
		if (yych <= '\n') goto yy453;
	} else {
		if (yych <= '\r') goto yy453;
		if (yych == ' ') goto yy453;
	}
yy446:
#line 580 "../src/parse/lex.re"
	{
        next_line();
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3207 "src/parse/lex.cc"
yy447:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy445;
	goto yy444;
yy448:
	++YYCURSOR;
#line 596 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3216 "src/parse/lex.cc"
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy455;
	if (yych == '/') goto yy457;
	goto yy444;
yy451:
	++YYCURSOR;
#line 590 "../src/parse/lex.re"
	{
        msg.error(cur_loc(), "Curly braces are not allowed after ':='");
        exit(1);
    }
#line 3229 "src/parse/lex.cc"
yy453:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 579 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3235 "src/parse/lex.cc"
yy455:
	++YYCURSOR;
#line 594 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3240 "src/parse/lex.cc"
yy457:
	++YYCURSOR;
#line 595 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3245 "src/parse/lex.cc"
}
#line 598 "../src/parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3257 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy461;
			if (yych == '\n') goto yy465;
			goto yy463;
		} else {
			if (yych <= '\r') goto yy467;
			if (yych == '"') goto yy468;
			goto yy463;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy468;
			if (yych == '/') goto yy470;
			goto yy463;
		} else {
			if (yych <= '{') goto yy471;
			if (yych == '}') goto yy473;
			goto yy463;
		}
	}
yy461:
	++YYCURSOR;
#line 618 "../src/parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3321 "src/parse/lex.cc"
yy463:
	++YYCURSOR;
yy464:
#line 622 "../src/parse/lex.re"
	{ goto code; }
#line 3327 "src/parse/lex.cc"
yy465:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy475;
	}
	if (yych == '#') goto yy478;
yy466:
#line 617 "../src/parse/lex.re"
	{ next_line(); goto code; }
#line 3337 "src/parse/lex.cc"
yy467:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy465;
	goto yy464;
yy468:
	++YYCURSOR;
#line 621 "../src/parse/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 3346 "src/parse/lex.cc"
yy470:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy480;
	if (yych == '/') goto yy482;
	goto yy464;
yy471:
	++YYCURSOR;
#line 615 "../src/parse/lex.re"
	{ ++depth; goto code; }
#line 3356 "src/parse/lex.cc"
yy473:
	++YYCURSOR;
#line 607 "../src/parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3367 "src/parse/lex.cc"
yy475:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy475;
	}
	if (yych == '#') goto yy478;
yy477:
	YYCURSOR = YYMARKER;
	goto yy466;
yy478:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy478;
		goto yy477;
	} else {
		if (yych <= ' ') goto yy478;
		if (yych == 'l') goto yy484;
		goto yy477;
	}
yy480:
	++YYCURSOR;
#line 619 "../src/parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3395 "src/parse/lex.cc"
yy482:
	++YYCURSOR;
#line 620 "../src/parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3400 "src/parse/lex.cc"
yy484:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy477;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy477;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy477;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy489;
	if (yych <= '9') goto yy477;
	goto yy489;
yy488:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy489:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy488;
		goto yy477;
	} else {
		if (yych <= ' ') goto yy488;
		if (yych <= '0') goto yy477;
		if (yych >= ':') goto yy477;
		yyt1 = YYCURSOR;
	}
yy490:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy490;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy477;
		if (yych <= '\t') goto yy492;
		if (yych <= '\n') goto yy494;
		goto yy477;
	} else {
		if (yych <= '\r') goto yy496;
		if (yych != ' ') goto yy477;
	}
yy492:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy492;
		goto yy477;
	} else {
		if (yych <= ' ') goto yy492;
		if (yych == '"') goto yy497;
		goto yy477;
	}
yy494:
	++YYCURSOR;
	YYCURSOR = yyt1;
#line 616 "../src/parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3459 "src/parse/lex.cc"
yy496:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy494;
	goto yy477;
yy497:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy497;
	}
	if (yych <= '\n') goto yy477;
	if (yych >= '#') goto yy500;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy494;
	if (yych == '\r') goto yy496;
	goto yy477;
yy500:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy477;
	if (yych == '\n') goto yy477;
	goto yy497;
}
#line 623 "../src/parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3493 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy503;
			if (yych <= '\t') goto yy505;
			goto yy507;
		} else {
			if (yych == '\r') goto yy509;
			goto yy505;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy510;
			if (yych <= '&') goto yy505;
			goto yy510;
		} else {
			if (yych == '\\') goto yy512;
			goto yy505;
		}
	}
yy503:
	++YYCURSOR;
#line 633 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3521 "src/parse/lex.cc"
yy505:
	++YYCURSOR;
yy506:
#line 634 "../src/parse/lex.re"
	{ goto loop; }
#line 3527 "src/parse/lex.cc"
yy507:
	++YYCURSOR;
#line 632 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3532 "src/parse/lex.cc"
yy509:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy507;
	goto yy506;
yy510:
	++YYCURSOR;
#line 630 "../src/parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3541 "src/parse/lex.cc"
yy512:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy506;
	} else {
		if (yych <= '\'') goto yy513;
		if (yych != '\\') goto yy506;
	}
yy513:
	++YYCURSOR;
#line 631 "../src/parse/lex.re"
	{ goto loop; }
#line 3554 "src/parse/lex.cc"
}
#line 635 "../src/parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3564 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy517;
		if (yych == '\n') goto yy521;
		goto yy519;
	} else {
		if (yych <= '\r') goto yy523;
		if (yych == '*') goto yy524;
		goto yy519;
	}
yy517:
	++YYCURSOR;
#line 644 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3582 "src/parse/lex.cc"
yy519:
	++YYCURSOR;
yy520:
#line 645 "../src/parse/lex.re"
	{ goto loop; }
#line 3588 "src/parse/lex.cc"
yy521:
	++YYCURSOR;
#line 643 "../src/parse/lex.re"
	{ next_line(); goto loop; }
#line 3593 "src/parse/lex.cc"
yy523:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy521;
	goto yy520;
yy524:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy520;
	++YYCURSOR;
#line 642 "../src/parse/lex.re"
	{ return; }
#line 3604 "src/parse/lex.cc"
}
#line 646 "../src/parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3614 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy529;
		if (yych <= '\t') goto yy531;
		goto yy533;
	} else {
		if (yych == '\r') goto yy535;
		goto yy531;
	}
yy529:
	++YYCURSOR;
#line 654 "../src/parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3631 "src/parse/lex.cc"
yy531:
	++YYCURSOR;
yy532:
#line 655 "../src/parse/lex.re"
	{ goto loop; }
#line 3637 "src/parse/lex.cc"
yy533:
	++YYCURSOR;
#line 653 "../src/parse/lex.re"
	{ next_line(); return; }
#line 3642 "src/parse/lex.cc"
yy535:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy533;
	goto yy532;
}
#line 656 "../src/parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3661 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy539;
#line 669 "../src/parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3669 "src/parse/lex.cc"
yy539:
	++YYCURSOR;
#line 668 "../src/parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3674 "src/parse/lex.cc"
}
#line 670 "../src/parse/lex.re"

snd:

#line 3680 "src/parse/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy544;
yy543:
#line 673 "../src/parse/lex.re"
	{ u = l; goto add; }
#line 3689 "src/parse/lex.cc"
yy544:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy546;
	YYCURSOR = YYMARKER;
	goto yy543;
yy546:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 674 "../src/parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3707 "src/parse/lex.cc"
}
#line 682 "../src/parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 719 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3725 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy550;
		if (yych == '\n') goto yy554;
		goto yy552;
	} else {
		if (yych <= '\r') goto yy556;
		if (yych == '\\') goto yy557;
		goto yy552;
	}
yy550:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3744 "src/parse/lex.cc"
yy552:
	++YYCURSOR;
yy553:
#line 702 "../src/parse/lex.re"
	{ return decode(tok); }
#line 3750 "src/parse/lex.cc"
yy554:
	++YYCURSOR;
#line 694 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3755 "src/parse/lex.cc"
yy556:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy554;
	goto yy553;
yy557:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy558;
				if (yych == '\n') goto yy554;
				goto yy559;
			} else {
				if (yych <= '\r') goto yy561;
				if (yych == '-') goto yy562;
				goto yy559;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy564;
				if (yych <= '7') goto yy566;
				if (yych <= 'T') goto yy559;
				goto yy567;
			} else {
				if (yych == 'X') goto yy569;
				if (yych <= '[') goto yy559;
				goto yy570;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy572;
				if (yych <= '`') goto yy559;
				if (yych <= 'a') goto yy574;
				goto yy576;
			} else {
				if (yych == 'f') goto yy578;
				if (yych <= 'm') goto yy559;
				goto yy580;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy582;
				if (yych <= 's') goto yy559;
				goto yy584;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy569;
					goto yy586;
				} else {
					if (yych == 'x') goto yy588;
					goto yy559;
				}
			}
		}
	}
yy558:
#line 697 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3816 "src/parse/lex.cc"
yy559:
	++YYCURSOR;
yy560:
#line 715 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3825 "src/parse/lex.cc"
yy561:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy554;
	goto yy560;
yy562:
	++YYCURSOR;
#line 713 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3834 "src/parse/lex.cc"
yy564:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy565;
	if (yych <= '7') goto yy589;
yy565:
#line 696 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3843 "src/parse/lex.cc"
yy566:
	++YYCURSOR;
	goto yy565;
yy567:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy568;
		if (yych <= '9') goto yy591;
	} else {
		if (yych <= 'F') goto yy591;
		if (yych <= '`') goto yy568;
		if (yych <= 'f') goto yy591;
	}
yy568:
#line 695 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 3861 "src/parse/lex.cc"
yy569:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy568;
		if (yych <= '9') goto yy592;
		goto yy568;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy568;
		if (yych <= 'f') goto yy592;
		goto yy568;
	}
yy570:
	++YYCURSOR;
#line 712 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 3879 "src/parse/lex.cc"
yy572:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 3884 "src/parse/lex.cc"
yy574:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 3889 "src/parse/lex.cc"
yy576:
	++YYCURSOR;
#line 706 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 3894 "src/parse/lex.cc"
yy578:
	++YYCURSOR;
#line 707 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 3899 "src/parse/lex.cc"
yy580:
	++YYCURSOR;
#line 708 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 3904 "src/parse/lex.cc"
yy582:
	++YYCURSOR;
#line 709 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 3909 "src/parse/lex.cc"
yy584:
	++YYCURSOR;
#line 710 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 3914 "src/parse/lex.cc"
yy586:
	++YYCURSOR;
#line 711 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 3919 "src/parse/lex.cc"
yy588:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy568;
		if (yych <= '9') goto yy593;
		goto yy568;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy568;
		if (yych <= 'f') goto yy593;
		goto yy568;
	}
yy589:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy590;
	if (yych <= '7') goto yy594;
yy590:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy565;
	} else {
		goto yy568;
	}
yy591:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy596;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy596;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy596;
		goto yy590;
	}
yy592:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy597;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy597;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy597;
		goto yy590;
	}
yy593:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy598;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy598;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy598;
		goto yy590;
	}
yy594:
	++YYCURSOR;
#line 704 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 3984 "src/parse/lex.cc"
yy596:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy600;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy600;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy600;
		goto yy590;
	}
yy597:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy593;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy593;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy593;
		goto yy590;
	}
yy598:
	++YYCURSOR;
#line 703 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4013 "src/parse/lex.cc"
yy600:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych >= ':') goto yy590;
	} else {
		if (yych <= 'F') goto yy601;
		if (yych <= '`') goto yy590;
		if (yych >= 'g') goto yy590;
	}
yy601:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy590;
		if (yych <= '9') goto yy592;
		goto yy590;
	} else {
		if (yych <= 'F') goto yy592;
		if (yych <= '`') goto yy590;
		if (yych <= 'f') goto yy592;
		goto yy590;
	}
}
#line 721 "../src/parse/lex.re"

    }
    else {
        
#line 4042 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy604;
			if (yych == '\n') goto yy608;
			goto yy606;
		} else {
			if (yych <= '\r') goto yy610;
			if (yych == '\\') goto yy611;
			goto yy606;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy613;
			if (yych <= 0xDF) goto yy615;
			if (yych <= 0xE0) goto yy616;
			goto yy617;
		} else {
			if (yych <= 0xF0) goto yy618;
			if (yych <= 0xF3) goto yy619;
			if (yych <= 0xF4) goto yy620;
			goto yy613;
		}
	}
yy604:
	++YYCURSOR;
#line 700 "../src/parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4075 "src/parse/lex.cc"
yy606:
	++YYCURSOR;
yy607:
#line 702 "../src/parse/lex.re"
	{ return decode(tok); }
#line 4081 "src/parse/lex.cc"
yy608:
	++YYCURSOR;
#line 694 "../src/parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4086 "src/parse/lex.cc"
yy610:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy608;
	goto yy607;
yy611:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy621;
				} else {
					if (yych <= '\n') goto yy608;
					if (yych <= '\f') goto yy621;
					goto yy623;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy621;
					goto yy624;
				} else {
					if (yych <= '/') goto yy621;
					if (yych <= '3') goto yy626;
					goto yy628;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy621;
					goto yy629;
				} else {
					if (yych == 'X') goto yy631;
					goto yy621;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy632;
					goto yy634;
				} else {
					if (yych <= '`') goto yy621;
					if (yych <= 'a') goto yy636;
					goto yy638;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy621;
					goto yy640;
				} else {
					if (yych == 'n') goto yy642;
					goto yy621;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy644;
					goto yy621;
				} else {
					if (yych <= 't') goto yy646;
					if (yych <= 'u') goto yy631;
					goto yy648;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy621;
					goto yy650;
				} else {
					if (yych <= 0x7F) goto yy621;
					if (yych >= 0xC2) goto yy651;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy653;
					if (yych <= 0xEF) goto yy654;
					goto yy655;
				} else {
					if (yych <= 0xF3) goto yy656;
					if (yych <= 0xF4) goto yy657;
				}
			}
		}
	}
yy612:
#line 697 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4178 "src/parse/lex.cc"
yy613:
	++YYCURSOR;
yy614:
#line 698 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4184 "src/parse/lex.cc"
yy615:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy606;
	goto yy614;
yy616:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy614;
	if (yych <= 0xBF) goto yy658;
	goto yy614;
yy617:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy658;
	goto yy614;
yy618:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy614;
	if (yych <= 0xBF) goto yy659;
	goto yy614;
yy619:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0xBF) goto yy659;
	goto yy614;
yy620:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy614;
	if (yych <= 0x8F) goto yy659;
	goto yy614;
yy621:
	++YYCURSOR;
yy622:
#line 715 "../src/parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4228 "src/parse/lex.cc"
yy623:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy608;
	goto yy622;
yy624:
	++YYCURSOR;
#line 713 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4237 "src/parse/lex.cc"
yy626:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy627;
	if (yych <= '7') goto yy660;
yy627:
#line 696 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4246 "src/parse/lex.cc"
yy628:
	++YYCURSOR;
	goto yy627;
yy629:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy661;
	} else {
		if (yych <= 'F') goto yy661;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy661;
	}
yy630:
#line 695 "../src/parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4264 "src/parse/lex.cc"
yy631:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy662;
		goto yy630;
	} else {
		if (yych <= 'F') goto yy662;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy662;
		goto yy630;
	}
yy632:
	++YYCURSOR;
#line 712 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4282 "src/parse/lex.cc"
yy634:
	++YYCURSOR;
#line 714 "../src/parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4287 "src/parse/lex.cc"
yy636:
	++YYCURSOR;
#line 705 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4292 "src/parse/lex.cc"
yy638:
	++YYCURSOR;
#line 706 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4297 "src/parse/lex.cc"
yy640:
	++YYCURSOR;
#line 707 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4302 "src/parse/lex.cc"
yy642:
	++YYCURSOR;
#line 708 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4307 "src/parse/lex.cc"
yy644:
	++YYCURSOR;
#line 709 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4312 "src/parse/lex.cc"
yy646:
	++YYCURSOR;
#line 710 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4317 "src/parse/lex.cc"
yy648:
	++YYCURSOR;
#line 711 "../src/parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4322 "src/parse/lex.cc"
yy650:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy630;
		if (yych <= '9') goto yy663;
		goto yy630;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy630;
		if (yych <= 'f') goto yy663;
		goto yy630;
	}
yy651:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0xBF) goto yy621;
yy652:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy612;
		} else {
			goto yy614;
		}
	} else {
		if (yyaccept == 2) {
			goto yy627;
		} else {
			goto yy630;
		}
	}
yy653:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy652;
	if (yych <= 0xBF) goto yy651;
	goto yy652;
yy654:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0xBF) goto yy651;
	goto yy652;
yy655:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy652;
	if (yych <= 0xBF) goto yy654;
	goto yy652;
yy656:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0xBF) goto yy654;
	goto yy652;
yy657:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0x8F) goto yy654;
	goto yy652;
yy658:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0xBF) goto yy606;
	goto yy652;
yy659:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy652;
	if (yych <= 0xBF) goto yy658;
	goto yy652;
yy660:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy652;
	if (yych <= '7') goto yy664;
	goto yy652;
yy661:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy666;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy666;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy666;
		goto yy652;
	}
yy662:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy667;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy667;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy667;
		goto yy652;
	}
yy663:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy668;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy668;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy668;
		goto yy652;
	}
yy664:
	++YYCURSOR;
#line 704 "../src/parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4435 "src/parse/lex.cc"
yy666:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy670;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy670;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy670;
		goto yy652;
	}
yy667:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy663;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy663;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy663;
		goto yy652;
	}
yy668:
	++YYCURSOR;
#line 703 "../src/parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4464 "src/parse/lex.cc"
yy670:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych >= ':') goto yy652;
	} else {
		if (yych <= 'F') goto yy671;
		if (yych <= '`') goto yy652;
		if (yych >= 'g') goto yy652;
	}
yy671:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy652;
		if (yych <= '9') goto yy662;
		goto yy652;
	} else {
		if (yych <= 'F') goto yy662;
		if (yych <= '`') goto yy652;
		if (yych <= 'f') goto yy662;
		goto yy652;
	}
}
#line 724 "../src/parse/lex.re"
 #line 724 "../src/parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();

    #line 758 "../src/parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4503 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy674;
		if (yych == '\n') goto yy678;
		goto yy676;
	} else {
		if (yych <= '\r') goto yy680;
		if (yych == '\\') goto yy681;
		goto yy676;
	}
yy674:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4522 "src/parse/lex.cc"
yy676:
	++YYCURSOR;
yy677:
#line 742 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4528 "src/parse/lex.cc"
yy678:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4533 "src/parse/lex.cc"
yy680:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy678;
	goto yy677;
yy681:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy682;
				if (yych <= '\t') goto yy683;
				goto yy678;
			} else {
				if (yych == '\r') goto yy685;
				if (yych <= '/') goto yy683;
				goto yy686;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy688;
				if (yych == 'U') goto yy689;
				goto yy683;
			} else {
				if (yych <= 'X') goto yy691;
				if (yych == '\\') goto yy692;
				goto yy683;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy694;
				if (yych <= 'b') goto yy696;
				goto yy683;
			} else {
				if (yych <= 'f') goto yy698;
				if (yych == 'n') goto yy700;
				goto yy683;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy702;
				if (yych <= 's') goto yy683;
				if (yych <= 't') goto yy704;
				goto yy691;
			} else {
				if (yych <= 'v') goto yy706;
				if (yych == 'x') goto yy708;
				goto yy683;
			}
		}
	}
yy682:
#line 737 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4589 "src/parse/lex.cc"
yy683:
	++YYCURSOR;
yy684:
#line 753 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4599 "src/parse/lex.cc"
yy685:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy678;
	goto yy684;
yy686:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy687;
	if (yych <= '7') goto yy709;
yy687:
#line 736 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4612 "src/parse/lex.cc"
yy688:
	++YYCURSOR;
	goto yy687;
yy689:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy690;
		if (yych <= '9') goto yy711;
	} else {
		if (yych <= 'F') goto yy711;
		if (yych <= '`') goto yy690;
		if (yych <= 'f') goto yy711;
	}
yy690:
#line 735 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4630 "src/parse/lex.cc"
yy691:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy690;
		if (yych <= '9') goto yy712;
		goto yy690;
	} else {
		if (yych <= 'F') goto yy712;
		if (yych <= '`') goto yy690;
		if (yych <= 'f') goto yy712;
		goto yy690;
	}
yy692:
	++YYCURSOR;
#line 752 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4648 "src/parse/lex.cc"
yy694:
	++YYCURSOR;
#line 745 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4653 "src/parse/lex.cc"
yy696:
	++YYCURSOR;
#line 746 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4658 "src/parse/lex.cc"
yy698:
	++YYCURSOR;
#line 747 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4663 "src/parse/lex.cc"
yy700:
	++YYCURSOR;
#line 748 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4668 "src/parse/lex.cc"
yy702:
	++YYCURSOR;
#line 749 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4673 "src/parse/lex.cc"
yy704:
	++YYCURSOR;
#line 750 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4678 "src/parse/lex.cc"
yy706:
	++YYCURSOR;
#line 751 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4683 "src/parse/lex.cc"
yy708:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy690;
		if (yych <= '9') goto yy713;
		goto yy690;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy690;
		if (yych <= 'f') goto yy713;
		goto yy690;
	}
yy709:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy710;
	if (yych <= '7') goto yy714;
yy710:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy687;
	} else {
		goto yy690;
	}
yy711:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy716;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy716;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy716;
		goto yy710;
	}
yy712:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy717;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy717;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy717;
		goto yy710;
	}
yy713:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy718;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy718;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy718;
		goto yy710;
	}
yy714:
	++YYCURSOR;
#line 744 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4748 "src/parse/lex.cc"
yy716:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy720;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy720;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy720;
		goto yy710;
	}
yy717:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy713;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy713;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy713;
		goto yy710;
	}
yy718:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4777 "src/parse/lex.cc"
yy720:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych >= ':') goto yy710;
	} else {
		if (yych <= 'F') goto yy721;
		if (yych <= '`') goto yy710;
		if (yych >= 'g') goto yy710;
	}
yy721:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy710;
		if (yych <= '9') goto yy712;
		goto yy710;
	} else {
		if (yych <= 'F') goto yy712;
		if (yych <= '`') goto yy710;
		if (yych <= 'f') goto yy712;
		goto yy710;
	}
}
#line 760 "../src/parse/lex.re"

    }
    else {
        
#line 4806 "src/parse/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy724;
			if (yych == '\n') goto yy728;
			goto yy726;
		} else {
			if (yych <= '\r') goto yy730;
			if (yych == '\\') goto yy731;
			goto yy726;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy733;
			if (yych <= 0xDF) goto yy735;
			if (yych <= 0xE0) goto yy736;
			goto yy737;
		} else {
			if (yych <= 0xF0) goto yy738;
			if (yych <= 0xF3) goto yy739;
			if (yych <= 0xF4) goto yy740;
			goto yy733;
		}
	}
yy724:
	++YYCURSOR;
#line 740 "../src/parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4839 "src/parse/lex.cc"
yy726:
	++YYCURSOR;
yy727:
#line 742 "../src/parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4845 "src/parse/lex.cc"
yy728:
	++YYCURSOR;
#line 734 "../src/parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4850 "src/parse/lex.cc"
yy730:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy728;
	goto yy727;
yy731:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy732;
				if (yych == '\n') goto yy728;
				goto yy741;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy743;
					goto yy741;
				} else {
					if (yych <= '3') goto yy744;
					if (yych <= '7') goto yy746;
					goto yy741;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy747;
					goto yy741;
				} else {
					if (yych <= 'X') goto yy749;
					if (yych <= '[') goto yy741;
					goto yy750;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy741;
					goto yy752;
				} else {
					if (yych <= 'b') goto yy754;
					if (yych <= 'e') goto yy741;
					goto yy756;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy758;
				if (yych <= 'q') goto yy741;
				goto yy760;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy741;
					goto yy762;
				} else {
					if (yych <= 'u') goto yy749;
					if (yych <= 'v') goto yy764;
					goto yy741;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy766;
					goto yy741;
				} else {
					if (yych <= 0xC1) goto yy732;
					if (yych <= 0xDF) goto yy767;
					goto yy769;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy770;
					goto yy771;
				} else {
					if (yych <= 0xF3) goto yy772;
					if (yych <= 0xF4) goto yy773;
				}
			}
		}
	}
yy732:
#line 737 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4935 "src/parse/lex.cc"
yy733:
	++YYCURSOR;
yy734:
#line 738 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 4941 "src/parse/lex.cc"
yy735:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy734;
	if (yych <= 0xBF) goto yy726;
	goto yy734;
yy736:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x9F) goto yy734;
	if (yych <= 0xBF) goto yy774;
	goto yy734;
yy737:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy734;
	if (yych <= 0xBF) goto yy774;
	goto yy734;
yy738:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x8F) goto yy734;
	if (yych <= 0xBF) goto yy775;
	goto yy734;
yy739:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy734;
	if (yych <= 0xBF) goto yy775;
	goto yy734;
yy740:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x7F) goto yy734;
	if (yych <= 0x8F) goto yy775;
	goto yy734;
yy741:
	++YYCURSOR;
yy742:
#line 753 "../src/parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4986 "src/parse/lex.cc"
yy743:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy728;
	goto yy742;
yy744:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy745;
	if (yych <= '7') goto yy776;
yy745:
#line 736 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4999 "src/parse/lex.cc"
yy746:
	++YYCURSOR;
	goto yy745;
yy747:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy748;
		if (yych <= '9') goto yy777;
	} else {
		if (yych <= 'F') goto yy777;
		if (yych <= '`') goto yy748;
		if (yych <= 'f') goto yy777;
	}
yy748:
#line 735 "../src/parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5017 "src/parse/lex.cc"
yy749:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy748;
		if (yych <= '9') goto yy778;
		goto yy748;
	} else {
		if (yych <= 'F') goto yy778;
		if (yych <= '`') goto yy748;
		if (yych <= 'f') goto yy778;
		goto yy748;
	}
yy750:
	++YYCURSOR;
#line 752 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5035 "src/parse/lex.cc"
yy752:
	++YYCURSOR;
#line 745 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5040 "src/parse/lex.cc"
yy754:
	++YYCURSOR;
#line 746 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5045 "src/parse/lex.cc"
yy756:
	++YYCURSOR;
#line 747 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5050 "src/parse/lex.cc"
yy758:
	++YYCURSOR;
#line 748 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5055 "src/parse/lex.cc"
yy760:
	++YYCURSOR;
#line 749 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5060 "src/parse/lex.cc"
yy762:
	++YYCURSOR;
#line 750 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5065 "src/parse/lex.cc"
yy764:
	++YYCURSOR;
#line 751 "../src/parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5070 "src/parse/lex.cc"
yy766:
	yyaccept = 3;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy748;
		if (yych <= '9') goto yy779;
		goto yy748;
	} else {
		if (yych <= 'F') goto yy779;
		if (yych <= '`') goto yy748;
		if (yych <= 'f') goto yy779;
		goto yy748;
	}
yy767:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0xBF) goto yy741;
yy768:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy732;
		} else {
			goto yy734;
		}
	} else {
		if (yyaccept == 2) {
			goto yy745;
		} else {
			goto yy748;
		}
	}
yy769:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x9F) goto yy768;
	if (yych <= 0xBF) goto yy767;
	goto yy768;
yy770:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0xBF) goto yy767;
	goto yy768;
yy771:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x8F) goto yy768;
	if (yych <= 0xBF) goto yy770;
	goto yy768;
yy772:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0xBF) goto yy770;
	goto yy768;
yy773:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0x8F) goto yy770;
	goto yy768;
yy774:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0xBF) goto yy726;
	goto yy768;
yy775:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= 0x7F) goto yy768;
	if (yych <= 0xBF) goto yy774;
	goto yy768;
yy776:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy768;
	if (yych <= '7') goto yy780;
	goto yy768;
yy777:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy782;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy782;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy782;
		goto yy768;
	}
yy778:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy783;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy783;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy783;
		goto yy768;
	}
yy779:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy784;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy784;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy784;
		goto yy768;
	}
yy780:
	++YYCURSOR;
#line 744 "../src/parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5183 "src/parse/lex.cc"
yy782:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy786;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy786;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy786;
		goto yy768;
	}
yy783:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy779;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy779;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy779;
		goto yy768;
	}
yy784:
	++YYCURSOR;
#line 743 "../src/parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5212 "src/parse/lex.cc"
yy786:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych >= ':') goto yy768;
	} else {
		if (yych <= 'F') goto yy787;
		if (yych <= '`') goto yy768;
		if (yych >= 'g') goto yy768;
	}
yy787:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy768;
		if (yych <= '9') goto yy778;
		goto yy768;
	} else {
		if (yych <= 'F') goto yy778;
		if (yych <= '`') goto yy768;
		if (yych <= 'f') goto yy778;
		goto yy768;
	}
}
#line 763 "../src/parse/lex.re"
 #line 763 "../src/parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5260 "src/parse/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy792;
		} else {
			if (yych <= '\n') goto yy794;
			if (yych <= '\f') goto yy792;
			goto yy796;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy792;
			goto yy797;
		} else {
			if (yych <= '0') goto yy792;
			if (yych <= '9') goto yy798;
			goto yy792;
		}
	}
	++YYCURSOR;
#line 806 "../src/parse/lex.re"
	{ --cur; return; }
#line 5320 "src/parse/lex.cc"
yy792:
	++YYCURSOR;
yy793:
#line 807 "../src/parse/lex.re"
	{ goto sourceline; }
#line 5326 "src/parse/lex.cc"
yy794:
	++YYCURSOR;
#line 805 "../src/parse/lex.re"
	{ pos = tok = cur; return; }
#line 5331 "src/parse/lex.cc"
yy796:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy794;
	goto yy793;
yy797:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy793;
	if (yych == '\n') goto yy793;
	goto yy802;
yy798:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy798;
	}
#line 785 "../src/parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5358 "src/parse/lex.cc"
yy801:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy802:
	if (yybm[0+yych] & 128) {
		goto yy801;
	}
	if (yych <= '\n') goto yy803;
	if (yych <= '"') goto yy804;
	goto yy806;
yy803:
	YYCURSOR = YYMARKER;
	goto yy793;
yy804:
	++YYCURSOR;
#line 795 "../src/parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = getstr(tok + 1, cur - 1);
        strrreplace(name, "\\", "\\\\");
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5385 "src/parse/lex.cc"
yy806:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy803;
	if (yych == '\n') goto yy803;
	goto yy801;
}
#line 808 "../src/parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
