/* Generated by re2c 2.1.1 on Fri Jul 16 09:07:43 2021 */
#line 1 "../lib/lex.re"
#include <stdio.h>

#include "src/util/c99_stdint.h"

#include "src/encoding/enc.h"
#include "src/msg/msg.h"
#include "src/parse/ast.h"
#include "src/parse/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "parse.h"
#include "lib/lex.h"


extern YYSTYPE yylval;

namespace re2c {

static int32_t lex_cls_chr(const char *&, uint32_t &);

#line 30 "../lib/lex.re"


int lex(const char *&cur)
{
    
#line 30 "lib/lex.cc"
const char *yyt1;const char *yyt2;
#line 34 "../lib/lex.re"

    const char *mar, *x, *y;
    std::vector<ASTRange> cls;
    bool neg = false;
    uint32_t l, u;


#line 40 "lib/lex.cc"
{
	char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *cur;
	if (yych <= '>') {
		if (yych <= '\'') {
			if (yych <= 0x00) goto yy2;
			if (yych == '$') goto yy6;
			goto yy4;
		} else {
			if (yych <= '+') goto yy8;
			if (yych == '.') goto yy10;
			goto yy4;
		}
	} else {
		if (yych <= ']') {
			if (yych <= '?') goto yy8;
			if (yych == '[') goto yy12;
			goto yy4;
		} else {
			if (yych <= 'z') {
				if (yych <= '^') goto yy6;
				goto yy4;
			} else {
				if (yych <= '{') goto yy14;
				if (yych <= '|') goto yy8;
				goto yy4;
			}
		}
	}
yy2:
	++cur;
#line 43 "../lib/lex.re"
	{ return 0; }
#line 108 "lib/lex.cc"
yy4:
	++cur;
yy5:
#line 78 "../lib/lex.re"
	{
        ASTChar c = {static_cast<uint32_t>(cur[-1]), NOWHERE};
        std::vector<ASTChar> *str = new std::vector<ASTChar>;
        str->push_back(c);
        yylval.regexp = ast_str(NOWHERE, str, false);
        return TOKEN_REGEXP;
    }
#line 120 "lib/lex.cc"
yy6:
	++cur;
#line 47 "../lib/lex.re"
	{
        error("anchors are not supported");
        return TOKEN_ERROR;
    }
#line 128 "lib/lex.cc"
yy8:
	++cur;
#line 45 "../lib/lex.re"
	{ return cur[-1]; }
#line 133 "lib/lex.cc"
yy10:
	++cur;
#line 73 "../lib/lex.re"
	{
        yylval.regexp = ast_dot(NOWHERE);
        return TOKEN_REGEXP;
    }
#line 141 "lib/lex.cc"
yy12:
	yych = *++cur;
	if (yych == '^') goto yy15;
#line 53 "../lib/lex.re"
	{ goto cls; }
#line 147 "lib/lex.cc"
yy14:
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy5;
	if (yych <= '9') {
		yyt1 = cur;
		goto yy17;
	}
	goto yy5;
yy15:
	++cur;
#line 52 "../lib/lex.re"
	{ neg = true; goto cls; }
#line 160 "lib/lex.cc"
yy17:
	yych = *++cur;
	if (yybm[0+yych] & 128) {
		goto yy17;
	}
	if (yych == ',') goto yy20;
	if (yych == '}') goto yy21;
yy19:
	cur = mar;
	goto yy5;
yy20:
	yych = *++cur;
	if (yych <= '/') goto yy19;
	if (yych <= '9') {
		yyt2 = cur;
		goto yy23;
	}
	if (yych == '}') goto yy25;
	goto yy19;
yy21:
	++cur;
	x = yyt1;
#line 55 "../lib/lex.re"
	{
        if (!s_to_u32_unsafe(x, cur - 1, yylval.bounds.min)) goto err_cnt;
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_COUNT;
    }
#line 189 "lib/lex.cc"
yy23:
	yych = *++cur;
	if (yych <= '/') goto yy19;
	if (yych <= '9') goto yy23;
	if (yych == '}') goto yy27;
	goto yy19;
yy25:
	++cur;
	x = yyt1;
#line 67 "../lib/lex.re"
	{
        if (!s_to_u32_unsafe(x, cur - 2, yylval.bounds.min)) goto err_cnt;
        yylval.bounds.max = AST::MANY;
        return TOKEN_COUNT;
    }
#line 205 "lib/lex.cc"
yy27:
	++cur;
	x = yyt1;
	y = yyt2;
#line 61 "../lib/lex.re"
	{
        if (!s_to_u32_unsafe(x, y - 1, yylval.bounds.min)
            || !s_to_u32_unsafe(y, cur - 1, yylval.bounds.max)) goto err_cnt;
        return TOKEN_COUNT;
    }
#line 216 "lib/lex.cc"
}
#line 85 "../lib/lex.re"


cls:
    if (lex_cls_chr(cur, l) != 0) goto err;

#line 224 "lib/lex.cc"
{
	char yych;
	yych = *(mar = cur);
	if (yych == '-') goto yy32;
yy31:
#line 90 "../lib/lex.re"
	{ u = l; goto add; }
#line 232 "lib/lex.cc"
yy32:
	yych = *++cur;
	if (yych != ']') goto yy34;
	cur = mar;
	goto yy31;
yy34:
	++cur;
	cur -= 1;
#line 91 "../lib/lex.re"
	{ if (lex_cls_chr(cur, u) != 0) goto err; goto add; }
#line 243 "lib/lex.cc"
}
#line 92 "../lib/lex.re"

add:
    if (l > u) goto err;
    cls.push_back(ASTRange(l, u, NOWHERE));

#line 251 "lib/lex.cc"
{
	char yych;
	yych = *cur;
	if (yych == ']') goto yy39;
#line 97 "../lib/lex.re"
	{ goto cls; }
#line 258 "lib/lex.cc"
yy39:
	++cur;
#line 98 "../lib/lex.re"
	{
        std::vector<ASTRange> *p = new std::vector<ASTRange>;
        p->swap(cls);
        yylval.regexp = ast_cls(NOWHERE, p, neg);
        return TOKEN_REGEXP;
    }
#line 268 "lib/lex.cc"
}
#line 104 "../lib/lex.re"


err:
    error("syntax error: %s\n", cur);
    return TOKEN_ERROR;

err_cnt:
    error("repetition count overflow");
    return TOKEN_ERROR;
}

int32_t lex_cls_chr(const char *&cur, uint32_t &c)
{
    const char *mar, *p = cur;

#line 286 "lib/lex.cc"
{
	char yych;
	yych = *cur;
	if (yych <= 0x00) goto yy43;
	if (yych <= 'Z') goto yy45;
	if (yych <= '[') goto yy47;
	if (yych <= '\\') goto yy48;
	goto yy45;
yy43:
	++cur;
#line 119 "../lib/lex.re"
	{ return 1; }
#line 299 "lib/lex.cc"
yy45:
	++cur;
yy46:
#line 137 "../lib/lex.re"
	{ c = static_cast<uint8_t>(cur[-1]); return 0; }
#line 305 "lib/lex.cc"
yy47:
	yych = *++cur;
	if (yych <= '9') {
		if (yych == '.') goto yy50;
		goto yy46;
	} else {
		if (yych <= ':') goto yy52;
		if (yych == '=') goto yy54;
		goto yy46;
	}
yy48:
	yych = *(mar = ++cur);
	switch (yych) {
	case '\\':	goto yy56;
	case ']':	goto yy58;
	case 'a':	goto yy60;
	case 'b':	goto yy62;
	case 'f':	goto yy64;
	case 'n':	goto yy66;
	case 'r':	goto yy68;
	case 't':	goto yy70;
	case 'v':	goto yy72;
	case 'x':	goto yy74;
	default:	goto yy49;
	}
yy49:
#line 126 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\\');    return 0; }
#line 334 "lib/lex.cc"
yy50:
	++cur;
#line 120 "../lib/lex.re"
	{ error("collating characters not supported"); return 1; }
#line 339 "lib/lex.cc"
yy52:
	++cur;
#line 121 "../lib/lex.re"
	{ error("character classes not supported");    return 1; }
#line 344 "lib/lex.cc"
yy54:
	++cur;
#line 122 "../lib/lex.re"
	{ error("equivalence classes not supported");  return 1; }
#line 349 "lib/lex.cc"
yy56:
	++cur;
#line 134 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\\');    return 0; }
#line 354 "lib/lex.cc"
yy58:
	++cur;
#line 135 "../lib/lex.re"
	{ c = static_cast<uint8_t>(']');     return 0; }
#line 359 "lib/lex.cc"
yy60:
	++cur;
#line 127 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\a');    return 0; }
#line 364 "lib/lex.cc"
yy62:
	++cur;
#line 128 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\b');    return 0; }
#line 369 "lib/lex.cc"
yy64:
	++cur;
#line 129 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\f');    return 0; }
#line 374 "lib/lex.cc"
yy66:
	++cur;
#line 130 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\n');    return 0; }
#line 379 "lib/lex.cc"
yy68:
	++cur;
#line 131 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\r');    return 0; }
#line 384 "lib/lex.cc"
yy70:
	++cur;
#line 132 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\t');    return 0; }
#line 389 "lib/lex.cc"
yy72:
	++cur;
#line 133 "../lib/lex.re"
	{ c = static_cast<uint8_t>('\v');    return 0; }
#line 394 "lib/lex.cc"
yy74:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy75;
		if (yych <= '9') goto yy76;
	} else {
		if (yych <= 'F') goto yy76;
		if (yych <= '`') goto yy75;
		if (yych <= 'f') goto yy76;
	}
yy75:
	cur = mar;
	goto yy49;
yy76:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy75;
		if (yych >= ':') goto yy75;
	} else {
		if (yych <= 'F') goto yy77;
		if (yych <= '`') goto yy75;
		if (yych >= 'g') goto yy75;
	}
yy77:
	++cur;
#line 124 "../lib/lex.re"
	{ c = unesc_hex(p, cur); return 0; }
#line 422 "lib/lex.cc"
}
#line 138 "../lib/lex.re"

}

} // namespace re2c
