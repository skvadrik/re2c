
``-? --help -h``
    Show help message.

``--api --input <default | custom>``
    Specify the API used by the generated code to interface with used-defined
    code: ``default`` is the API based on pointer arithmetic (the default for
    C), and ``custom`` is the generic API (the default for Go and Rust).

``--bit-vectors -b``
    Optimize conditional jumps using bit masks.
    This option implies ``--nested-ifs``.

``--case-insensitive``
    Treat single-quoted and double-quoted strings as case-insensitive.

``--case-inverted``
    Invert the meaning of single-quoted and double-quoted strings:
    treat single-quoted strings as case-sensitive and double-quoted strings
    as case-insensitive.

``--case-ranges``
    Collapse consecutive cases in a switch statements into a range of the form
    ``low ... high``. This syntax is a C/C++ language extension that is
    supported by compilers like GCC, Clang and Tcc. The main advantage over
    using single cases is smaller generated code and faster generation time,
    although for some compilers like Tcc it also results in smaller binary size.
    This option is supported only for C.

``--computed-gotos -g``
    Optimize conditional jumps using non-standard "computed goto" extension
    (which must be supported by the compiler). re2c generates jump tables
    only in complex cases with a lot of conditional branches. Complexity
    threshold can be configured with ``cgoto:threshold`` configuration. This
    option implies ``--bit-vectors``. It is supported only for C.

``--conditions --start-conditions -c``
    Enable support of Flex-like "conditions": multiple interrelated lexers
    within one block. This is an alternative to manually specifying different
    re2c blocks connected with ``goto`` or function calls.

``--depfile FILE``
    Write dependency information to ``FILE`` in the form of a Makefile rule
    ``<output-file> : <input-file> [include-file ...]``. This allows one to
    track build dependencies in the presence of ``include:re2c`` directives,
    so that updating include files triggers regeneration of the output file.
    This option depends on the ``--output`` option.

``--ebcdic --ecb -e``
    Generate a lexer that reads input in EBCDIC encoding. re2c assumes that the
    character range is 0 -- 0xFF and character size is 1 byte.

``--empty-class <match-empty | match-none | error>``
    Define the way re2c treats empty character classes. With ``match-empty``
    (the default) empty class matches empty input (which is illogical, but
    backwards-compatible). With ``match-none`` empty class always fails to match.
    With ``error`` empty class raises a compilation error.

``--encoding-policy <fail | substitute | ignore>``
    Define the way re2c treats Unicode surrogates.
    With ``fail`` re2c aborts with an error when a surrogate is encountered.
    With ``substitute`` re2c silently replaces surrogates with the error code
    point 0xFFFD. With ``ignore`` (the default) re2c treats surrogates as
    normal code points. The Unicode standard says that standalone surrogates
    are invalid, but real-world libraries and programs behave in different ways.

``--flex-syntax -F``
    Partial support for Flex syntax: in this mode named definitions don't need
    the equal sign and the terminating semicolon, and when used they must be
    surrounded with curly braces. Names without curly braces are treated as
    double-quoted strings.

``--header --type-header -t HEADER``
    Generate a ``HEADER`` file. The contents of the file can be specified with
    directives ``header:re2c:on`` and ``header:re2c:off``.
    If conditions are used the header will have a condition enum automatically
    appended to it (unless there is an explicit ``conditions:re2c`` directive).

``-I PATH``
    Add ``PATH`` to the list of locations which are used when searching for
    include files. This option is useful in combination with ``include:re2c``
    directive. re2c looks for ``FILE`` in the directory of the parent file and
    in the include locations specified with ``-I`` option.

``--input-encoding <ascii | utf8>``
    Specify the way re2c parses regular expressions.
    With ``ascii`` (the default) re2c handles input as ASCII-encoded: any
    sequence of code units is a sequence of standalone 1-byte characters.
    With ``utf8`` re2c handles input as UTF8-encoded and recognizes multibyte
    characters.

``--invert-captures``
    Invert the meaning of capturing and non-capturing groups. By default
    ``(...)`` is capturing and ``(! ...)`` is non-capturing. With this option
    ``(! ...)`` is capturing and ``(...)`` is non-capturing.

``--lang <c | go | rust | v>``
    Specify the output language. Supported languages are C, Go, Rust and V.
    The default is C for re2c, Go for re2go and Rust for re2rust.

``--leftmost-captures``
    Enable submatch extraction with leftmost greedy capturing groups.

``--location-format <gnu | msvc>``
    Specify location format in messages.
    With ``gnu`` locations are printed as 'filename:line:column: ...'.
    With ``msvc`` locations are printed as 'filename(line,column) ...'.
    The default is ``gnu``.

``--loop-switch``
    Encode DFA in a form of a loop over a switch statement. Individual states
    are switch cases. The current state is stored in a variable ``yystate``.
    Transitions between states update ``yystate`` to the case label of the
    destination state and ``continue`` to the head of the loop. This option is
    always enabled for Rust, as it has no ``goto`` statement and cannot use the
    goto/label approach which is the default for C and Go backends.

``--nested-ifs -s``
    Use nested ``if`` statements instead of ``switch`` statements in conditional
    jumps. This usually results in more efficient code with non-optimizing
    compilers.

``--no-debug-info -i``
    Do not output line directives. This may be useful when the generated code is
    stored in a version control system (to avoid huge autogenerated diffs on
    small changes). This option is on by default for Rust, as it does not have
    line directives.

``--no-generation-date``
    Suppress date output in the generated file.

``--no-version``
    Suppress version output in the generated file.

``--no-unsafe``
    Do not generate ``unsafe`` wrapper over ``YYPEEK`` (this option is specific
    to Rust). For performance reasons ``YYPEEK`` should avoid bounds-checking,
    as the lexer already performs end-of-input checks in a more efficient way.
    The user may choose to provide a safe ``YYPEEK`` definition, or a definition
    that is unsafe only in release builds, in which case the ``--no-unsafe``
    option helps to avoid warnings about redundant ``unsafe`` blocks.

``--output -o OUTPUT``
    Specify the ``OUTPUT`` file.

``--posix-captures -P``
    Enable submatch extraction with POSIX-style capturing groups.

``--reusable -r``
    Deprecated since version 2.2 (reusable blocks are allowed by default now).

``--skeleton -S``
    Ignore user-defined interface code and generate a self-contained "skeleton"
    program. Additionally, generate input files with strings derived from the
    regular grammar and compressed match results that are used to verify
    "skeleton" behavior on all inputs. This option is useful for finding bugs
    in optimizations and code generation. This option is supported only for C.

``--storable-state -f``
    Generate a lexer which can store its inner state.
    This is useful in push-model lexers which are stopped by an outer program
    when there is not enough input, and then resumed when more input becomes
    available. In this mode users should additionally define ``YYGETSTATE``
    and ``YYSETSTATE`` primitives, and variables ``yych``, ``yyaccept`` and
    ``state`` should be part of the stored lexer state.

``--tags -T``
    Enable submatch extraction with tags.

``--ucs2 --wide-chars -w``
    Generate a lexer that reads UCS2-encoded input. re2c assumes that the
    character range is 0 -- 0xFFFF and character size is 2 bytes.
    This option implies ``--nested-ifs``.

``--utf8 --utf-8 -8``
    Generate a lexer that reads input in UTF-8 encoding. re2c assumes that the
    character range is 0 -- 0x10FFFF and character size is 1 byte.

``--utf16 --utf-16 -x``
    Generate a lexer that reads UTF16-encoded input. re2c assumes that the
    character range is 0 -- 0x10FFFF and character size is 2 bytes.
    This option implies ``--nested-ifs``.

``--utf32 --unicode -u``
    Generate a lexer that reads UTF32-encoded input. re2c assumes that the
    character range is 0 -- 0x10FFFF and character size is 4 bytes.
    This option implies ``--nested-ifs``.

``--verbose``
    Output a short message in case of success.

``--vernum -V``
    Show version information in ``MMmmpp`` format (major, minor, patch).

``--version -v``
    Show version information.

``--single-pass -1``
    Deprecated. Does nothing (single pass is the default now).
