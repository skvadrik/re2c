Below is the list of all directives provided by re2c (in no particular order).
More information on each directive can be found in the related sections.

``/*!re2c ... */``
    A standard re2c block.

``%{ ... %}``
    A standard re2c block in ``-F --flex-support`` mode.

``/*!rules:re2c[:<name>] ... */``
    A reusable block with an optional ``<name>``. Rules bloks have the same
    structure as ordinary ``/*!re2c ... */`` blocks (a mixture of named
    definitions, configurations and rules), but they can be reused multiple
    times in a ``/*!use:re2c[:<name>] ... */`` or ``!use:<name>;`` directive.
    The code for a rules block is generated at the point where it is referenced
    by a use directive. Prior to re2c version 2.2 rules blocks required
    ``-r --reusable`` option, and named blocks were not supported.

``/*!use:re2c[:<name>] ... */``
    A use block with an optional ``<name>`` that references a previously defined
    rules block. If ``<name>`` is not specified, the most recent rules block is
    used (either a named or unnamed one). A use block can add definitions,
    configurations and rules of its own, which are merged to those of the
    referenced rules block. Prior to re2c version 2.2 use blocks required
    ``-r --reusable`` option, and named blocks were not supported.

``!use:<name> ; <newline>``
    This directive merges a previously defined rules block ``<name>`` into the
    current block: named definitions, configurations and rules of the referenced
    block are added to the current ones. Conflicts between overlapping rules and
    configurations are resolved in the usual way: the first rule takes priority,
    and the latest configuration overrides preceding ones. One exception are the
    special rules ``*``, ``$`` and ``<!>``: for them a block-local definition
    overrides any inherited ones, regardless of their order. A use directive can
    be placed anywhere inside of a block (not necessarily at the beginning), and
    multiple use directives are allowed.

``/*!ignore:re2c ... */``
    A block which contents are ignored and cut off from the output file.

``/*!max:re2c*/``
    This directive is substituted with the macro-definition of ``YYMAXFILL``.

``/*!maxnmatch:re2c*/``
    This directive is substituted with the macro-definition of ``YYMAXNMATCH``
    (requires ``-P --posix-captures`` option).

``/*!getstate:re2c*/``
    This directive is substituted with conditional dispatch on lexer state
    (requires ``-f --storable-state`` option).

``/*!types:re2c ... */``
    This directive is substituted with the definition of condition ``enum``
    (requires ``-c --conditions`` option).

``/*!stags:re2c ... */``, ``/*!mtags:re2c ... */``
    These directives allow one to specify a template piece of code that is expanded
    for each s-tag/m-tag variable generated by re2c. This block has two optional
    configurations: ``format = "@@";`` (specifies the template where ``@@`` is
    substituted with the name of each tag variable), and ``separator = "";``
    (specifies the piece of code used to join the generated pieces for different
    tag variables).

``/*!include:re2c <file> */``
    This directive allows one to include ``<file>`` (the contents of the
    ``<file>`` are literally substituted in place of the directive, in the same
    way as ``#include`` works in C/C++). This directive can be used together
    with the ``--depfile`` option to generate build system dependencies on the
    included files.

``!include <file> ; <newline>``
    This directive is the same as ``/*!include:re2c <file> */``, except that it
    is meant to be used inside of a re2c block (and therefore has a slightly
    different syntax).

``/*!header:re2c:on*/``
    This directive marks the start of header file. Everything after it and up to
    the following ``/*!header:re2c:off*/`` directive is processed by re2c and
    written to the header file specified with ``-t --type-header`` option.

``/*!header:re2c:off*/``
    This directive marks the end of header file started with
    ``/*!header:re2c:on*/``.
