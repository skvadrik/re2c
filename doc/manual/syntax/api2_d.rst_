There are two API styles that determine the form in which the primitives should
be defined:

  **Free-form**
    Free-form style is enabled with configuration
    ``re2c:api:style = free-form;``. It is the default for D.
    In this style interface primitives should be defined as free-form pieces of
    code with interpolated variables of the form ``@@{var}`` or optionally just
    ``@@`` if there is a single variable.
    The set of variables is specific to each primitive.
    Free-form style generic API can be defined in terms of integer variables
    ``cursor``, ``limit``, ``marker``, ``ctxmarker`` and a string (or a byte
    slice) ``data`` as follows:

    .. code-block:: d

        /*!re2c
          re2c:define:YYPEEK       = "data[cursor]";
          re2c:define:YYSKIP       = "cursor++";
          re2c:define:YYBACKUP     = "marker = cursor";
          re2c:define:YYRESTORE    = "cursor = marker";
          re2c:define:YYBACKUPCTX  = "ctxmarker = cursor";
          re2c:define:YYRESTORECTX = "cursor = ctxmarker";
          re2c:define:YYRESTORETAG = "cursor = ${tag}";
          re2c:define:YYLESSTHAN   = "limit - cursor < @@{len}";
          re2c:define:YYSTAGP      = "@@{tag} = cursor";
          re2c:define:YYSTAGN      = "@@{tag} = -1";
          re2c:define:YYSHIFT      = "cursor += @@{shift}";
          re2c:define:YYSHIFTSTAG  = "@@{tag} += @@{shift}";
        */

    |

  **Function-like**
    Function-like style is enabled with configuration
    ``re2c:api:style = functions;``. In this style primitives should be defined
    as functions or macros with parentheses, accepting the necessary arguments.
    This style is more restrictive than the free-form style.
    For example, if the input is a string (or a byte slice) ``data``, and
    integer variables ``cursor``, ``limit``, ``marker`` and ``ctxmarker``
    represent input positions, then the primitives can be defined as follows:

    .. code-block:: d

        YYPEEK := char func() { return data[cursor] }
        YYSKIP := func() { cursor++ }
        YYBACKUP := func() { marker = cursor }
        YYRESTORE := func() { cursor = marker }
        YYBACKUPCTX := func() { ctxmarker = cursor }
        YYRESTORECTX := func() { cursor = ctxmarker }
        YYLESSTHAN := func(n int) bool { return limit-cursor < n }
        YYSHIFT := func(n int) { cursor += n }
